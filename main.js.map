{"version":3,"sources":["./src/app/about/about.component.html","./src/app/app.component.html","./src/app/application/application.component.html","./src/app/components-formmodules-directives/components-formmodules-directives.component.html","./src/app/components/components.component.html","./src/app/environment/environment.component.html","./src/app/finish-app/finish-app.component.html","./src/app/first-app/first-app.component.html","./src/app/home/home.component.html","./src/app/http/http.component.html","./src/app/project-overview/project-overview.component.html","./src/app/reusable-components/reusable-components.component.html","./src/app/routing/routing.component.html","./src/app/services/services.component.html","./src/app/typescript/typescript.component.html","./node_modules/tslib/tslib.es6.js","./src/$_lazy_route_resource lazy namespace object","./src/app/about/about.component.ts","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/application/application.component.ts","./src/app/components-formmodules-directives/components-formmodules-directives.component.ts","./src/app/components/components.component.ts","./src/app/environment/environment.component.ts","./src/app/finish-app/finish-app.component.ts","./src/app/first-app/first-app.component.ts","./src/app/home/home.component.ts","./src/app/http/http.component.ts","./src/app/project-overview/project-overview.component.ts","./src/app/reusable-components/reusable-components.component.ts","./src/app/routing/routing.component.ts","./src/app/services/services.component.ts","./src/app/shared/modi.service.ts","./src/app/shared/modi.ts","./src/app/typescript/typescript.component.ts","./src/environments/environment.ts","./src/main.ts","./src/prism.js"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["export default \"<div class=\\\"ui list\\\" *ngIf=\\\"!about\\\" style=\\\"text-align:center; margin-top: 100px; margin-bottom: 50px;\\\" >\\n  <a class=\\\"item\\\" (click)=\\\"aboutFunc()\\\">About</a>\\n</div>\\n\\n<div *ngIf=\\\"about\\\" style=\\\"margin: 30px; text-align: center;\\\" class=\\\"ui message\\\">\\n  <i class=\\\"close icon\\\" (click)=\\\"hideAbout()\\\"></i>\\n  <h4>This project was initially designed and developed by Michaela Rodenbücher.</h4>\\n  <p>Master-Thesis at Otto-Friedrich University Bamberg.\\n    <br>May 2019\\n  </p>\\n  <h4>Since then, updated and maintained by the team of the chair of media informatics.</h4>\\n</div>\"","export default \"<div>\\n  <h1 class=\\\"ui header\\\" style=\\\"text-align:center; margin-top: 30px; margin-bottom: 50px; margin-left: 20%; \\\">\\n    {{ title }}\\n  </h1>\\n  <div class=\\\"ui grid container\\\" style=\\\"min-width:90%;\\\">\\n    <div class=\\\"four wide column\\\">\\n\\n      <div class=\\\"ui left fixed vertical menu\\\" style=\\\"max-width:25%; overflow: auto;\\\">\\n        <a class=\\\"item\\\" routerLink=\\\"/home\\\" routerLinkActive=\\\"active\\\">\\n          Home\\n        </a>\\n        <div class=\\\"item\\\">\\n          <h4>General</h4>\\n          <a class=\\\"item\\\" routerLink=\\\"/environment\\\" routerLinkActive=\\\"active\\\">\\n            Environment\\n          </a>\\n          <a class=\\\"item\\\" routerLink=\\\"/first-app\\\" routerLinkActive=\\\"active\\\">\\n            First Angular-App\\n          </a>\\n          <a class=\\\"item\\\" routerLink=\\\"/typescript\\\" routerLinkActive=\\\"active\\\">\\n            TypeScript\\n          </a>\\n        </div>\\n        <div class=\\\"item\\\">\\n          <h4>Project</h4>\\n          <a class=\\\"item\\\" routerLink=\\\"/project-overview\\\" routerLinkActive=\\\"active\\\">\\n            Introduction\\n          </a>\\n          <a class=\\\"item\\\" routerLink=\\\"/application\\\" routerLinkActive=\\\"active\\\">\\n            App</a>\\n          <a class=\\\"item\\\" routerLink=\\\"/components\\\" routerLinkActive=\\\"active\\\">\\n            Components</a>\\n          <a class=\\\"item\\\" routerLink=\\\"/components-formmodules-directives\\\" routerLinkActive=\\\"active\\\">\\n            Components, FormModules, Directives\\n          </a>\\n          <a class=\\\"item\\\" routerLink=\\\"/reusable-components\\\" routerLinkActive=\\\"active\\\">\\n            Reusable Components\\n          </a>\\n          <a class=\\\"item\\\" routerLink=\\\"/services\\\" routerLinkActive=\\\"active\\\">\\n            Services\\n          </a>\\n          <a class=\\\"item\\\" routerLink=\\\"/routing\\\" routerLinkActive=\\\"active\\\">\\n            Routing\\n          </a>\\n          <a class=\\\"item\\\" routerLink=\\\"/http\\\" routerLinkActive=\\\"active\\\">\\n            HTTP\\n          </a>\\n          <a class=\\\"item\\\" routerLink=\\\"/finish-app\\\" routerLinkActive=\\\"active\\\">\\n            Finish the App\\n          </a>\\n        </div>\\n      </div>\\n    </div>\\n    <div class=\\\"twelve wide column\\\">\\n      <router-outlet (activate)=\\\"onActivate()\\\"></router-outlet>\\n      <div style=\\\"text-align:center; margin: 50px;\\\">\\n        <button class=\\\"ui button primary\\\" [routerLink]=\\\"getLast()\\\" *ngIf=\\\"!getHideBackButton()\\\">Back</button>\\n        <button class=\\\"ui button primary\\\" [routerLink]=\\\"getNext()\\\" *ngIf=\\\"!getHideNextButton()\\\">Next</button>\\n      </div>\\n      <app-about></app-about>\\n    </div>\\n  </div>\\n\\n</div>\"","export default \"<h2>App</h2>\\n<div class=\\\"language-bash\\\">\\n<div *ngIf=\\\"praxis\\\" class=\\\"ui info message\\\">\\n  <h5>User Story</h5>\\n  <p>As a <b>user</b><br />\\n    I want to <b>have an app shell</b>, <br />\\n    to <b> display the app's content</b>.</p>\\n</div>\\n\\n<div *ngIf=\\\"praxis\\\">\\n  <h4>Initial Application</h4>\\n  <p>Open your cmd and type:</p>\\n  <div class=\\\"code_listing\\\">\\n    <pre class=\\\"command-line language-bash\\\"><code #code1>ng new where-to-go -is</code></pre>\\n    <div><i class=\\\"copy outline link icon\\\" (click)=\\\"copy(code1.textContent)\\\"></i></div>\\n    <a href=\\\"https://angular.io/cli/new\\\" target=\\\"_blank\\\"><i class=\\\"large info circle link icon\\\"></i></a>\\n  </div>\\n  <p>The <code>-is</code> defines that the project has an inline-style. If you don't do\\n    this, we would get an extra\\n    CSS-file for every single component. We don't want that for this project.</p>\\n  <p>Next, open your editor and open the project folder. After that run the\\n    initial application. In most editors you even can open a terminal directly within the editor. If the terminal returns an error message like <code>Command not found</code> you have to restart it in order for the process to  recognise the newly installed commands.</p>\\n  <div class=\\\"code_listing\\\">\\n    <pre class=\\\"command-line language-bash\\\"><code #code2>ng serve --open</code></pre>\\n    <div><i class=\\\"copy outline link icon\\\" (click)=\\\"copy(code2.textContent)\\\"></i></div>\\n    <a href=\\\"https://angular.io/cli/serve\\\" target=\\\"_blank\\\"><i class=\\\"large info circle link icon\\\"></i></a>\\n  </div>\\n  <p>The browser automatically opens the start page of the initial Angular app:</p>\\n  <img class=\\\"ui image big centered border\\\" src=\\\"assets/img/Angular-Initial-App.png\\\">\\n</div>\\n\\n<div *ngIf=\\\"theoryLarge\\\" class=\\\"ui message\\\" style=\\\"margin-top: 20px;\\\">\\n  <h4>Structure of the project</h4>\\n  <p>The CLI created a project for us. These are the workspace files:</p>\\n  <p><i class=\\\"folder open icon\\\"></i><code>where-to-go</code>: working directory<br>\\n    <strong>&#8990; </strong><i class=\\\"folder outline icon\\\"></i> <code>.git</code>: git metadata and file database<br />\\n    <strong>&#8990; </strong><i class=\\\"folder icon\\\"></i> <code>e2e</code>: for set of end-to-end tests<br />\\n    <strong>&#8990; </strong> <i class=\\\"folder icon\\\"></i> <code>node_modules</code>: Installed npm packages<br/>\\n    <strong>&#8990; </strong> <i class=\\\"folder open icon\\\"></i> <code>src</code>: <strong>source files of the application</strong><br/>\\n      <strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#8990; </strong> <i class=\\\"folder open icon\\\"></i> <code>app</code>: <strong>Modules and components files</strong><br/>\\n        <strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#8990; </strong> <i class=\\\"file alternate icon\\\"></i> <code>app-routing.module.ts</code>: Router module (navigation)<br/>\\n        <strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#8990; </strong> <i class=\\\"file alternate icon\\\"></i> <code>app.component.css</code>: Base CSS for root <code>AppComponent</code><br/>\\n        <strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#8990; </strong> <i class=\\\"file alternate icon\\\"></i> <code>app.component.html</code>: Template for <code>AppComponent</code>, shell of the app<br/>\\n        <strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#8990; </strong> <i class=\\\"file alternate icon\\\"></i> <code>app.component.spec.ts</code>: Unit tests for the <code>AppComponent</code><br/>\\n        <strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#8990; </strong> <i class=\\\"file alternate icon\\\"></i> <code>app.component.ts</code>: Logic of <code>AppComponent</code><br/>\\n        <strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#8990; </strong> <i class=\\\"file alternate icon\\\"></i> <code>app.module.ts</code>: Root module, all used modules are declared here<br/>\\n      <strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#8990; </strong> <i class=\\\"folder icon\\\"></i> <code>assets</code>: For images and files copied as-is<br/>\\n      <strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#8990; </strong> <i class=\\\"folder icon\\\"></i> <code>environments</code>: Build configuration for target environments<br/>\\n      <strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#8990; </strong> <i class=\\\"file alternate icon\\\"></i> <code>browserslist</code>: Configuration of target browser<br/>\\n      <strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#8990; </strong> <i class=\\\"file alternate icon\\\"></i> <code>favicon.ico</code>: Icon used in the browser bookmark bar<br/>\\n      <strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#8990; </strong> <i class=\\\"file alternate icon\\\"></i> <code>index.html</code>: Main served HTML page<br/>\\n      <strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#8990; </strong> <i class=\\\"file alternate icon\\\"></i> <code>karma.conf.js</code>: Test runner configuration<br/>\\n      <strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#8990; </strong> <i class=\\\"file alternate icon\\\"></i> <code>main.ts</code>: Entry point of application, compiles the application<br/>\\n      <strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#8990; </strong> <i class=\\\"file alternate icon\\\"></i> <code>polyfills.ts</code>: Polyfill scripts for old browser support<br/>\\n      <strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#8990; </strong> <i class=\\\"file alternate icon\\\"></i> <code>styles.css</code>: Global stylesheet<br/>\\n      <strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#8990; </strong> <i class=\\\"file alternate icon\\\"></i> <code>test.ts</code>: Entry point for unit tests<br/>\\n      <strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#8990; </strong> <i class=\\\"file alternate icon\\\"></i> <code>tsconfig.app.json</code>: Application-specific TypeScript configuration<br/>\\n      <strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#8990; </strong> <i class=\\\"file alternate icon\\\"></i> <code>tsconfig.spec.json</code>: Test-specific TypeScript configuration<br/>\\n      <strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#8990; </strong> <i class=\\\"file alternate icon\\\"></i> <code>tslint.json</code>: Application-specific TSLint configuration<br/>\\n    <strong>&#8990; </strong> <i class=\\\"file alternate outline icon\\\"></i> <code>.editorconfig</code>: Code editor configuration (consisten coding styles)<br/>\\n    <strong>&#8990; </strong> <i class=\\\"file alternate outline icon\\\"></i> <code>.gitignore</code>: Files and folders which are not tracked by Git<br/>\\n    <strong>&#8990; </strong> <i class=\\\"file alternate icon\\\"></i> <code>angular.json</code>: Angular CLI configuration<br/>\\n    <strong>&#8990; </strong> <i class=\\\"file alternate icon\\\"></i> <code>package-lock.json</code>: Version information about installed packages<br/>\\n    <strong>&#8990; </strong> <i class=\\\"file alternate icon\\\"></i> <code>package.json</code>: npm package dependency configuration<br/>\\n    <strong>&#8990; </strong> <i class=\\\"file alternate icon\\\"></i> <code>README.md</code>: Help documentation<br/>\\n    <strong>&#8990; </strong> <i class=\\\"file alternate icon\\\"></i> <code>tsconfig.json</code>: TypeScript compiler configuration<br/>\\n    <strong>&#8990; </strong> <i class=\\\"file alternate icon\\\"></i> <code>tslint.json</code>: TSLint configuration (static code analysis)<br/>\\n</p>\\n</div>\\n<div *ngIf=\\\"theoryLarge\\\" class=\\\"ui message\\\" style=\\\"margin-top: 20px;\\\">\\n  <h4>Angular Modules</h4>\\n  <p>Angular modules help structuring the application in functional blocks.\\n  Each application has at least one root module, called <code>AppModule</code>.\\n  Technically modules are classes like all other\\n  Angular blocks.\\n  The <code>@NgModule()</code> decorator marks the class as module.</p>\\n  \\n  <p>\\n  Decorators define metadata which Angular uses\\n  at runtime to initialise the application and to expand the functionality of the class. The most important properties from NgModule are as follows:</p>\\n\\n  <ul>\\n    <li><strong>declarations</strong>: All components, directives and pipes that belong to this module</li>\\n    <li><strong>exports</strong>: Specifies all components, directives and pipes which should be available for other Angular modules</li>\\n    <li><strong>imports</strong>: Contains all modules on which this module depends</li>\\n    <li><strong>providers</strong>: Creators of services, which should be globally accessible in all parts of the app</li>\\n    <li><strong>bootstrap</strong>: The main appliction view, called <code>root component</code>, which houses all other views</li>\\n  </ul>\\n\\n  <p>The main component is the starting point of the application. As you will learn in the chapter <a routerLink=\\\"/components\\\">Components</a> this is the <code>AppComponent</code>.</p>\\n \\n  <p>You can use different module types such as the main module, routing-module and service-module.\\n  A routing-module contains configuration for the router.\\n  You will learn about the <code>router</code> in the chapter <a routerLink=\\\"/router\\\">Router</a>.\\n  A service-module provides utilities like data access and messaging for the entire application as you will learn in the chapter <a routerLink=\\\"/service\\\">Service</a>.\\n  </p>\\n</div>\\n\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\">\\n\\n  <h4>Make some changes</h4>\\n  <p>Open <b>app.component.ts</b> and change the title of the app.</p>\\n\\n  <div class=\\\"code_listing\\\">\\n    <pre><code #code3>export class AppComponent &#123;\\n    title = 'Where To Go';\\n&#125;</code></pre>\\n    <div><i class=\\\"copy outline link icon\\\" (click)=\\\"copy(code3.textContent)\\\"></i></div>\\n  </div>\\n\\n\\n  <p>In the <b>app.component.html</b> is a binding to <code>title</code>. This binding brings the new title into the application.\\n  </p>\\n  <span>{{ title }} app is running!</span>\\n  <div class=\\\"code_listing\\\">\\n    <pre class=\\\"language-html\\\"><code #code4>&lt;span&gt;<span>{{</span> title <span>}}</span> app is running!&lt;&#47;span&gt;</code></pre>\\n    <div><i class=\\\"copy outline link icon\\\" (click)=\\\"copy(code4.textContent)\\\"></i></div>\\n  </div>\\n\\n\\n  <img class=\\\"ui image medium centered border\\\" src=\\\"assets/img/Angular-Changed-Title.png\\\">\\n</div>\\n\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\">\\n  <h4>Import UI-Framework</h4>\\n  <p>As this is a web application showing you, how to build an Angular app, there is no need to do manual CSS styling.\\n  Probably you already know how to style with CSS and the sole focus here should be Angular. That's why we are going to use the\\n    <a href=\\\"https://semantic-ui.com/\\\" target=\\\"_blank\\\">Semantic UI</a> CSS-Framework for a nice look and feel out-of-the-box.</p>\\n\\n  <p>You can install the UI-Framework with the command:</p>\\n\\n  <div class=\\\"code_listing\\\">\\n      <pre class=\\\"command-line language-bash\\\" data-user=\\\"user\\\" data-host=\\\"localhost\\\"><code #code5>npm i semantic-ui-css</code></pre>\\n      <div><i class=\\\"copy outline link icon\\\" (click)=\\\"copy(code5.textContent)\\\"></i></div>\\n      <a href=\\\"https://docs.npmjs.com/cli/install\\\" target=\\\"_blank\\\"><i class=\\\"large info circle link icon\\\"></i></a>\\n  </div>\\n\\n  <p class=\\\"ui info message\\\">Tip: Its possible to open up another terminal and to have multiple running command shells to avoid powering off and on again the Angular web application.</p>\\n\\n  <p>Add it to the <b>angular.json</b> file:</p>\\n\\n  <div class=\\\"code_listing\\\">\\n    <pre class=\\\"language-json\\\"><code #code6>\\\"styles\\\": [\\n    \\\"node_modules/semantic-ui-css/semantic.css\\\",\\n    \\\"src/styles.css\\\"\\n]</code></pre>\\n    <div><i class=\\\"copy outline link icon\\\" (click)=\\\"copy(code6.textContent)\\\"></i></div>\\n  </div>\\n\\n  <p>CSS and JS framework files with <strong>min</strong> in the file name are, as usual, minified and compressed versions for production use, in contrary to the normal files for development and debugging purposes.</p>\\n  <p>Configuration changes in the <strong>angular.json</strong> file are not hot reloaded! Therefore in order for the CSS to take effect, you have to hold (<code>Ctrl + C</code>) and restart your app with <code>ng serve</code>.</p>\\n\\n  <p>Now you can test the new style. Adjust the <b>app.component.html</b> like this and see if it looks different:</p>\\n\\n  <div class=\\\"code_listing\\\">\\n    <pre class=\\\"language-html\\\"><code #code7>&lt;div style=\\\"text-align:center\\\"&gt;\\n  &lt;h1 class=\\\"ui header\\\"&gt;\\n    Welcome to <span>{{</span> title <span>}}</span>!\\n  &lt;&#47;h1&gt;\\n&lt;&#47;div&gt;</code></pre>\\n    <div><i class=\\\"copy outline link icon\\\" (click)=\\\"copy(code7.textContent)\\\"></i></div>\\n  </div>\\n\\n  <p class=\\\"ui info message\\\">If you have any problems with installing the Semantic UI CSS, you can download the plain files from their website (under <a href=\\\"https://semantic-ui.com/introduction/getting-started.html\\\" target=\\\"_blank\\\">Getting Started</a><em> &gt;Simpler Setup</em>) and paste the CSS it into your project folder.</p>\\n\\n  <p class=\\\"ui red message\\\">Be aware that most UI frameworks additionally include a JavaScript file for complex widgets.\\n  These can be included too in <strong>angular.json</strong> under <code>\\\"scripts\\\": []</code>.\\n  Against this approach speaks however, that it goes against the nature of Angular as Angular should be solely responsible for rendering and manipulation of the DOM.\\n  Interferences triggered by the included framework are possible and may end up in some unwanted results. <br>\\n  Furthermore it may be the case that classical JavaScript frameworks tag the DOM once, to enable their functions.\\n  This normally happens after the content loaded event was fired. \\n  But this event is only emitted once in the life time of a Single-Page-Application (after the almost empty index.html was downloaded and parsed) as reloads do normally not occur.\\n  Instead the DOM is dynamically build and changed by Angular.</p>\\n</div>\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\">\\n\\n  <h4>Visualization of the Construction:</h4>\\n  <p><img class=\\\"ui image large centered\\\" src=\\\"assets/img/App-Building-1.png\\\"></p>\\n  <div class=\\\"ui success message\\\">\\n    <h4>Summary</h4>\\n    <ul>\\n      <li>You generated the initial app skeleton with the Angular CLI.</li>\\n      <li>You changed the title and displayed it via data-binding (curly braces).</li>\\n      <li>You imported an ui framework.</li>\\n      <li>You learned about the app structure and modules.</li>\\n    </ul>\\n  </div>\\n\\n  <iframe style=\\\"margin-top:20px; margin-bottom:20px; width:100%; height: 500px\\\"\\n    src=\\\"https://stackblitz.com/edit/wheretogo-step-1?embed=1&file=src/app/app.component.html&hideNavigation=1\\\"></iframe>\\n  <h3 id=\\\"toc_further_references\\\">Further references</h3>\\n  <div class=\\\"ui warning message\\\">\\n    <p>Official documentation:</p>\\n    <ul>\\n      <li>Angular: <a href=\\\"https://angular.io/guide/file-structure\\\" target=\\\"_blank\\\">Workspace and project file structure</a></li>\\n      <li>Angular: <a href=\\\"https://angular.io/guide/architecture\\\" target=\\\"_blank\\\">Architecture overview</a></li>\\n      <li>Angular: <a href=\\\"https://angular.io/guide/architecture-modules\\\" target=\\\"_blank\\\">Introduction to modules</a></li>\\n      <li>Angular: <a href=\\\"https://angular.io/guide/ngmodules\\\" target=\\\"_blank\\\">NgModules</a></li>\\n      <li>Angular: <a href=\\\"https://angular.io/guide/workspace-config\\\" target=\\\"_blank\\\">Workspace Configuration</a>(angular.json)</li>\\n      <li>npm: <a href=\\\"https://docs.npmjs.com/files/package-lock.json\\\" target=\\\"_blank\\\">package-lock.json</a> and <a href=\\\"https://docs.npmjs.com/files/package.json\\\" target=\\\"_blank\\\">package.json</a></li>\\n      <li>Angular: <a href=\\\"https://docs.npmjs.com/files/package-lock.json\\\" target=\\\"_blank\\\">Workspace npm dependencies</a></li>\\n      <li>Wikipedia: <a href=\\\"https://en.wikipedia.org/wiki/Polyfill_(programming)\\\" target=\\\"_blank\\\">Polyfill</a></li>\\n    </ul>\\n    <p>Design frameworks tailored for Angular:</p>\\n      <ul>\\n        <li><a href=\\\"https://material.angular.io/\\\" target=\\\"_blank\\\">Angular Material</a>: Material design components for Angular</li>\\n        <li><a href=\\\"https://ng-bootstrap.github.io/#/home\\\" target=\\\"_blank\\\">Bootstrap widgets</a>: The angular way</li>\\n      </ul>\\n  </div>\\n\\n</div>\\n</div>\\n\\n<div class=\\\"ui center aligned segment\\\" style=\\\"width: 50%; margin-left: auto; margin-right: auto\\\">\\n    <h4>Your Progress:</h4>\\n    <mat-progress-bar style=\\\"margin-bottom:20px;\\\" mode=\\\"determinate\\\" value=\\\"10\\\"></mat-progress-bar>\\n</div>\"","export default \"<h2>Components, FormModules and Directives</h2>\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\" class=\\\"ui info message\\\">\\n    <h5>User Story</h5>\\n    <p>As a <b>user</b><br />\\n        I want to <b>display all lectures in a timetable and click to select one</b>, <br />\\n        to <b> look through all of them and change the selected one</b>.</p>\\n</div>\\n<div *ngIf=\\\"praxis\\\">\\n    <h4>Mock Data</h4>\\n    <p>Later we will have more than one lecture and therefore we will need a list to display all of them. </p>\\n    <pre class=\\\"command-line language-bash\\\"><code>ng g component timetable</code></pre>\\n    <p>Because we don't get our data from a server we will create some mock-data and pretend that they are from a\\n        server.</p>\\n    <pre class=\\\"command-line language-bash\\\"><code>ng g class shared/mock-lectures</code></pre>\\n    <p>Remove the class in this file and define the constant LECTURES as an array of lectures and export it. The content is the same\\n        as in the property lecture from the lecture-item.component.ts, so you can copy the first lecture from there and\\n        paste\\n        it a few times for different lectures. The id must always be different!</p>\\n    <div class=\\\"ui info message\\\">\\n        <p>Later we will have drop-downs for day, time and building. To avoid problems, please make sure that: <br>\\n            Your day looks like that: Monday, Tuesday, Wednesday, Thursday, Friday.<br>\\n            Your hours are between 08 and 19 and always consists of two numbers.<br>\\n            Your minutes are 00, 15, 30 or 45.<br>\\n            Your building is KR1, WE5, F21 or M3.\\n        </p>\\n    </div>\\n\\n    <pre class=\\\"language-ts\\\"><code>export const LECTURES: Lecture[] = [\\n  &#123;\\n    id: 1,\\n    name: 'Webtechnologien',\\n    room: '075',\\n    day: 'Monday',\\n    time: &#123;hours: 10, minutes: 15&#125;,\\n    building: 'WE5',\\n    floor: '02',\\n    department: 'Lehrstuhl für Medieninformatik'\\n  &#125;,\\n  &#123;\\n    id: 2,\\n    // ... and so on\\n  &#125;\\n]</code></pre>\\n\\n    <p>After that, you can delete the property lecture from the <b>lecture-item.component.ts</b> and initialise the\\n        constant in the <b>timetable.component.ts</b>, because we need the data in the list now.</p>\\n\\n    <pre class=\\\"language-ts\\\"><code>lectures = LECTURES;</code></pre>\\n    <p>Of course we also need to import the constant <code>LECTURES</code> now.</p>\\n    <pre class=\\\"language-ts\\\"><code>import &#123; LECTURES &#125; from \\\"../shared/mock-lectures\\\";</code></pre>\\n\\n    <h4>Display a List</h4>\\n    <p>\\n        We generated our shell for the lecture items. The timetable is going to be a list with all the lectures we\\n        have.\\n    </p>\\n    <p>First we have to write the code for a single lecture item and replace the code in\\n        <b>lecture-item.component.html</b>: </p>\\n\\n    <pre class=\\\"language-html\\\"><code>&lt;div class=\\\"content\\\"&gt;\\n    &lt;div class=\\\"header\\\"&gt;What? <span>{{</span>lecture.name | uppercase<span>}}</span>&lt;&#47;div&gt;\\n    &lt;div class=\\\"description\\\"&gt;Where? <span>{{</span>lecture.building<span>}}</span>&#47;\\n        <span>{{</span>lecture.floor<span>}}</span>.<span>{{</span>lecture.room<span>}}</span>&lt;&#47;div&gt;\\n    &lt;div class=\\\"description\\\"&gt;When? <span>{{</span>lecture.day<span>}}</span>, \\n        <span>{{</span>lecture.time.hours<span>}}</span>:<span>{{</span>lecture.time.minutes<span>}}</span>&lt;&#47;div&gt;\\n    &lt;div *ngIf=\\\"lecture.department\\\" class=\\\"description\\\"&gt;Department: \\n        <span>{{</span>lecture.department<span>}}</span>&lt;&#47;div&gt;\\n&lt;&#47;div&gt;</code></pre>\\n\\n    <p>Next change the selector in the <b>lecture-item.component.ts</b>:</p>\\n    <pre class=\\\"language-ts\\\"><code>selector: 'a.app-lecture-item',</code></pre>\\n    <p>And insert this right above the empty constructor:</p>\\n\\n    <pre class=\\\"language-ts\\\"><code>@Input() lecture: Lecture;</code></pre>\\n\\n    <p>For that, we need to import the class <code>Input</code>.</p>\\n    <pre class=\\\"language-ts\\\"><code>import &#123; Input &#125; from \\\"@angular/core\\\";</code></pre>\\n</div>\\n<div *ngIf=\\\"theoryLarge\\\" style=\\\"margin-top: 20px;\\\" class=\\\"ui message\\\">\\n    <h4>Input-Property</h4>\\n    <p>\\n        You can transfer data, especially between parent- and children-components via\\n        <code>@Input()</code>-property. The\\n        decorator marks the class field as an input property and provides configuration metadata. This declares a\\n        data-bound input property, which is automatically updated during change detection.\\n    </p>\\n</div>\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\">\\n    <p>We display this component in the <b>app.component.html</b> and replace the lecture-item with this code:</p>\\n    <pre class=\\\"language-html\\\"><code>&lt;app-timetable&gt;&lt;/app-timetable&gt;</code></pre>\\n    <p>In the <b>timetable.component.html</b> we display the list of lecture-items now with a header beyond and a\\n        for-loop, because every item should be displayed the same way:</p>\\n\\n<pre class=\\\"line-numbers language-html\\\"><code>&lt;div style=\\\"margin-top: 15px\\\"&gt;&lt;&#47;div&gt;\\n    &lt;h2 class=\\\"ui header\\\"&gt;Timetable:&lt;&#47;h2&gt;\\n    &lt;div style=\\\"padding: 15px;\\\"&gt;\\n        &lt;div class=\\\"ui middle aligned divided list\\\"&gt;\\n            &lt;div *ngFor=\\\"let l of lectures\\\" class=\\\"item\\\"&gt;\\n                &lt;a class=\\\"app-lecture-item item\\\" [lecture]=\\\"l\\\" \\n                style=\\\"margin: 10px; padding:10px\\\"&gt;&lt;&#47;a&gt;\\n        &lt;&#47;div&gt;\\n    &lt;&#47;div&gt;\\n&lt;&#47;div&gt; \\n</code></pre>\\n\\n    <p>With the construct <code>[lecture]=\\\"l\\\"</code> we make sure that <code\\n           >l</code> is the lecture\\n        we imported via input-binding\\n        before.</p>\\n    <p class=\\\"ui info message\\\">\\n        Property-Binding: Sets properties of the DOM-Tree. Syntax:<br />\\n        <code>[ ] = \\\" \\\"</code>\\n    </p>\\n</div>\\n<div *ngIf=\\\"theorySmall\\\" style=\\\"margin-top: 20px;\\\" class=\\\"ui message\\\">\\n    <h4>Directives</h4>\\n    <p>Constructs like <code>*ngFor</code> are called \\\"Directives\\\". With this you can\\n        make loops in the HTML similar to\\n        loops in the logic code (TypeScript, Java,...), as you may know. </p>\\n    <p>Every time I iterate over my list of items (if you also read the code examples, it's a list of lectures) I take\\n        one single item out of all items, for which is displayed what I defined for it as HTML code before. With the\\n        attribute <code>[lecture]</code> I assign the respective lecture object. And\\n        with\\n        this for-loop I repeat this for all the items (lectures) I have.</p>\\n    <p>Another directive we already used before is <code>*ngIf</code>. For those who\\n        read the code: because we made\\n        department an optional property, someone may not set a value for this property. So we want to ask if this\\n        property has a value and just display\\n        the corresponding <code>div</code> if it has one.</p>\\n    <p>This is also called templating-microsyntax, because the way we iterate over an array isn't just a simple\\n        templating expression, it is a very small own language which generates DOM-elements. For every element in the\\n        array it creates a new instance of something. In this case\\n        <code>&lt;a class=\\\"app-lecture-item item\\\" ...&gt;&lt;/a&gt;</code>.</p>\\n    <p class=\\\"ui info message\\\">\\n        Structure directives: Directives to manipulate the DOM-Tree.\\n        Syntax:<br>\\n    <code class=\\\"language-ts\\\">*ngFor=\\\"let lecture of lectures\\\"</code><br><code class=\\\"language-ts\\\">\\n*ngIf=\\\"lecture.department\\\"</code></p>\\n    \\n</div>\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\">\\n    <h4>Visualization of the Construction:</h4>\\n    <p><img class=\\\"ui image large centered\\\" src=\\\"assets/img/App-Building-4.png\\\"></p>\\n\\n    <h4>Details View</h4>\\n    <p>Later we want to be able to make changes within a lecture item so we want to select one lecture and get its\\n        details\\n        view via click. First we need a variable for the selected lecture in the <b>timetable.component.ts</b>\\n        and second we need a function, we call it <code>onSelect()</code>, which assigns\\n        the clicked lecture from the\\n        template to the <code>selectedLecture</code> of the component.</p>\\n\\n    <pre class=\\\"language-ts\\\"><code>selectedLecture: Lecture;\\n\\nonSelect(lecture: Lecture): void &#123;\\n    this.selectedLecture = lecture;\\n&#125;</code></pre>\\n\\n    <p>Of course we also need to import the class <code>Lecture</code>.</p>\\n    <pre class=\\\"language-ts\\\"><code>import &#123; Lecture &#125; from \\\"../shared/lecture\\\";</code></pre>\\n\\n    <p>We add a click-event-binding to the <b>timetable.component.html</b>:</p>\\n\\n    <pre class=\\\"language-html\\\"><code>&lt;a class=\\\"app-lecture-item item\\\" [lecture]=\\\"l\\\" (click)=\\\"onSelect(l)\\\" style=\\\"margin: 10px; padding: 10px\\\"&gt;&lt;&#47;a&gt;</code></pre>\\n\\n    <p class=\\\"ui info message\\\">Event-Binding: Interrogate results and treat them. Syntax: <br />\\n        <code>() = \\\" \\\"</code>\\n    </p>\\n    <p>We want to display the clicked lecture beneath the list of all lectures. therefore we need to add some code for\\n        the selected lecture, but only if there is a lecture selected. To make this sure, we have the <code\\n           >*ngIf</code>\\n        directive.</p>\\n    <p>In the <b>timetable.component.html</b> we need to insert the following code snippet beneath the existing code:\\n    </p>\\n\\n<pre class=\\\"language-html line-numbers\\\"><code>&lt;div style=\\\"padding: 15px;\\\"&gt;\\n    &lt;div class=\\\"ui middle aligned divided list\\\"&gt;\\n        &lt;div *ngIf=\\\"selectedLecture\\\" style=\\\"padding: 50px;\\\"&gt;\\n            &lt;h4&gt; <span>{{</span>selectedLecture.name<span>}}</span> Details &lt;&#47;h4&gt;\\n            &lt;div class=\\\"description\\\"&gt;Where? <span>{{</span>selectedLecture.building<span>}}</span>&#47;<span>{{</span>selectedLecture.floor<span>}}</span>.<span>{{</span>selectedLecture.room<span>}}</span> &lt;&#47;div&gt;\\n            &lt;div class=\\\"description\\\"&gt;When? <span>{{</span>selectedLecture.day<span>}}</span>,<span>{{</span>selectedLecture.time.hours<span>}}</span>:<span>{{</span>selectedLecture.time.minutes<span>}}</span> &lt;&#47;div&gt;\\n            &lt;div *ngIf=\\\"selectedLecture.department\\\" class=\\\"description\\\"&gt;Department: <span>{{</span>selectedLecture.department<span>}}</span> &lt;&#47;div&gt;\\n        &lt;&#47;div&gt;\\n    &lt;&#47;div&gt;\\n&lt;&#47;div&gt;</code></pre>\\n    \\n    <p>Now we asked, is there a <code>selectedLecture</code>? If there is, display the\\n        <code>selectedLecture.name, selectedLecture.building</code>\\n        and all the other information.</p>\\n</div>\\n\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\">\\n    <h4>Make it an Input Form</h4>\\n    <p>If we want to make changes in the details of a lecture, we will need two-way-binding and input fields.\\n    </p>\\n    <p class=\\\"ui info message\\\">Two-Way-Binding: Can read in properties and process results. Syntax: <br />\\n        <code>[()] = \\\" \\\"</code>\\n    </p>\\n    <p>First we need to import the FormsModule in <b>app.module.ts</b>:</p>\\n\\n    <pre class=\\\"language-ts\\\"><code>import &#123; FormsModule &#125; from \\\"@angular/forms\\\";</code></pre>\\n\\n    <pre class=\\\"language-ts\\\"><code>imports: [\\n    // Beside other entries, add:\\n    FormsModule\\n],</code></pre>\\n\\n    <p>Afterwards we can make the changes in <b>timetable.component.html</b> with <code\\n           >[(ngModel)]</code>, the\\n        bidirectional data-binding of Angular. It binds the selectedLecture.name property to the HTML input field so\\n        that\\n        data can flow in both directions: from the selectedLecture.name property to the input field and from the input\\n        field\\n        back to the selectedLecture.name.</p>\\n    <p>This is going to be a lot of code, because the input form should already look good and provide drop-downs for an\\n        easier input. For one item the code will look like this:</p>\\n\\n<pre class=\\\"language-html line-numbers\\\"><code>&lt;div class=\\\"field\\\"&gt;\\n    &lt;label&gt;Name of the Lecture*:&lt;&#47;label&gt;\\n    &lt;div class=\\\"field\\\"&gt;\\n        &lt;input [(ngModel)]=\\\"selectedLecture.name\\\" placeholder=\\\"Name\\\" &#47;&gt;\\n    &lt;&#47;div&gt;\\n&lt;&#47;div&gt;</code></pre>\\n\\n    <p>Replace the old code for the details with this code for every input and finally the app looks like in the code\\n        editor at the end of this page.</p>\\n</div>\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\">\\n    <h4>Visualization of the Construction:</h4>\\n    <p><img class=\\\"ui image large centered\\\" src=\\\"assets/img/App-Building-5.png\\\"></p>\\n    <div class=\\\"ui success message\\\">\\n        <h4>Summary</h4>\\n        <ul>\\n            <li>You learned about directives.</li>\\n            <li>You used <code>*ngIf</code> to show or hide the department.</li>\\n            <li>You binded the lecture via <code>@Input()</code> binding and set the\\n                property via property binding.</li>\\n            <li>You applied the <code>*ngFor</code> directive to display a list of\\n                lectures.</li>\\n            <li>You prepared a details view for lectures and displayed it with a click event.</li>\\n            <li>You imported the <code>FormsModule</code> in the <code\\n                   >AppModule</code>.</li>\\n            <li>You made the details view editable because you applied the <code\\n                   >NgModel</code> directive and made it an input form.</li>\\n        </ul>\\n    </div>\\n    <iframe style=\\\"margin-top:20px; margin-bottom:20px; width:100%; height: 500px\\\"\\n        src=\\\"https://stackblitz.com/edit/wheretogo-step-3?embed=1&file=src/app/timetable/timetable.component.html&hideNavigation=1\\\"></iframe>\\n\\n<h3 id=\\\"toc_further_references\\\">Further references</h3>\\n<div class=\\\"ui warning message\\\">\\n    <p>Official documentation:</p>\\n    <ul>\\n    <li>Angular: <a href=\\\"https://angular.io/guide/forms-overview\\\" target=\\\"_blank\\\">Introduction to forms</a></li>\\n    <li>Angular: <a href=\\\"https://angular.io/guide/template-syntax\\\" target=\\\"_blank\\\">Template syntax</a></li>\\n    <li>Angular: <a href=\\\"https://angular.io/guide/attribute-directives\\\" target=\\\"_blank\\\">Attribute directives</a></li>\\n    <li>Angular: <a href=\\\"https://angular.io/guide/structural-directives\\\" target=\\\"_blank\\\">Structural directives</a></li>\\n    <li>Angular: <a href=\\\"https://angular.io/guide/component-interaction\\\" target=\\\"_blank\\\">Component Interaction</a></li>\\n    </ul>\\n    <p>Advanced concepts:</p>\\n    <ul>\\n        <li>MDN: <a href=\\\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms\\\" target=\\\"_blank\\\">HTML forms</a></li>\\n    </ul>\\n</div>\\n\\n    <div class=\\\"ui center aligned segment\\\" style=\\\"width: 50%; margin: 0 auto\\\">\\n        <h4>Your Progress:</h4>\\n        <mat-progress-bar style=\\\"margin-bottom:20px;\\\" mode=\\\"determinate\\\" value=\\\"35\\\"></mat-progress-bar>\\n    </div>\\n</div>\"","export default \"<h2>Components</h2>\\n<div class=\\\"language-ts\\\">\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\" class=\\\"ui info message\\\">\\n  <h5>User Story</h5>\\n  <p>As a <strong>user</strong><br />\\n    I want to <strong>display a lecture</strong>, <br />\\n    to <strong> see its details</strong>.</p>\\n</div>\\n<div *ngIf=\\\"theoryLarge\\\" class=\\\"ui message\\\">\\n  <h4>What are Components?</h4>\\n  <p>A component controls a specific part of the screen. In the HTML file you define the structure of a component, the CSS styles this component, together it's the view of the component. The TypeScript file contains the logic part of the component and interacts with the view.<br>\\n  An Angular application is basically a tree structure of components. It has a root, that is the <code class=\\\"language-ts\\\">AppComponent</code> and also the entry point of the application.\\n  However, there is no difference to the other components in concept or syntax. Only difference is that the Angular framework knows that this component is the entry point of the application. If you have the root component or an other component you can put multiple other components inside it and you can interlace components deeper into each other. This is the most important architectural concept of Angular.</p>\\n  <p>Components consist of three parts:\\n  A class with the <code class=\\\"language-ts\\\">@Component</code> decorator which marks it as a component, the HTML template and the optional CSS styles.\\n  With the template of a component you tell Angular how to render that view at runtime. In addition you can define the user interaction logic in the TypeScript file. The template is written in an extended HTML language (almost all HTML elements are allowed), which includes additional syntax elements like data-binding to dynamically exchange (set and get) data between DOM and the component class.</p>\\n  <p><img class=\\\"ui image big centered\\\" src=\\\"assets/img/Components-1.png\\\"></p>\\n</div>\\n\\n<div *ngIf=\\\"praxis\\\">\\n  <h3>Generate new Component</h3>\\n  <p>Open your command line and generate (short form <code>g</code>) your \\\"where-to-go\\\" component. It is going to be the page you see\\n    first when you start the app.</p>\\n  <pre class=\\\"language-bash command-line\\\" data-user=\\\"user\\\" data-host=\\\"localhost\\\"><code>ng g component where-to-go</code></pre>\\n</div>\\n<div *ngIf=\\\"theorySmall\\\" class=\\\"ui message\\\">\\n  <p>Result:</p>\\n  <p><img class=\\\"ui image centered\\\" style=\\\"height: 65px\\\" src=\\\"assets/img/Create-Three-Files.png\\\"></p>\\n  <p>When you add a new component the <strong>app.module.ts</strong> automatically declares your new component.\\n  The CLI creates three (or four) files in one subfolder for you.\\n  It is the skeleton for your component:<br></p>\\n  <ul>\\n    <li><code>.html</code>: Nearly empty and ready for your markup</li>\\n    <li><code>.spec.ts</code>: Defines unit tests for the component (for now we ignore this file)</li>\\n    <li><code>.ts</code>: Ready for your code, already contains necessary skeleton</li>\\n    <li>Optional: <code>.css</code> or <code>.styl</code> or <code>.less</code> or <code>.scss</code>: Empty styles file explicitly and exclusively for this component (depending on stylesheet format)</li>\\n  </ul>\\n  <p>\\n  The HTML file is nearly empty and ready for your code.\\n  You can ignore the spec.ts file, it defines a unit test for the component.\\n  The .ts file is for your TypeScript code and defines the components logic.\\n  </p>\\n</div>\\n<div *ngIf=\\\"theoryLarge\\\" class=\\\"ui message\\\">\\n  <p><img class=\\\"ui image medium centered\\\" src=\\\"assets/img/Skeleton-Component.png\\\"></p>\\n  <p>Each component skeleton .ts file includes a <code>@Component</code> decorator which identifies the class as component and specifies its metadata. The CLI generates three configuration options:</p>\\n  <ul>\\n    <li><code>selector</code>: CSS element selector of the component </li>\\n    <li><code>templateUrl</code> or <code>template</code>: Location of the component's HTML file or inline template</li>\\n    <li><code>stylesUrl</code> or <code>styles</code>: Location of the private CSS stylesheet or inline styles\\n    </li>\\n  </ul>\\n  <p>The <code>selector</code>, here \\\"app-where-to-go\\\", also defines the name of a custom HTML element, which tells Angular to insert an instance of this component between the opening and closing tag. \\n  Most of the time this element is inserted into the template of the parent component.</p>\\n  <p><code>ngOnInit</code> is one of the provided component lifecycle hook methods. \\n  Angular calls this function once after creating the component with the <code>constructor</code>. Therefore it is the right function to place additional initialisation logic.</p>\\n  <p>The component's class always needs to be exported, to reuse it in other files, e.g. in the <code>AppModule</code>.</p>\\n</div>\\n<div *ngIf=\\\"theoryLarge\\\" class=\\\"ui message\\\">\\n  <h4>Lifecycle of a Component</h4>\\n  <p>Every component has a lifecycle that is controlled by Angular. \\n  Angular creates a component instance, renders its view, monitors for changes in its data-bound properties and, in the end, destroys it.\\n  The Angular framework provides lifecycle hooks for each of these key events and enables the programer to act upon these occurrence. All methods are not just plain functions, instead Angular has its own interface for each.</p>\\n  <p><img class=\\\"ui image large centered\\\" src=\\\"assets/img/Lifecycle.png\\\"></p>\\n  <ul>\\n    <li><code>constructor()</code>:<br>\\n    Normal JavaScript class constructor, but important when considering the lifecycle of a component since it is responsible for the instantiation of the component. \\n    Don't put much logic into the constructor because when the constructor is called, neither input- and output-data-bindings  nor the child components are available.</li>\\n\\n    <li><code>ngOnChanges()</code>:<br>\\n    Called once before <code>ngOnInit()</code> and afterwards every time an\\n    input-binding changes.</li>\\n\\n    <li><code>ngOnInit()</code>:<br>\\n    Called once after the first <code>ngOnChanges()</code>, after all input-data-bindings are initialised.\\n    It offers the possibility to run additional initialisation logic you have, for example to request the data from the backend.</li>\\n\\n    <li><code>ngDoCheck()</code>:<br>\\n    Called once after first <code>ngOnInit()</code> and afterwards every change detection.\\n    To find and react on changes, which Angular does not detect on its own.</li>\\n\\n    <li><code>ngAfterContentInit()</code>:<br>\\n    Called once after the first <code>ngDoCheck()</code>.\\n    With it you can react to the initialisation of child components.</li>\\n\\n    <li><code>ngAfterContentChecked()</code>:<br>\\n    Called once after <code>ngAfterContentInit()</code> and afterwards every <code>ngDoCheck</code>.\\n    Invoked after the change detector checked all properties.</li>\\n\\n    <li><code>ngAfterViewInit()</code>:<br>\\n    Called once after the first <code>ngAfterContentChecked()</code>.\\n    The view of the child-components is accessable</li>\\n\\n    <li><code>ngAfterViewChecked()</code>:<br>\\n    Called once after <code>ngAfterViewInit</code> and afterwards every <code>ngAfterConctentChecked</code>.\\n    Invoked after the change detector checked the component's view if the view needs to be redrawn.\\n\\n    <li><code>ngOnDestroy()</code>:<br>\\n    Called once right before Angular destroys the componenent.\\n    Cleanup tasks, which might be necessary if a component subscribed to data streams and to detach event handlers (Avoid memory leaks).</li>\\n  </ul>\\n</div>\\n<div *ngIf=\\\"praxis\\\">\\n  <h3>(Re)use a Component</h3>\\n  <p>We can now use the <code>selector</code></p>\\n  <pre class=\\\"language-html\\\"><code>&lt;app-where-to-go&gt;&lt;&#47;app-where-to-go&gt;</code></pre>\\n\\n  <p>and insert it into any component template (remember the component tree structure and avoid circular interdependencies!), in our case into the <strong>app.component.html</strong>.\\n  Now the app shows the component at this location, just like it would do with every other HTML tag.</p>\\n</div>\\n\\n<div *ngIf=\\\"theoryLarge\\\" class=\\\"ui message\\\">\\n  <h4>Communication between Logic and View</h4>\\n  <p>As we already learned every component consists of at least two parts: logic (&lt;<em>component</em>&gt;.ts) and view (&lt;<em>component</em>&gt;.html).\\n  To ensure the information flow between these two we can use different types of bindings:</p>\\n  <ol>\\n    <li><strong>Property Binding</strong>:<br />\\n    One-way data flow from source to view<br>\\n    Set property of a target element based on an expression (most common is a component property).\\n    You assign them with square brackets.<br />\\n    <code class=\\\"language-html\\\">&lt;element [property]=\\\"expression\\\"&gt;...&lt;/element&gt;</code>\\n    </li>\\n    <li><strong>Interpolation</strong>:<br />\\n    One-way data flow from source to view<br>\\n    Embeds an expression (to display component properties or calculated values) as string into the text between HTML tags.<br />\\n    <code class=\\\"language-html\\\">&lt;div&gt;<span>{{</span> expression <span>}}</span>&lt;/div&gt;</code>\\n    </li>\\n    <li><strong>Event Binding</strong>:<br />\\n    One-way data flow from view to source<br>\\n    This is kind of the opposite of a property binding.\\n    It is possible to react to the occurrence of DOM events, e.g. in order to change the application model by calling a function.<br />\\n    <code class=\\\"language-html\\\">&lt;element (event)=\\\"statement\\\"&gt;...&lt;/element&gt;</code>\\n\\n    </li>\\n    <li><strong>Two-Way Binding</strong>:<br />\\n    Use this if you want to share data between a component class and its template. Specifies an element property and listens for all element change events.<br />\\n    <code class=\\\"language-html\\\">&lt;element [(elementProperty)]=\\\"componentProperty\\\"&gt;...&lt;/element&gt;</code><br />\\n    It is a combination of property and an event binding. You could write the expanded form too:<br />\\n      <code class=\\\"language-html\\\"\\n       >&lt;input [elementProperty]=\\\"componentProperty\\\" (elementPropertyChange)=\\\"componentProperty$event\\\"&gt;...&lt;/input&gt;</code><br>\\n    For <code>input</code> elements in Forms there is even the shortcut to synchronize the user's input with a data property:\\n    <code class=\\\"language-html\\\">&lt;input [(ngModel)]=\\\"componentProperty\\\"&gt;...&lt;/input&gt;</code>\\n    </li>\\n    <li><strong>Local Template reference variables</strong>:<br />\\n    You can create a local variable (within a template) to reference a DOM element.\\n    With this you have now a named pointer to the element and can access all the nodes attributes, e.g. <code>element.textContent</code>.<br />\\n      <code class=\\\"language-html\\\">&lt;element #reference_name &gt;...&lt;/element&gt;\\n        </code> or<br/>\\n      <code class=\\\"language-html\\\">&lt;element ref-reference_name&gt;...&lt;/element&gt;\\n          </code>\\n    </li>\\n  </ol>\\n  <br /><a href=\\\"https://stackblitz.com/edit/practice-part?embed=1&file=src/app/app.component.ts&hideNavigation=1\\\"\\n    target=\\\"_blank\\\"><i class=\\\"edit outline link icon\\\"></i>Click here to try it out!</a>\\n</div>\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\">\\n  <h3>Create and show Property</h3>\\n  <p>Now we will use data-binding to show a temporary text message on the \\\"Home\\\" page until we are ready to show the information about the next lecture we have to go to.\\n  Put this property into <strong>where-to-go.component.ts</strong>:</p>\\n\\n  <pre><code>tempText: string = \\\"Here will appear your information soon!\\\";</code></pre>\\n\\n  <p>And replace the auto generated code in the <strong>where-to-go.component.html</strong> with this code:</p>\\n  <pre><code>&lt;p&gt;<span>{{</span> tempText <span>}}&lt;&#47;p&gt;</span></code></pre>\\n\\n  <p>This kind of data-binding is called interpolation and you just displayed the value of the property \\\"tempText\\\" as string in your HTML code.</p>\\n  <p class=\\\"ui info message\\\"><strong>Interpolation</strong>: Shows logic data in the template.<br>\\n  Syntax: <code><span>{{</span> &lt;<em>property</em>&gt; <span>}}</span></code>\\n  </p>\\n\\n  <h3>Visualization of the Construction:</h3>\\n  <p><img class=\\\"ui image large centered\\\" src=\\\"assets/img/App-Building-2.png\\\"></p>\\n\\n  <h3>Create Data Classes</h3>\\n  <p>For our project we are going to need a class to define a \\\"lecture\\\". \\n  With this code you can generate a TypeScript\\n  class in a new folder named \\\"shared\\\":</p>\\n    <pre class=\\\"command-line language-bash\\\" data-host=\\\"localhost\\\" data-user=\\\"user\\\"><code>ng g class shared/lecture</code></pre>\\n\\n  <p>We put it in a separated \\\"shared\\\" folder because all component work on the same reusable logical data structures.<br>\\n  In this new class we define the constructor for lecture.</p>\\n\\n<pre><code>constructor(\\n  public id: number,\\n  public name: string,\\n  public room: string,\\n  public day: string,\\n  public time: Time,\\n  public building: string,\\n  public floor: string,\\n  public department?: string) &#123;\\n&#125;</code></pre>\\n\\n  <p>Angular has its own type for time. Dependent on your used editor and the installed extensions, it may be the convenience case that you get asked right away if you want to import it.</p>\\n  <p><img class=\\\"ui image large centered\\\" src=\\\"assets/img/Import-Time.png\\\"></p>\\n  <p>If not, you have to do it on your own, like this:</p>\\n\\n  <pre><code>import &#123; Time &#125; from \\\"@angular/common\\\";</code></pre>\\n\\n  <h3>Generate Item Component</h3>\\n  <p>We want to show a complete lecture now, so we generate the component lecture-item.</p>\\n  <pre class=\\\"command-line language-bash\\\" data-user=\\\"user\\\" data-host=\\\"localhost\\\"><code>ng g component lecture-item</code></pre>\\n\\n  <p>We temporally create a static lecture inside the class \\\"LectureItemComponent\\\" in <strong>lecture-item.component.ts</strong> first and define all the properties the constructor requires.</p>\\n\\n    <pre><code>lecture: Lecture = &#123;\\n  id: 1,\\n  name: 'Webtechnologien',\\n  room: '075',\\n  day: 'Monday',\\n  time: &#123;hours: 10, minutes: 15&#125;,\\n  building: 'WE5',\\n  floor: '02',\\n  department: 'Lehrstuhl für Medieninformatik'\\n&#125;</code></pre>\\n\\n  <p>Of course we also need to import the class <code>Lecture</code>.</p>\\n  <pre><code>import &#123; Lecture &#125; from \\\"../shared/lecture\\\";</code></pre>\\n\\n  <p>And in the <strong>lecture-item.component.html</strong> we can define how we want to display that lecture item and which properties to include.\\n  We use again the interpolation to display the class properties in its HTML template.</p>\\n\\n  <pre><code>&lt;div style=\\\"padding: 50px;\\\"&gt;\\n  &lt;div class=\\\"ui middle aligned divided list\\\"&gt;\\n    &lt;div class=\\\"item\\\"&gt;\\n      &lt;div class=\\\"content\\\"&gt;\\n        &lt;h2 style=\\\"padding-bottom: 20px\\\" class=\\\"header ui\\\"&gt;\\n            Lecture Details:&lt;&#47;h2&gt;\\n        &lt;div class=\\\"header\\\"&gt;What? <span>{{</span>lecture.name <span>}}</span>&lt;&#47;div&gt;\\n        &lt;div class=\\\"description\\\"&gt;Where? <span>{{</span>lecture.building<span>}}</span>&#47;\\n            <span>{{</span>lecture.floor<span>}}</span>.<span>{{</span>lecture.room<span>}}</span>&lt;&#47;div&gt;\\n        &lt;div class=\\\"description\\\"&gt;When? <span>{{</span>lecture.day<span>}}</span>, \\n            <span>{{</span>lecture.time.hours<span>}}</span>:<span>{{</span>lecture.time.minutes<span>}}</span>&lt;&#47;div&gt;\\n        &lt;div *ngIf=\\\"lecture.department\\\" class=\\\"description\\\"&gt;\\n            Department: <span>{{</span>lecture.department<span>}}</span>&lt;&#47;div&gt;\\n      &lt;&#47;div&gt;\\n    &lt;&#47;div&gt;\\n  &lt;&#47;div&gt;\\n&lt;&#47;div&gt;</code></pre>\\n\\n  <p>To show it beneath the \\\"title\\\" and the \\\"where-to-go\\\" component we append</p>\\n\\n    <pre class=\\\"language-html\\\"><code>&lt;app-lecture-item&gt;&lt;/app-lecture-item&gt;</code></pre>\\n  <p>in the <strong>app.component.html</strong>.</p>\\n</div>\\n\\n<div *ngIf=\\\"theoryLarge\\\" style=\\\"margin-top: 20px;\\\" class=\\\"ui message\\\">\\n  <h4>Pipes</h4>\\n  <p>In almost every application, instead of showing your users the raw and oftentimes complex and opaque data, you transform the fetched data (to achieve a better user experience with clearer focus) before you show it to your users.<br>\\n  To help you out with this task Angular comes along with pipes: Display-value transformations to be declared right in your HTML.\\n  With pipes you can format strings, numbers and other data into your desired output format.<br>\\n  Additionally there are built-in pipes and it is possible to create your own.</p>\\n\\n  <p>\\n  In this case we are fine with the build-in pipes.\\n  For example you can format the date of today.\\n  <br>When you instantiate a <code>Date</code> object like <code>today: Date = new Date();</code>.\\n  And you display your date just as-is in your HTML code with\\n  <code><span>{{</span>today<span>}}</span></code> you will see this date-format: {{today}}\\n  </p>\\n  <p>Probably there are more readable versions to get the date at a glimpse.\\n  So you can use pipes to format the date:</p>\\n  <p><code><span>{{</span>today | date<span>}}</span></code> - Result:\\n    {{today | date}}</p>\\n  <p>It's even possible to parameterize a pipe:<br><code><span>{{</span>today | date: 'medium'<span>}}</span></code> - Result:\\n    {{today | date: 'medium'}}</p>\\n  <p><code><span>{{</span>today | date: 'fullDate'<span>}}</span></code> - Result:\\n    {{today | date: 'fullDate'}}</p><p>\\n      Or to chain pipes into useful combinations:<br>\\n      <code><span>{{</span>today | date | uppercase<span>}}</span></code> - Result:\\n    {{today | date | uppercase}}\\n    </p>\\n</div>\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\">\\n  <h3>Try a Pipe</h3>\\n  <p>We want to try the \\\"UppercasePipe\\\", which formats our string to capital letters:</p>\\n\\n\\n  <pre class=\\\"language-html\\\"><code>&lt;div class=\\\"header\\\"&gt;What? <span>{{</span> lecture.name | uppercase <span>}}</span>&lt;&#47;div&gt;</code></pre>\\n\\n  <p class=\\\"ui info message\\\"><strong>Pipe operator</strong>: Transforms interpolated data in the template into more display-friendly data.<br>\\n    Syntax: <code><span>{{</span> &lt;<em>property</em>&gt; | &lt;<em>pipe</em>&gt; <span>}}</span></code>\\n    </p>\\n\\n</div>\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\">\\n  <h3>Visualization of the Construction:</h3>\\n  <p><img class=\\\"ui image large centered\\\" src=\\\"assets/img/App-Building-3.png\\\"></p>\\n  <div class=\\\"ui success message\\\">\\n    <h4>Summary</h4>\\n    <ul>\\n      <li>With the Angular CLI you generated other components and a class.</li>\\n      <li>You displayed the new components by adding them to the application shell <code\\n         >AppComponent</code>.</li>\\n      <li>You learned about components, their lifecycle, bindings and pipes.</li>\\n      <li>You used interpolation to show text in the template.</li>\\n      <li>You used your knowledge about pipes and applied the <code\\n         >UppercasePipe</code>.</li>\\n    </ul>\\n  </div>\\n  <iframe style=\\\"margin-top:20px; margin-bottom:20px; width:100%; height: 500px\\\"\\n    src=\\\"https://stackblitz.com/edit/wheretogo-step-2?embed=1&file=src/app/app.component.ts&hideNavigation=1\\\"></iframe>\\n\\n<h3 id=\\\"toc_further_references\\\">Further references</h3>\\n<div class=\\\"ui warning message\\\">\\n  <p>Official documentation:</p>\\n  <ul>\\n    <li>Angular: <a href=\\\"https://angular.io/guide/architecture-components\\\" target=\\\"_blank\\\">Introduction to components</a></li>\\n    <li>Angular: <a href=\\\"https://angular.io/api/core/Component\\\" target=\\\"_blank\\\">Component Decorator</a></li>\\n    <li>Angular: <a href=\\\"https://angular.io/guide/lifecycle-hooks\\\" target=\\\"_blank\\\">Lifecycle Hooks</a></li>\\n    <li>Angular: <a href=\\\"https://angular.io/guide/template-syntax\\\" target=\\\"_blank\\\">Template Syntex</a></li>\\n    <li>Angular: <a href=\\\"https://angular.io/guide/pipes\\\" target=\\\"_blank\\\">Pipes</a></li>\\n    <li>Angular: <a href=\\\"https://angular.io/guide/displaying-data\\\" target=\\\"_blank\\\">Displaying data</a></li>\\n  </ul>\\n  <p>Advanced concepts:</p>\\n    <ul>\\n      <li>Wikipedia:<a href=\\\"https://developer.mozilla.org/de/docs/Web/HTML/Element/template\\\" target=\\\"_blank\\\">Template processor</a></li>\\n      <li>MDN: <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/Web_Components\\\" target=\\\"_blank\\\">Web Components</a></li>\\n      <li>MDN: <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template\\\" target=\\\"_blank\\\">&lt;template&gt;</a> and <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot\\\" target=\\\"_blank\\\">&lt;slot&gt;</a> tags</li>\\n      <li>MDN: <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\\\" target=\\\"_blank\\\">JavaScript modules</a></li>\\n      <li>MDN: <a href=\\\"https://developer.mozilla.org/de/docs/Web/API/Node#Properties\\\" target=\\\"_blank\\\">Node Properties</a></li>\\n    </ul>\\n</div>\\n\\n  <div class=\\\"ui center aligned segment\\\" style=\\\"width: 50%; margin: 0 auto\\\">\\n    <h4>Your Progress:</h4>\\n    <mat-progress-bar style=\\\"margin-bottom:20px;\\\" mode=\\\"determinate\\\" value=\\\"20\\\"></mat-progress-bar>\\n  </div>\\n</div>\\n</div>\"","export default \"<h2 id=\\\"headline\\\">Set up your Environment:</h2>\\n<div class=\\\"ui compact menu\\\" id=\\\"header_content\\\">\\n    <div class=\\\"ui simple dropdown item\\\">\\n    Content\\n    <i class=\\\"dropdown icon\\\"></i>\\n    <div class=\\\"menu\\\">\\n      <div class=\\\"item\\\"><a href=\\\"#toc_editor\\\">Editor</a></div>\\n      <div class=\\\"item\\\"><a href=\\\"#toc_git\\\">Git</a></div>\\n      <div class=\\\"item\\\"><a href=\\\"#toc_nodejs\\\">Node.js</a></div>\\n      <div class=\\\"item\\\"><a href=\\\"#toc_angular_cli\\\">Angular CLI</a></div>\\n      <div class=\\\"item\\\"><a href=\\\"#toc_further_references\\\">Further references</a></div>\\n    </div>\\n    </div>\\n</div>\\n<div id=\\\"start_content\\\">\\n  <h3 id=\\\"toc_editor\\\">Editor</h3>\\n  <p>First of all we need a code editor to kick off our bootcamp. You can choose among a large list of available editors, some popular ones are:</p>\\n    <ul>\\n      <li>Microsoft: <a href=\\\"https://code.visualstudio.com/\\\" target=\\\"_blank\\\">Visual Studio Code</a></li>\\n      <li>GitHub: <a href=\\\"https://atom.io/\\\" target=\\\"_blank\\\">Atom</a></li>\\n      <li>Adobe: <a href=\\\"http://brackets.io/\\\" target=\\\"_blank\\\">Brackets</a></li>\\n      <li><a href=\\\"https://www.sublimetext.com/\\\" target=\\\"_blank\\\">Sublime Text</a></li>\\n    </ul>\\n    <p>All of them are cross-platform, feature a packet or extension manager, different themes, customization and enable a direct Git integration.</p>\\n\\n  <h3 id=\\\"toc_git\\\">Git</h3>\\n  <p>\\n    To track changes, see our progress and be able to restore to the last working version (if something is broken), we use <a href=\\\"https://git-scm.com/\\\" target=\\\"_blank\\\">Git</a> as our <a href=\\\"https://www.atlassian.com/git/tutorials/what-is-version-control\\\">Version Control System</a> to manage our tutorial project.<br>\\n    Apart from the standalone git client (CLI and a crud GUI), almost all editors have nowadays an integrated git client. Furthermore, if you prefer it, its possible to use dedicated graphical applications with advanced features and a streamlined workflow:</p>\\n    <ul>\\n        <li><a href=\\\"https://git-fork.com/\\\" target=\\\"_blank\\\">Fork</a></li>\\n        <li><a href=\\\"https://www.sourcetreeapp.com/\\\" target=\\\"_blank\\\">Sourcetree</a></li>\\n        <li><a href=\\\"https://gitfiend.com/\\\" target=\\\"_blank\\\">GitFiend</a></li>\\n        <li><a href=\\\"https://gitblade.com/\\\" target=\\\"_blank\\\">GitBlade</a></li>\\n        <li><a href=\\\"https://www.sublimemerge.com/\\\" target=\\\"_blank\\\">Sublime Merge</a></li>\\n    </ul>\\n\\n    <p class=\\\"ui info message\\\" style=\\\"margin-bottom:30px;\\\">\\n        Please note: Git will not save the <code class=\\\"language-bash\\\">node_modules</code> folder in the Git repository. So if you clone your project\\n        for the first time you need to install all dependencies via <code class=\\\"language-bash\\\">npm install</code> (this time as an administrator).\\n        Also make sure, that on this different PC Node.js and the Angular CLI are installed, too (see above for instructions).\\n    </p>\\n\\n  <h3 id=\\\"toc_nodejs\\\">Node.js</h3>\\n  <p>\\n    <a href=\\\"https://nodejs.org/\\\" target=\\\"_blank\\\">Node.js</a> is a open-source, cross-platform JavaScript runtime environment, which executes JavaScript outside the browser. Therefore it can be used for server-side scripting.<br>\\n    It is build on top of Google's <a href=\\\"https://v8.dev\\\" target=\\\"_blank\\\">V8</a> JavaScript engine and uses a modular approach together with the bundled packet manager <a href=\\\"https://www.npmjs.com/\\\" target=\\\"_blank\\\">npm</a>, which allows developers to install, publish and share modules of code (especially on the npm Registry, which is a public collection of open-source packages).\\n  </p>\\n  \\n    <p>After installing the Long Term Support (LTS) Node.js you can check the used versions in the command line:</p>\\n    <pre class=\\\"command-line language-bash\\\" data-user=\\\"user\\\" data-host=\\\"localhost\\\"><code>node -v</code></pre>\\n    <pre class=\\\"command-line language-bash\\\" data-user=\\\"user\\\" data-host=\\\"localhost\\\"><code>npm -v</code></pre>\\n  \\n    <p>Now you can search for packages on the npm website and install them locally, in the currenty directory, by running: </p>\\n    <pre class=\\\"command-line language-bash\\\" data-user=\\\"user\\\" data-host=\\\"localhost\\\"><code>npm install &lt;package_name&gt;</code></pre>\\n    <p>This creates a <code class=\\\"language-bash\\\">node_modules</code> directory and downloads the package into that directory.</p>\\n    <p>Or, to use the module as a set of tools on your computer, globally by running:</p>\\n    <pre class=\\\"command-line language-bash\\\" data-user=\\\"user\\\" data-host=\\\"localhost\\\"><code>npm install -g &lt;package_name&gt;</code></pre>\\n\\n  <h3 id=\\\"toc_angular_cli\\\">Angular CLI</h3>\\n  <p>\\n    The <a href=\\\"https://angular.io/cli\\\" target=\\\"_blank\\\">Angular CLI</a> tool is a command line tool based on Node.js, which helps you from the very beginning:\\n    It creates projects, generates application and library code (skeletons for components, services, pipes and directives) and helps you with development tasks such as testing, bundling and deployment.\\n  </p>\\n  <p>\\n  For Windows users I recommend <a href=\\\"https://github.com/felixrieseberg/windows-build-tools#readme\\\" target=\\\"_blank\\\"> Windows-Build-Tools</a> for a frictionless setup.<br> \\n  Attention: You need to execute this installation as an administrator.</p>\\n  <pre class=\\\"command-line language-bash\\\" data-user=\\\"user\\\" data-host=\\\"localhost\\\"><code>npm install --global windows-build-tools</code></pre>\\n\\n  <p>Now you can install the Angular CLI by using this command:</p>\\n  <pre class=\\\"command-line language-bash\\\" data-user=\\\"user\\\" data-host=\\\"localhost\\\"><code>npm install -g @angular/cli</code></pre>\\n\\n  <p class=\\\"ui red message\\\">In some cases it might be required to install the Angular CLI as the user, that will use it. So if it does not work, try to install it with your local user.</p>\\n\\n  <p>For those who rather like to work with a graphical user interface there even exists the app <a href=\\\"https://angularconsole.com\\\" target=\\\"_blank\\\">Angular Console</a>. Please be aware that this desktop application is neither developed nor maintained by the Angular team!</p>\\n\\n  <h3 id=\\\"toc_further_references\\\">Further references</h3>\\n  <p class=\\\"ui info message\\\">To help you with all the CLI commands:<br>\\n    <a href=\\\"https://kapeli.com/cheat_sheets/npm.docset/Contents/Resources/Documents/index\\\" target=\\\"_blank\\\">\\n      <strong>npm Cheat Sheet</strong>\\n    </a><br>\\n    <a href=\\\"https://malcoded.com/angular-cheat-sheet/\\\" target=\\\"_blank\\\"><strong>Angular CLI Cheat Sheet</strong></a>\\n  </p>\\n  <div class=\\\"ui warning message\\\">\\n    <p>Official documentation:</p>\\n    <ul>\\n      <li><a href=\\\"https://nodejs.org/en/docs/guides/\\\" target=\\\"_blank\\\">Node.js Guides</a></li>\\n      <li><a href=\\\"https://docs.npmjs.com/getting-started/configuring-your-local-environment\\\" target=\\\"_blank\\\">npm: Configuring your local environment</a></li>\\n      <li><a href=\\\"https://docs.npmjs.com/packages-and-modules/getting-packages-from-the-registry\\\" target=\\\"_blank\\\">npm: Getting packages from the registry</a></li>\\n      <li><a href=\\\"https://angular.io/guide/setup-local\\\" target=\\\"_blank\\\">Angular: Setting up the Local Environment and Workspace</a></li>\\n    </ul>\\n  </div>\\n</div>\\n\"","export default \"<h2>Finish the Application</h2>\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\" class=\\\"ui info message\\\">\\n  <h5>User Story</h5>\\n  <p>As a <b>user</b><br />\\n    I want to <b>display the very next lecture on the front page</b>, <br />\\n    to <b> see immediately where to go next when I open the app</b>.</p>\\n</div>\\n<div *ngIf=\\\"theoryLarge\\\" style=\\\"margin-top: 20px;\\\">\\n  <p>This chapter doesn't contain any more theory learning units.</p>\\n</div>\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\">\\n  <h4>Start page</h4>\\n  <p>There is still one page empty: the start page. On this page we want to see our next lecture and only the next one\\n    of the day. So first we need to prepare the <b>where-to-go.component.ts</b>. We are going to need the\\n    <code>LectureService</code>\\n    injected in the <code>constructor</code> again.</p>\\n\\n    <pre class=\\\"language-ts\\\"><code>constructor(private lectureService: LectureService) &#123; &#125;</code></pre>\\n\\n  <p>Of course we also need to import the class <code>Lecture</code>.</p>\\n\\n  <pre class=\\\"language-ts\\\"><code>import &#123; LectureService &#125; from \\\"../shared/lecture.service\\\";</code></pre>\\n\\n  <p>Then we need the <code>Date</code> of today. This <code\\n     >Date</code> will tell us all we need to know: the day of\\n    the week and the time, because we want to compare the day and time of today with the day and time of the lectures\\n    in the timetable to find the very next lecture to display. We need an array of <code\\n     >Lecture[]</code>, a\\n    <code>Lecture</code> variable to save the next lecture with, a <code\\n     >Boolean</code> that will save if there still\\n    is a lecture today and a <code>Lecture</code> object with initialised start values.\\n    We will need this to compare all objects in the timetable with this <code>Lecture</code> object and we\\n    overwrite it every time, a lecture is closer to the time right now than the saved lecture before.</p>\\n\\n    <pre class=\\\"language-ts\\\"><code>lectures: Lecture[];\\nnextLecture: Lecture;\\nlocalTime: Date = new Date();\\nisThereANextLecture: boolean = false;\\ntempLecture: Lecture = &#123;\\n    id: 99,\\n    name: \\\"Dummy\\\",\\n    room: \\\"0\\\",\\n    day: this.getWeekday(),\\n    time: &#123;hours: 20, minutes: 15&#125;,\\n    building: \\\"WE5\\\",\\n    floor: \\\"0\\\"\\n&#125;;</code></pre>\\n\\n  <p>Of course we also need to import the class <code>Lecture</code>.</p>\\n  <pre class=\\\"language-ts\\\"><code>import &#123; Lecture &#125; from \\\"../shared/lecture\\\";</code></pre>\\n\\n  <p>We will also have the <code>getLectures()</code> method that we call in <code\\n     >ngOnInit()</code>.</p>\\n\\n     <pre class=\\\"language-ts\\\"><code>ngOnInit() &#123;\\n    this.getLectures();\\n&#125;\\n\\ngetLectures(): void &#123;\\n    this.lectureService.getLectures()\\n      .subscribe(lectures => &#123;this.lectures = lectures;\\n        this.getNextLecture()&#125;\\n      );\\n&#125;</code></pre>\\n\\n  <p>With the method <code>getDay()</code> we will get the weekday of today as a number.\\n    0 is sunday, 1 is monday and\\n    so on. But we need them as strings. We pick the one string from an array of strings whose index is the same\\n    number as todays number.</p>\\n\\n    <pre class=\\\"language-ts\\\"><code>getWeekday(): string &#123;\\n    var days = [\\\"Sunday\\\", \\\"Monday\\\", \\\"Tuesday\\\", \\\"Wednesday\\\", \\\"Thursday\\\", \\\"Friday\\\", \\\"Saturday\\\"];\\n    return days[this.localTime.getDay()];\\n&#125;</code></pre>\\n\\n  <p>Now it's time for the function, that will return the correct next lecture for us.</p>\\n\\n  <pre class=\\\"language-ts\\\"><code>getNextLecture(): void &#123;\\n    let tempArray: Array&lt;Lecture&gt; = [];\\n    for (let lecture of this.lectures) &#123;\\n      if(lecture.day === this.getWeekday()) &#123;\\n        if(lecture.time.hours &gt;= this.localTime.getHours()) &#123;\\n          tempArray.push(lecture);\\n        &#125;\\n      &#125;\\n    &#125;\\n\\n    for(let t of tempArray) &#123;\\n      if(t.time.hours &lt; this.tempLecture.time.hours) &#123;\\n        this.tempLecture = t;\\n        this.isThereANextLecture = true;\\n      &#125;\\n    &#125;\\n\\n    if(this.isThereANextLecture) &#123;\\n      this.nextLecture = this.tempLecture;\\n    &#125;\\n&#125;</code></pre>\\n\\n  <p>There is an empty array, we go through all lectures in the lecture array and if the day is today, we check if the\\n    hour is greater than or equal with the hour right now. If so we put this lecture in the prepared array. In the\\n    second step the function compares all lectures in the <code>tempArray</code> with\\n    each other and saves the smallest\\n    one, which means the one that is closest to the time right now and sets the boolean <code\\n     >true</code>. We could do\\n    the same thing with the minutes, but you can't be at two lectures at the same time, so this is fine now.</p>\\n  <p>The last step is to display it via the HTML code. If we have a <code\\n     >nextLecture</code>, we want to see the\\n    <code>nextLecture</code>s' building, floor, room, day,time and name. If there is no\\n    <code>nextLecture</code>, we\\n    want to display the text \\\"No events today!\\\"</p>\\n\\n    <pre class=\\\"language-html\\\"><code>&lt;div style=\\\"margin: 30px;\\\"&gt;\\n    &lt;div *ngIf=\\\"nextLecture\\\" class=\\\"ui info message\\\"\\n      style=\\\"width: 50%; margin-left: 25%\\\"&gt;\\n      &lt;div class=\\\"header\\\"&gt;\\n          You need to be in\\n      &lt;&#47;div&gt;\\n      &lt;div class=\\\"header\\\"&gt;\\n          <span>{{</span>nextLecture.building<span>}}</span>&#47;<span>{{</span>nextLecture.floor<span>}}</span>\\n        .<span>{{</span>nextLecture.room<span>}}</span>\\n      &lt;&#47;div&gt;\\n      &lt;div style=\\\"text-align: center;\\n          list-style-type: none;\\\" class=\\\"list\\\"&gt;\\n        &lt;p&gt;At <span>{{</span>nextLecture.day<span>}}</span>, <span>{{</span>nextLecture.time.hours<span>}}</span>\\n        :<span>{{</span>nextLecture.time.minutes<span>}}</span>&lt;&#47;p&gt;\\n        &lt;p&gt;For <span>{{</span>nextLecture.name<span>}}</span>&lt;&#47;p&gt;\\n      &lt;&#47;div&gt;\\n    &lt;&#47;div&gt;\\n    &lt;div *ngIf=\\\"!nextLecture\\\" class=\\\"ui info message\\\"\\n      style=\\\"width: 50%; margin-left: 25%\\\"&gt;\\n        No events today!\\n    &lt;&#47;div&gt;\\n&lt;&#47;div&gt;</code></pre>\\n\\n  <h4>Visualization of the Construction:</h4>\\n  (No changes here)\\n  <p><img class=\\\"ui image big centered\\\" src=\\\"assets/img/App-Building-9.png\\\"></p>\\n  <div class=\\\"ui success message\\\">\\n    <h4>Summary</h4>\\n    <ul>\\n      <li>Nothing in this chapter should be new for you.</li>\\n      <li>You displayed the next lecture of the day on the start page of the application.</li>\\n      <li>You have learned alot, be proud of yourself!</li>\\n    </ul>\\n  </div>\\n  <h4>Congratulations! This is your result:</h4>\\n  <iframe style=\\\"margin-top:20px; margin-bottom:20px; width:100%; height: 500px\\\"\\n    src=\\\"https://stackblitz.com/edit/wheretogo-step-8?embed=1&file=src/app/where-to-go/where-to-go.component.ts&hideNavigation=1\\\"></iframe>\\n\\n<h3 id=\\\"toc_further_references\\\">Further references</h3>\\n<div class=\\\"ui warning message\\\">\\n    <p>Official documentation:</p>\\n    <ul>\\n      <li>Angular: <a href=\\\"https://angular.io/guide/cheatsheet\\\" target=\\\"_blank\\\">Cheat Sheet</a></li>\\n      <li>Angular: <a href=\\\"https://angular.io/guide/styleguide\\\" target=\\\"_blank\\\">Style Guide</a></li>\\n    </ul>\\n</div>\\n\\n  <div class=\\\"ui center aligned segment\\\" style=\\\"width: 50%; margin: 0 auto\\\">\\n    <h4>Your Progress:</h4>\\n    <mat-progress-bar style=\\\"margin-bottom:20px;\\\" mode=\\\"determinate\\\" value=\\\"100\\\"></mat-progress-bar>\\n  </div>\\n</div>\"","export default \"<h2 id=\\\"headline\\\">My first Angular-App:</h2>\\n<div class=\\\"ui compact menu\\\" id=\\\"header_content\\\">\\n    <div class=\\\"ui simple dropdown item\\\">\\n    Content\\n    <i class=\\\"dropdown icon\\\"></i>\\n    <div class=\\\"menu\\\">\\n      <div class=\\\"item\\\"><a href=\\\"#toc_lets_start\\\">Let's start</a></div>\\n      <div class=\\\"item\\\"><a href=\\\"#toc_further_references\\\">Further references</a></div>\\n    </div>\\n    </div>\\n</div>\\n<div id=\\\"start_content\\\">\\n  <h3 id=\\\"toc_lets_start\\\">Let's start</h3>\\n  <p>To get a simple welcome app, first open your command line and type:\\n  </p>\\n <pre class=\\\"command-line language-bash\\\" data-user=\\\"user\\\" data-host=\\\"localhost\\\"><code>ng new my-first-app</code></pre>\\n\\n  <p>You will get questions about the features include in your app:<br></p>\\n    <ul>\\n    <li><code class=\\\"language-bash\\\">? Would you like to add Angular routing?</code>\\\". Answer it with <code class=\\\"language-bash\\\">Yes</code>! Therefore you get a router to navigate between states and view within your app.</li>\\n    <li><code class=\\\"language-bash\\\">? Which stylesheet format would you like to use?</code> \\n     In this tutorial we use plain <code class=\\\"language-bash\\\">CSS</code>. The other options <a href=\\\"https://sass-lang.com/documentation/syntax\\\" target=\\\"_blank\\\">SCSS</a>, <a href=\\\"https://sass-lang.com\\\" target=\\\"_blank\\\">Sass</a>, <a href=\\\"http://lesscss.org/\\\" target=\\\"_blank\\\">Less</a> and <a href=\\\"http://stylus-lang.com/\\\" target=\\\"_blank\\\">Stylus</a> are other stylesheet languages, with further features like functions and variables, which are compiled to CSS through their CSS preprocessor.</li></ul>\\n  <img style=\\\"margin-bottom:15px;\\\" class=\\\"ui centered large image\\\" src=\\\"assets/img/New-Project.png\\\">\\n\\n  <p> A project which includes all necessary files and folders will be created.</p>\\n  <p>These are:</p>\\n  <ul>\\n    <li>The new workspace with the root folder <code class=\\\"language-bash\\\">my-first-app</code>.</li>\\n    <li>An initial skeleton app project, also called \\\"my-first-app\\\" which you will find it in the subfolder <code class=\\\"language-bash\\\">src</code>.\\n    </li>\\n    <li> An end-to-end test project in the subfolder <code class=\\\"language-bash\\\">e2e</code>.\\n    </li>\\n    <li>The, by npm installed, packages in the subfolder <code class=\\\"language-bash\\\">node_modules</code>.</li>\\n    <li>Related configuration files.</li>\\n  </ul>\\n  <p>After installation you get an answer from your system, like this: <code class=\\\"language-bash\\\">added 1098 packages from 1166 contributors and audited 39144 packages in 35.242s\\n      <span class=\\\"bold\\\">found 3 vulnerabilities (2 low, 1 high)</span></code>. npm scanned your whole project with all your packages for vulnerabilities and shows you the summarized results.\\n      If there are vulnerabilities just follow the instructions on your command line (<code class=\\\"language-bash\\\">npm audit fix</code> or similar) to automatically install any compatible updates to vulnerable dependencies. For production-ready code you should fix at least all high vulnerabilities, but as we only learn for ourselves you can ignore all eventually remaining vulnerabilities.</p>\\n\\n  <p>Then you can navigate to that project-folder:</p> \\n  <pre class=\\\"command-line language-bash\\\" data-user=\\\"user\\\" data-host=\\\"localhost\\\"><code>cd my-first-app</code></pre>\\n  <pre><code class=\\\"command-line language-bash\\\" data-user=\\\"user\\\" data-host=\\\"localhost\\\">ng serve --open</code></pre>\\n  <p>With <code class=\\\"language-bash\\\">serve</code> you can already run the application and <code class=\\\"language-bash\\\">--open</code> opens the browser directly on <a\\n      href=\\\"http://localhost:4200/\\\">http://localhost:4200/</a>\\n    and shows your brand new application (instead of localhost you can type <a href=\\\"http://127.0.0.1:4200\\\">http://127.0.0.1:4200</a>).\\n  </p>\\n  <h4>First things first</h4>\\n  <p>Before we start our big project, we need to know some things about <a routerLink=\\\"/typescript\\\">TypeScript</a> in\\n    general.</p>\\n\\n  <h3 id=\\\"toc_further_references\\\">Further references</h3>\\n  <p class=\\\"ui info message\\\">If you are already confused by all the special Angular terms:<br>\\n    <a href=\\\"https://angular.io/guide/glossary\\\" target=\\\"_blank\\\">\\n      <strong>Angular Glossary</strong>\\n    </a><br>\\n  </p>\\n  <div class=\\\"ui warning message\\\">\\n    <p>Official documentation:</p>\\n    <ul>\\n      <li><a href=\\\"https://docs.npmjs.com/cli/audit\\\" target=\\\"_blank\\\">npm-audit</a></li>\\n      <li><a href=\\\"https://angular.io/guide/setup-local#step-2-create-a-workspace-and-initial-application\\\" target=\\\"_blank\\\">Angular: Create a workspace and initial application</a></li>\\n      <li><a href=\\\"https://developer.mozilla.org/en-US/docs/Glossary/CSS_preprocessor\\\" target=\\\"_blank\\\">MDN: CSS preprocessor</a></li>\\n      <li><a href=\\\"https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_web_server\\\" target=\\\"_blank\\\">MDN: What is a web server?</a></li>\\n      <li><a href=\\\"https://en.wikipedia.org/wiki/Localhost\\\" target=\\\"_blank\\\">Wikipedia: Localhost</a></li>\\n    </ul>\\n  </div>\\n</div>\"","export default \"<div class=\\\"ui three column grid\\\" style=\\\"text-align: center\\\">\\n  <div class=\\\"column\\\">\\n    <div class=\\\"ui fluid card\\\">\\n      <a class=\\\"image\\\" (click)=\\\"theorist()\\\" routerLink=\\\"/environment\\\">\\n        <img src=\\\"assets/img/Icons-01.png\\\">\\n      </a>\\n      <div class=\\\"content\\\">\\n        <a class=\\\"header\\\" (click)=\\\"theorist()\\\" routerLink=\\\"/environment\\\">Theorist</a>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"column\\\">\\n    <div class=\\\"ui fluid card\\\">\\n      <a class=\\\"image\\\" (click)=\\\"practitioner()\\\" routerLink=\\\"/environment\\\">\\n        <img src=\\\"assets/img/Icons-02.png\\\">\\n      </a>\\n      <div class=\\\"content\\\">\\n        <a class=\\\"header\\\" (click)=\\\"practitioner()\\\" routerLink=\\\"/environment\\\">Practitioner</a>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"column\\\">\\n    <div class=\\\"ui fluid card\\\">\\n      <a class=\\\"image\\\" (click)=\\\"both()\\\" routerLink=\\\"/environment\\\">\\n        <img src=\\\"assets/img/Icons-03.png\\\">\\n      </a>\\n      <div class=\\\"content\\\">\\n        <a class=\\\"header\\\" (click)=\\\"both()\\\" routerLink=\\\"/environment\\\">Both</a>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n<h2 style=\\\"text-align: center;\\\">Who are you?</h2>\\n<div style=\\\"margin: 30px;\\\" class=\\\"ui message\\\">\\n  <p>If you just want to read some theory parts about Angular, choose the theorist. If you just want to see how to code\\n    Angular,\\n    choose the practitioner. If you want to have it all, choose both.</p>\\n  <p><b>Recommendation</b>: Choose \\\"Both\\\"! You will find a visual difference between theory and practice and you will\\n    have everything you may interestend in on every page.</p>\\n</div>\\n\\n\"","export default \"<h2>HTTP</h2>\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\" class=\\\"ui info message\\\">\\n  <h5>User Story</h5>\\n  <p>As a <b>user</b><br />\\n    I want to <b>add, change and delete lectures</b>, <br />\\n    to <b> keep my timetable up-to-date</b>.</p>\\n</div>\\n<div *ngIf=\\\"theoryLarge\\\" style=\\\"margin-bottom: 20px;\\\" class=\\\"ui message\\\">\\n  <h4>Http</h4>\\n  <p>\\n    Most front-end applications interact with the backend over HTTP protocol. In fact, every application loads data at\\n    runtime. Different patterns can be used. Angular uses the RxJS-Framework, that is based on the observable pattern.\\n    The Angular class <code>Http</code> implements this pattern and provides an\\n    interface, where you can load data\\n    asynchonous.\\n  </p>\\n  <p>Often web-applications use REST server. They use http methods to define actions, e.g. which action should the server\\n    run for the specific resource.</p>\\n  <ul>\\n    <li>GET: is used to request a resource from the server, e.g. a list with items</li>\\n    <li>POST: to add a new resource or update an existing one, e.g. adds or updates an item of that list</li>\\n    <li>PUT: replaces an existing resource, e.g. replaces one item or one list with another item or list</li>\\n    <li>DELETE: deletes a resource by the sent id</li>\\n  </ul>\\n  <p>The term \\\"resource\\\" refers to a single data object of a REST server. The path of the request tells the\\n    server which resource to do an action on. For example you can make a request for a list with the path\\n    <code>/list</code> and the method <code>GET</code>.\\n    And with the path <code>/list/1234</code> you could request the\\n    list-item 1234.</p>\\n  <h4>Observables</h4>\\n  <p>Reactive programing is a programing paradigm. It's about data streams. As an example calculation tables in MS\\n    Excel can be used. It is not about Excel, it's about the table. If you have cells in the table connected by a\\n    formula and you change a value in a connected cell, the outcome of the formula will be updated automatically.\\n    Angular supports reactive programing with the RxJS-Framework. Observables are the main construct of the RxJS\\n    library. Observables represent a data stream supplied by a source. They have the following tasks:</p>\\n  <ul>\\n    <li>Generate data</li>\\n    <li>Allow the use of operators, to manipulate data</li>\\n    <li>Release storage, if data stream is no longer needed</li>\\n  </ul>\\n  <p> <code>subscribe</code>-method: it's used to listen and react to signals of the\\n    observable. The signature could\\n    look like this:\\n    <code>obs.subscribe((data) => &#123;...&#125;);</code></p>\\n  <p><code>pipe</code>-method: chains the operators of observables. The method gets null\\n    or more operators and returns\\n    an observable.\\n    The data of the returned observable have the same type as they have in the last operator</p>\\n  <ul>\\n    <li><code>map</code>-operator: gets an observable internally, gives the data of the\\n      observable to the transformation\\n      function,\\n      gets the return value and puts it in an observable. This new observable is forwarded to the next operator</li>\\n    <li><code>mapTo</code>-operator: forwards a static value</li>\\n    <li><code>tap</code>-operator: is used for side-effects. Can be used to print the\\n      data stream on the console, or to\\n      save data from the server in a property</li>\\n    <li><code>catchError</code>-operator: is comparable to the <code\\n       >catch</code> of a <code>try/catch</code>-block.\\n      It\\n      gets an error, handles the error and returns a new observable or a new error-observable for the next\\n      <code>catchError</code>-operator</li>\\n    <li><code>of</code>-operator: creates a new observable from a static value</li>\\n    <li><code>throwError</code>-operator: creates a new error-observable. It's similar\\n      to the <code>throw</code>\\n      command</li>\\n  </ul>\\n  <h4>Http-Module</h4>\\n  <p>The http-module contains three Angular modules: <code\\n     > HttpClientModule, HttpClientJsonpModule</code> and\\n    <code>HttpClientXsrfModule</code>. The most important classes of the http-module\\n    are:</p>\\n  <ul>\\n    <li><code>HttpHeaders</code>: helps you to define and manipulate the http-headers of\\n      a server request</li>\\n    <li><code>HttpParams</code>: helps you to define and manipulate the request\\n      parameter of a server request</li>\\n    <li><code>HttpRequest</code>: represents server requests. An instance of this class\\n      contains URL and http-headers\\n      for\\n      the request. You don't assign instances of this class, Angular will do this internally.</li>\\n    <li><code>HttpResponse</code>: represents an answer from the server. It contains for\\n      example the status, the server\\n      has for the request and the data the server sends.</li>\\n    <li><code>HttpErrorResponse</code>: represents an error-answer from the server. The\\n      answer of the server fails when\\n      the connection fails, when an exception is in your code or when the server status code is bigger or equals 400.\\n    </li>\\n  </ul>\\n  <p>We will work with the <code>HttpClientModule</code>. It provides the <code\\n     >HttpClient</code> service. All methods\\n    of the <code>HttpClient</code> service return observables and use json data. The use\\n    of json data means that Angular\\n    serializes and deserializes the data for you.</p>\\n</div>\\n<h4>Using a Data Server</h4>\\n<div *ngIf=\\\"theorySmall\\\" style=\\\"margin-bottom: 20px;\\\" class=\\\"ui message\\\">\\n  <p>The service class should get the data now with HTTP requests. We want to add functions:</p>\\n  <ul>\\n    <li><b>C</b>reate for adding new lectures</li>\\n    <li><b>R</b>ead (we already have that)</li>\\n    <li><b>U</b>pdate for changing a lecture item</li>\\n    <li><b>D</b>elete for deleting a lecture item or all of them</li>\\n  </ul>\\n</div>\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\">\\n  <p>Import this in <b>app.module.ts</b>:</p>\\n\\n  <pre class=\\\"language-ts\\\"><code>import &#123; HttpClientModule &#125; from \\\"@angular/common/http\\\";</code></pre>\\n\\n  <p>And add it to the <code>imports</code> array:</p>\\n\\n  <pre class=\\\"language-ts\\\"><code>imports: [\\n    // Other lines, add below:\\n    HttpClientModule\\n],</code></pre>\\n\\n  <p>The In-Memory Web API Module will be used. It imitates the communication with a remote data server. First install\\n    the npm package and generate the InMemoryData-Service:</p>\\n <pre class=\\\"command-line language-bash\\\"><code>npm install angular-in-memory-web-api --save</code></pre>\\n <pre class=\\\"command-line language-bash\\\"><code>ng g service shared/InMemoryData</code></pre>\\n  <p>Import to <b>app.module.ts</b>:</p>\\n\\n  <pre class=\\\"language-ts\\\"><code>import &#123; HttpClientInMemoryWebApiModule &#125; from \\\"angular-in-memory-web-api\\\";\\nimport &#123; InMemoryDataService &#125; from \\\"./shared/in-memory-data.service\\\";</code></pre>\\n\\n  <p>And you also need to add it to the <code>imports</code> array:</p>\\n\\n  <pre class=\\\"language-ts\\\"><code>imports: [\\n    // Other lines, add below:\\n    HttpClientModule,\\n    HttpClientInMemoryWebApiModule.forRoot(\\n      InMemoryDataService,\\n      &#123; dataEncapsulation: false &#125;)\\n],</code></pre>\\n\\n  <p>If you have this problem, don't worry, we will fix it now.\\n  </p>\\n  <img style=\\\"margin-bottom:15px;\\\" class=\\\"ui centered large image\\\" src=\\\"assets/img/InMemoryData-Error.png\\\">\\n  <p>The class <code><b>InMemoryDataService</b></code> needs to implement <code\\n     >InMemoryDbService</code> and the\\n    property\\n    <code>createDb</code> is missing.</p>\\n\\n    <pre class=\\\"language-ts\\\"><code>export class InMemoryDataService implements InMemoryDbService &#123;\\n    createDb() &#123;\\n      const lectures = [];\\n      return &#123; lectures &#125;\\n    &#125;\\n&#125;</code></pre>\\n\\n  <p>therefore you need to import:</p>\\n    \\n  <pre class=\\\"language-ts\\\"><code>import &#123; InMemoryDbService &#125; from \\\"angular-in-memory-web-api\\\";</code></pre>\\n\\n  <p>Now we need to fill the <code>const lectures</code> with the data we have in <code\\n     >mock-lectures.ts</code>.</p>\\n  <p>To be sure every new lecture will have an unique id we add the method <code\\n     >genId()</code>. If the array is\\n    empty the initial id 11 will be used, otherwise the highest id + 1 will be used.</p>\\n\\n    <pre class=\\\"language-ts\\\"><code>genId(lectures: Lecture[]): number &#123;\\n    return lectures.length &gt; 0 ? Math.max(...lectures.map(lecture => lecture.id)) + 1 : 11;\\n&#125;</code></pre>\\n\\n  <p>Of course we also need to import the class <code>Lecture</code>.</p>\\n  <pre class=\\\"language-ts\\\"><code>import &#123; Lecture &#125; from \\\"./lecture\\\";</code></pre>\\n\\n  <h4>Update the Getter</h4>\\n  <p>To get the data from the remote server now, we need to update the getter-methods for the lecture array and the\\n    single lecture item. First we define in <b>lecture.service.ts</b> the <code\\n     >lectureUrl</code> of the form\\n    <code>:base/:collectionName</code> with the address of the lecture resource on the\\n    server. Here base is the\\n    resource to which requests are made, and <code>collectionName</code> is the lectures\\n    data object in the\\n    in-memory-data-service.ts.</p>\\n    <pre class=\\\"language-ts\\\"><code>private lectureUrl = \\\"api/lectures\\\";</code></pre>\\n\\n  <p>Injection into the constructor:</p>\\n  <pre class=\\\"language-ts\\\"><code>constructor(private http: HttpClient) &#123;\\n&#125;</code></pre>\\n\\n<pre class=\\\"language-ts\\\"><code>import &#123; HttpClient &#125; from \\\"@angular/common/http\\\";</code></pre>\\n\\n  <p>And now change the getter:</p>\\n\\n  <pre class=\\\"language-ts\\\"><code>getLectures(): Observable&lt;Lecture[]&gt; &#123;\\n    return this.http.get&lt;Lecture[]&gt;(this.lectureUrl);\\n&#125;</code></pre>\\n\\n</div>\\n<div *ngIf=\\\"theorySmall\\\" style=\\\"margin-top: 20px;\\\" class=\\\"ui message\\\">\\n  <p>All HttpClient methods return a RxJS-Observable of something. HTTP is a request / response protocol. Every time\\n    you make a request you will get a single response. </p>\\n</div>\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\">\\n  <p>There might go something wrong with the data of the remote\\n    server sometimes, that's why <code>getLectures()</code> should catch an error and do\\n    something appropriate with it.\\n    So we need a method for that:</p>\\n\\n    <pre class=\\\"language-ts\\\"><code>private handleError&lt;T&gt;(operation = \\\"operation\\\", result?: T) &#123;\\n    return (error: any): Observable&lt;T&gt; => &#123;\\n        console.log(operation + \\\" failed: \\\" + error);\\n        return of(result as T);\\n    &#125;\\n&#125;</code></pre>\\n\\n  <p>If something goes wrong now the error will be logged on the console. In addition the method will return a safe\\n    value, that will keep the application running. The next step is to import <code\\n     >catchError</code> and add it to the\\n    get method.</p>\\n\\n    <pre class=\\\"language-ts\\\"><code>import &#123; catchError, map, tap &#125; from \\\"rxjs/operators\\\";</code></pre>\\n\\n  <pre class=\\\"language-ts\\\"><code>getLectures(): Observable&lt;Lecture[]&gt; &#123;\\n    return this.http.get&lt;Lecture[]&gt;(this.lectureUrl)\\n      .pipe(catchError(this.handleError(\\\"getLectures\\\", [])));\\n&#125;</code></pre>\\n\\n  <p class=\\\"ui info message\\\"><code>get</code>\\n    <br />Retrieve information.\\n  </p>\\n\\n  <p>We also need to change the getter method for the single lecture:</p>\\n\\n  <pre class=\\\"language-ts\\\"><code>getLecture(id: number): Observable&lt;Lecture&gt; &#123;\\n    const url = `$&#123;this.lectureUrl&#125;/$&#123;id&#125;`;\\n    return this.http.get&lt;Lecture&gt;(url)\\n      .pipe(catchError(this.handleError&lt;Lecture&gt;(\\n      `getLecture id=$&#123;id&#125;`))\\n      );\\n&#125;</code></pre>\\n\\n  <p>The <code>const url</code> is defined as :baseURL/:id so that the url is returned\\n    with id and is retrieved from\\n    the\\n    server with <code>http.get()</code>.</p>\\n  <p>With these steps the class mock-lectures.ts is useless now. You are safe to delete the class and also its import\\n    to lecture.service.ts.</p>\\n\\n  <h4>Change Lecture Details</h4>\\n  <p>We want to be able to change something in the details of a lecture. In the detail view we can display our lecture\\n    in a form, but we need to write the changes on the server, if we want to have them permanent. We need to prepare a\\n    function in <b>lecture.service.ts</b>.</p>\\n\\n    <pre class=\\\"language-ts\\\"><code>import &#123; HttpHeaders &#125; from \\\"@angular/common/http\\\";\\n\\nconst httpOptions = &#123;\\n  headers: new HttpHeaders(&#123;\\\"Content-Type\\\": \\\"application/json\\\"&#125;)\\n&#125;</code></pre>\\n\\n<pre class=\\\"language-ts\\\"><code>updateLecture(lecture: Lecture): Observable&lt;any&gt; &#123;\\n  return this.http.put(this.lectureUrl, lecture, httpOptions)\\n    .pipe(catchError(this.handleError&#123;any&#125;(\\\"updateLecture\\\"));)\\n&#125;</code></pre>\\n\\n  <p class=\\\"ui info message\\\"><code>put</code>\\n    <br />Store an entity at a URI. PUT can create a new entity or update an existing one.\\n  </p>\\n</div>\\n<div *ngIf=\\\"theorySmall\\\" style=\\\"margin-top: 20px;\\\" class=\\\"ui message\\\">\\n  <p>The method <code>HttpClient.put()</code> needs three parameters: </p>\\n  <ul>\\n    <li>URL: the url has not changed. The Web-API knows what lecture to update, because of the id</li>\\n    <li>the data that should be updated</li>\\n    <li>options: the Web-API expects a special header in the storage requirements of HTTP. This header is defined in the\\n      LectureService as the constant <code>httpOptions</code>.</li>\\n  </ul>\\n</div>\\n\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\">\\n  <p>Use the method from the service now to write a <code>save()</code> method in\\n    <b>lecture-details.component.ts</b>.\\n  </p>\\n\\n  <pre class=\\\"language-ts\\\"><code>save(): void &#123;\\n    this.lectureService.updateLecture(this.lecture)\\n      .subscribe(() => this.goBack());\\n&#125;</code></pre>\\n\\n  <p>Afterwards you can add the button in <b>lecture-details.component.html</b> with the click-event-binding and check\\n    if all input fields are filled.</p>\\n\\n    <pre class=\\\"language-html\\\"><code>&lt;button class=\\\"ui primary button\\\" (click)=\\\"save()\\\"&gt;Save&lt;&#47;button&gt;\\n&lt;p style=\\\"color:red\\\" *ngIf=\\\"!lecture.name || !lecture.room || !lecture.day || !lecture.time.hours || !lecture.time.minutes || !lecture.building || !lecture.floor\\\"&gt;\\n  Please check again, if you filled all input fields correctly!\\n&lt;&#47;p&gt;</code></pre>\\n</div>\\n\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\">\\n  <h4>Add a new Lecture</h4>\\n  <p>First we need a new component for the input form:</p>\\n  <pre class=\\\"language-bash command-line\\\"><code>ng g component lecture-add</code></pre>\\n  <p>Afterwards we copy the input form from lecture-details.component.html and make the neccessary changes.</p>\\n  <p>Every time you see something like <code>[(ngModel)]=\\\"lecture.name\\\"</code> replace\\n    it\\n    with something like\\n    <code>#lectureName</code>.</p>\\n  <p class=\\\"ui info message\\\">\\n    Element Reference: Direct access to a DOM-element. Creates a local variable something that provides access to the\\n    element instance in data-binding and event-binding expressions in the current template. Syntax:<br />\\n    <code>#something</code>\\n  </p>\\n  <p>All of them should look like this example: </p>\\n\\n  <pre class=\\\"language-html\\\"><code>&lt;input #lectureName placeholder=\\\"Name\\\" &#47;&gt;</code></pre>\\n\\n  <p><b>Important:</b> Delete the <code>*ngIf=\\\"lecture\\\"</code> at the beginning!\\n    Otherwise this component won't\\n    display anything.</p>\\n  <p>Call the button below \\\"Add\\\" and delete the function, we need to write one first.\\n  </p>\\n  <p>In a next step add the component to the routing and to the navigation:</p>\\n  <p><b>app-routing.module.ts</b></p>\\n\\n  <pre class=\\\"language-ts\\\"><code>import &#123; LectureAddComponent &#125; from \\\"./lecture-add/lecture-add.component\\\";\\n\\nconst routes: Routes = [\\n    // Other entries, add below:\\n    &#123; path: \\\"lecture-add\\\", component: LectureAddComponent &#125;\\n];</code></pre>\\n\\n  <p><b>app.component.html</b></p>\\n\\n  <pre class=\\\"language-html\\\"><code>&lt;div class=\\\"ui three item menu\\\"&gt;\\n    &lt;!-- Other entries, add below: --&gt;\\n    &lt;a class=\\\"item\\\" routerLink=\\\"/lecture-add\\\" routerLinkActive=\\\"active\\\">\\n      Add\\n    &lt;&#47;a&gt;\\n&lt;&#47;div&gt;</code></pre>\\n\\n  <p>There are also some things we can take over from the details component and the timetable and insert it into\\n    <b>lecture-add.component.ts</b>,\\n    so that it looks like this:</p>\\n<pre class=\\\"language-ts\\\"><code>import &#123; LectureService &#125; from \\\"../shared/lecture.service\\\";\\nimport &#123; Lecture &#125; from \\\"../shared/lecture\\\";\\nimport &#123; Location &#125; from \\\"@angular/common\\\";</code></pre>\\n\\n  <pre class=\\\"language-ts\\\"><code>export class LectureAddComponent implements OnInit &#123;\\n    lectures: Lecture[];\\n\\n    constructor(\\n      private lectureService: LectureService,\\n      private location: Location\\n    ) &#123; &#125;\\n\\n    ngOnInit() &#123;\\n      this.getLectures();\\n    &#125;\\n\\n    getLectures(): void &#123;\\n      this.lectureService.getLectures()\\n        .subscribe(lectures => this.lectures = lectures);\\n    &#125;\\n\\n    goBack(): void &#123;\\n      this.location.back();\\n    &#125;\\n&#125;</code></pre>\\n\\n  <p>Write the <code>addLecture</code> method in the <b>lecture.service.ts</b> now:</p>\\n    <pre class=\\\"language-ts\\\"><code>addLecture(lecture: Lecture): Observable&lt;Lecture&gt; &#123;\\n      return this.http.post&lt;Lecture&gt;(this.lectureUrl, lecture, httpOptions)\\n        .pipe(catchError(this.handleError&lt;Lecture&gt;(\\\"addLecture\\\"))\\n      );\\n&#125;</code></pre>\\n\\n  <p class=\\\"ui info message\\\"><code>post</code>\\n    <br/>Often POST is used to create a\\n    new entity, but it can also be used to update an entity.\\n  </p>\\n  <p>We can use it again in the <b>lecture-add.component.ts</b>:</p>\\n\\n  <pre class=\\\"language-ts\\\"><code>add(name: string, building: string, floor: string, room: string, day: string, hours: number, minutes: number, department?: string): void &#123;\\n    let time = &#123;hours, minutes&#125;;\\n    if(!name || !room || !day || !time || !building || !floor) &#123;\\n      this.fieldsEmpty = true;\\n      return;\\n    &#125;\\n\\n    this.lectureService.addLecture(&#123;name, building, floor, room, day, time, department&#125; as Lecture)\\n      .subscribe(lecture => &#123;\\n        this.lectures.push(lecture);\\n        this.goBack();\\n      &#125;);\\n&#125;</code></pre>\\n\\n  <p>We will get name, room and the other values from the form we have in the HTML. We will combine minutes and hours\\n    to a time object, because <code>Lecture</code> expects a <code\\n     >Time</code> object. With the if statement we check\\n    if one of them has no value. This can happen if the user didn't type a name for example. therefore we need this\\n    <code>Boolean</code>. We are going to ask in the HTML later if it's true or false\\n    and print a message to complete the\\n    form. But first we need to initialise it in <b>lecture-add.component.ts</b>.</p>\\n\\n    <pre class=\\\"language-ts\\\"><code>fieldsEmpty: boolean = false;</code></pre>\\n\\n  <p>The rest of the function you should already recognize. We use the function from the service and subscribe it. With\\n    <code>push</code> we add it to the array.</p>\\n  <p>Last step is to complete the <b>lecture-add.component.html</b>.</p>\\n\\n  <pre class=\\\"language-html\\\"><code>&lt;button class=\\\"ui primary button\\\" (click)=\\\"add(\\n    lectureName.value,\\n    lectureBuilding.value,\\n    lectureFloor.value,\\n    lectureRoom.value,\\n    lectureDay.value,\\n    lectureHours.value,\\n    lectureMinutes.value,\\n    lectureDepartment.value)\\\"&gt;Add&lt;&#47;button&gt;\\n  \\n&lt;p style=\\\"color:red\\\" *ngIf=\\\"fieldsEmpty===true\\\"&gt;\\n    Please check again, if you filled all input fields correctly!&lt;&#47;p&gt;\\n  \\n&lt;button class=\\\"ui button\\\" (click)=\\\"goBack()\\\"&gt;Go Back&lt;&#47;button&gt;</code></pre>\\n\\n</div>\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\">\\n  <h4>Delete Lectures</h4>\\n  <p>Same procedure again. Prepare a function in <b>lecture-service.ts</b>.</p>\\n\\n  <pre class=\\\"language-ts\\\"><code>deleteLecture(lecture: Lecture | number): Observable&lt;Lecture&gt; &#123;\\n    const id = typeof lecture === \\\"number\\\" ? lecture : lecture.id;\\n    const url = `$&#123;this.lectureUrl&#125;/$&#123;id&#125;`;\\n    return this.http.delete&lt;Lecture&gt;(url, httpOptions)\\n      .pipe(catchError(this.handleError&lt;Lecture&gt;(\\\"deleteLecture\\\"))\\n    );\\n&#125;</code></pre>\\n\\n  <p>Use it in <b>timetable.component.ts</b>:</p>\\n\\n  <pre class=\\\"language-ts\\\"><code>delete(lecture: Lecture): void &#123;\\n    this.lectures = this.lectures.filter(l => l !== lecture);\\n    this.lectureService.deleteLecture(lecture).subscribe();\\n&#125;</code></pre>\\n\\n  <p>And there should be a function to delete all lectures with one click:</p>\\n\\n  <pre class=\\\"language-ts\\\"><code>deleteAll(): void &#123;\\n    for(let lecture of this.lectures) &#123;\\n      this.delete(lecture);\\n    &#125;\\n&#125;</code></pre>\\n\\n  <p>Since we provided the functions, we can add them to new buttons now. We just need to keep them in a\\n    <code>div</code>\\n    to check if the <code>lectures</code> already have data, otherwise we will have a\\n    timing problem at this point.</p>\\n\\n    <pre class=\\\"language-html\\\"><code>&lt;div *ngIf=\\\"lectures\\\"&gt;\\n    &lt;button class=\\\"ui primary button\\\" routerLink=\\\"&#47;\\n      lecture-add\\\"&gt;Add Lecture&lt;&#47;button&gt;\\n    &lt;button class=\\\"ui button\\\" (click)=\\\"deleteAll()\\\" *ngIf=\\\"lectures.length&gt;0\\\"&gt;\\n      Delete All&lt;&#47;button&gt;\\n    &lt;div *ngIf=\\\"lectures.length&gt;0\\\" style=\\\"padding: 15px;\\\"&gt;\\n      &lt;div class=\\\"ui middle aligned divided list\\\"&gt;\\n        &lt;div *ngFor=\\\"let l of lectures\\\" class=\\\"item\\\"&gt;\\n          &lt;a class=\\\"app-lecture-item item\\\" [lecture]=\\\"l\\\"\\n            routerLink=\\\"&#47;lecture-details&#47;<span>{{</span>l.id<span>}}</span> style=\\\"margin: 10px; padding:10px\\\"&gt;&lt;&#47;a&gt;\\n          &lt;button (click)=\\\"delete(l)\\\" class=\\\"ui button\\\"&gt;Delete&lt;&#47;button&gt;\\n        &lt;&#47;div&gt;\\n      &lt;&#47;div&gt;\\n    &lt;&#47;div&gt;\\n  \\n    &lt;div *ngIf=\\\"lectures.length==0\\\" style=\\\"padding: 15px;\\\"&gt;\\n      &lt;p&gt;No Items in the Timetable!&lt;&#47;p&gt;\\n    &lt;&#47;div&gt;\\n&lt;&#47;div&gt;</code></pre>\\n\\n  <p>Now that we have all functions which we wanted to edit the timetable, we are ready to finalize the application. </p>\\n\\n  <h4>Visualization of the Construction:</h4>\\n  <p><img class=\\\"ui image big centered\\\" src=\\\"assets/img/App-Building-9.png\\\"></p>\\n  <div class=\\\"ui success message\\\">\\n    <h4>Summary</h4>\\n    <ul>\\n      <li>You learned about http, http-module and observables.</li>\\n      <li>You added all dependencies to use HTTP.</li>\\n      <li>You refactored the service to load data from a web API.</li>\\n      <li>You configured the In-Memory Web API.</li>\\n      <li>You learned about the methods <code>post()</code>, <code>put()</code> and <code>delete()</code>\\n        and applied them.</li>\\n      <li>You added the functions add, edit, delete and delete all to the application.</li>\\n    </ul>\\n  </div>\\n  <iframe style=\\\"margin-top:20px; margin-bottom:20px; width:100%; height: 500px\\\"\\n    src=\\\"https://stackblitz.com/edit/wheretogo-step-7?embed=1&file=src/app/timetable/timetable.component.ts&hideNavigation=1\\\"></iframe>\\n\\n<h3 id=\\\"toc_further_references\\\">Further references</h3>\\n<div class=\\\"ui warning message\\\">\\n    <p>Official documentation:</p>\\n    <ul>\\n    <li>Angular: <a href=\\\"https://angular.io/guide/http\\\" target=\\\"_blank\\\">HttpClient</a></li>\\n    </ul>\\n    <p>Advanced concepts:</p>\\n    <ul>\\n        <li>Wikipedia: <a href=\\\"https://en.wikipedia.org/wiki/Create,_read,_update_and_delete\\\" target=\\\"_blank\\\">CRUD</a></li>\\n        <li>Wikipedia: <a href=\\\"https://en.wikipedia.org/wiki/Representational_state_transfer\\\" target=\\\"_blank\\\">REST</a></li>\\n    </ul>\\n    <p>REST-Tools:</p>\\n    <ul>\\n        <li><a href=\\\"https://swagger.io/\\\" target=\\\"_blank\\\">Swagger</a></li>\\n        <li><a href=\\\"https://www.getpostman.com/\\\" target=\\\"_blank\\\">Postman</a></li>\\n    </ul>\\n</div>\\n\\n  <div class=\\\"ui center aligned segment\\\" style=\\\"width: 50%; margin: 0 auto\\\">\\n    <h4>Your Progress:</h4>\\n    <mat-progress-bar style=\\\"margin-bottom:20px;\\\" mode=\\\"determinate\\\" value=\\\"85\\\"></mat-progress-bar>\\n  </div>\\n\\n</div>\"","export default \"<h2 id=\\\"headline\\\">Project Overview</h2>\\n<div class=\\\"ui compact menu\\\" id=\\\"header_content\\\">\\n    <div class=\\\"ui simple dropdown item\\\">\\n    Content\\n    <i class=\\\"dropdown icon\\\"></i>\\n    <div class=\\\"menu\\\">\\n      <div class=\\\"item\\\"><a href=\\\"#toc_goals\\\">Goals</a></div>\\n      <div class=\\\"item\\\"><a href=\\\"#toc_task\\\">Task</a></div>\\n      <div class=\\\"item\\\"><a href=\\\"#toc_layout\\\">Layout</a></div>\\n      <div class=\\\"item\\\"><a href=\\\"#toc_outline\\\">Outline</a></div>\\n      <div class=\\\"item\\\"><a href=\\\"#toc_further_references\\\">Further references</a></div>\\n    </div>\\n    </div>\\n</div>\\n\\n<div id=\\\"start_content\\\">\\n  <h3 id=\\\"toc_goals\\\">What am I able to do after this Tutorial?</h3>\\n  <p>Probably the most interesting question. Afterwards you should have a solid grasp about the following concepts in Angular:</p>\\n  <ul>\\n    <li>Create an application with reusable <a href=\\\"https://angular.io/guide/glossary#component\\\" target=\\\"_blank\\\">components</a>.</li>\\n    <li>Show a list of data items by using built-in Angular <a href=\\\"https://angular.io/guide/glossary#directive\\\" target=\\\"_blank\\\">directives</a>.</li>\\n    <li>Use directives to show and hide items.</li>\\n    <li>Create, read, update and delete data blocks.</li>\\n    <li>Create <a href=\\\"https://angular.io/guide/glossary#template-driven-forms\\\" target=\\\"_blank\\\">forms</a> to submit user input.</li>\\n    <li>Use one-way and two-way data <a href=\\\"https://angular.io/guide/glossary#binding\\\" target=\\\"_blank\\\">binding</a> to synchronize views with the backend logic.</li>\\n    <li>Bind methods to events, like a button click.</li>\\n    <li>Use <a href=\\\"https://angular.io/guide/glossary#router\\\" target=\\\"_blank\\\">routing</a> to navigate through components and their <a href=\\\"https://angular.io/guide/glossary#view\\\" target=\\\"_blank\\\">views</a>.</li>\\n    <li>Format data by using <a href=\\\"https://angular.io/guide/glossary#pipe\\\" target=\\\"_blank\\\">pipes</a>.</li>\\n    <li>Use a <a href=\\\"https://angular.io/guide/glossary#service\\\" target=\\\"_blank\\\">service</a> to encapsulate your business logic and functionality.</li>\\n  </ul>\\n</div>\\n\\n<div>\\n  <h3 id=\\\"toc_task\\\">What is this project about?</h3>\\n  <p>Every student might know the problem. It's a new semester, you have a lot of lectures and you never know which room to go next.\\n  Wouldn't it be nice to have an app that shows you where to go at first sight by just opening it?</p>\\n  <div class=\\\"ui info message\\\">\\n    <h5>User Story</h5>\\n    <p>As a <strong>student</strong><br />\\n      I want to <strong>have a dashboard that shows me the room of my next upcoming lecture</strong>, <br />\\n      to <strong>see where to go next at first sight.</strong></p>\\n  </div>\\n  <p>So this is basically the whole idea. On the start page we will display the next lecture of the day.<br>\\n  We used the format of a user story as it best describes the requirements and wishes from the user's point of view. This approach is common in the software development process to gather the user's expectation apart from any technical detail.<br>\\n  Following from that, we will have to manage the lecture data backlog.\\n  It will be possible to view all lectures in a timetable, to create new ones, update existing lectures or delete them.\\n  </p>\\n\\n  <h3 id=\\\"toc_layout\\\">How should this app look like?</h3>\\n  <p>When you start the app you will see the next lecture you have to go to on the \\\"Home-Screen\\\". Above the Home-Screen you can find the navigation bar. There, it is possible to go back to the Home-Screen immediately at all times through clicking <em>&gt; Home</em>.</p>\\n  <img class=\\\"ui centered large image\\\" src=\\\"assets/img/Home.png\\\">\\n\\n  <p>When you click on <em>&gt; Timetable</em> you will get to the list of lectures you have. Here you can see that every lecture can be deleted (<em>&gt; Delete</em>).\\n  You can also delete all lectures with one click (<em>&gt; Delete All</em>). Furthermore you can click the button <em>&gt; Add</em> to create a new lecture entry.\\n  With a click on one lecture you will get to the details of this specific lecture and you can change them.\\n  </p>\\n  <img class=\\\"ui centered large image\\\" src=\\\"assets/img/Timetable.png\\\">\\n\\n  <p>So here you can change some details and save them (<em>&gt; Save</em>). Then you go back to the Timetable and see the updated list of\\n    lectures (<em>&gt; Go Back</em>).</p>\\n  <img class=\\\"ui centered large image\\\" src=\\\"assets/img/Details.png\\\">\\n\\n  <p>The last point in the menu is <em>&gt; Add</em>. From there, or with the button <em>&gt; Add Lecture</em> in the <em>&gt; Timetable</em> view you can get to the <em>&gt; Add</em> view.\\n  There you can add a totally new lecture by making some input and choosing options from the drop-down menues.</p>\\n  <img class=\\\"ui centered large image\\\" src=\\\"assets/img/Add.png\\\">\\n  \\n  <p>Once again we used a proofen method from the software development tool box: A wireframe. The wireframe enables us to have a early visual prototype of our conceptual design and to reach a common understanding about the fundamental elements on the web page.</p>\\n</div>\\n\\n<h3 id=\\\"toc_outline\\\">What steps follow to proceed?</h3>\\n<p>You will learn the basic concepts of Angular. For every concept like components, routing, service and so on, you will have an own chapter with theoretical parts (<span class=\\\"ui message\\\" style=\\\"padding: 2px\\\">light-grey background</span>) and practical parts (instructions on white background). \\nEvery chapter will bring you closer to the introduced app.\\nAt the beginning of every chapter you will find a user story (<span class=\\\"ui info message\\\" style=\\\"padding: 2px\\\">light-blue background</span>) about what you want to achieve and at the end of every chapter you will find the list of things you've learned (<span class=\\\"ui success message\\\" style=\\\"padding: 2px\\\">light-green background</span>), the visualization of the components and how they are arranged, the current code and how it looks.</p>\\n\\n  <div class=\\\"ui four column grid\\\">\\n    <div class=\\\"column\\\">\\n      <div class=\\\"ui fluid image\\\">\\n        <div class=\\\"ui black ribbon label\\\">\\n          Theory\\n        </div>\\n        <img src=\\\"assets/img/Text-Theory.png\\\">\\n      </div>\\n    </div>\\n    <div class=\\\"column\\\">\\n      <div class=\\\"ui fluid image\\\">\\n        <div class=\\\"ui black ribbon label\\\">\\n          Instructions\\n        </div>\\n        <img src=\\\"assets/img/Text-Instructions.png\\\">\\n      </div>\\n    </div>\\n    <div class=\\\"column\\\">\\n      <div class=\\\"ui fluid image\\\">\\n        <div class=\\\"ui black ribbon label\\\">\\n          User Story\\n        </div>\\n        <img src=\\\"assets/img/Text-User-Story.png\\\">\\n      </div>\\n    </div>\\n    <div class=\\\"column\\\">\\n      <div class=\\\"ui fluid image\\\">\\n        <div class=\\\"ui black ribbon label\\\">\\n          Summary\\n        </div>\\n        <img src=\\\"assets/img/Text-Summary.png\\\">\\n      </div>\\n    </div>\\n  </div>\\n  <p>The current code is displayed in an embedded online code editor named <a href=\\\"https://stackblitz.com\\\" target=\\\"_blank\\\">Stackblitz</a>.\\n    At the end of every chapter you can explore the code of the whole project in this online editor.</p>\\n  <ol>\\n    <li>With \\\"open in a new tab\\\" you can open the Stackblitz editor in a new tab.</li>\\n    <li>This is the tab card of the currently opened class or file in the editor.</li>\\n    <li>With a click on this icon you get the file structure of the project and you can open all other files in the embedded editor.</li>\\n    <li>You can switch the displayed content in the embedded code editor. You can display editor and preview side by side or only the editor or only the preview.</li>\\n    <li>You can search in the whole project. You will get a search bar when clicking on the magnifier icon.</li>\\n  </ol>\\n    <img style=\\\"margin-bottom:15px; width: 80%;\\\" class=\\\"ui centered image\\\" src=\\\"assets/img/Stackblitz.png\\\">\\n    <p>Let me summarize: you can use the embedded editor like every code editor you know. It is based on Visual Studio Code. You can make changes\\n      and you will see the results immediately or you can just look through the code. None of your changes are permanent, so play with the code as you like.\\n    </p>\\n\\n<div>\\n  <h5>Finished App</h5>\\n  <p>Feel free to try it out:</p>\\n  <iframe style=\\\"width:100%; height: 750px;\\\"\\n    src=\\\"https://stackblitz.com/edit/wheretogo-step-8?embed=1&file=src/app/app.component.ts&hideExplorer=1&hideNavigation=1&view=preview\\\"></iframe>\\n</div>\\n\\n<h3 id=\\\"toc_further_references\\\">Further references</h3>\\n<div class=\\\"ui warning message\\\">\\n    <ul>\\n      <li><a href=\\\"https://en.wikipedia.org/wiki/Requirement\\\" target=\\\"_blank\\\">Requirement</a></li>\\n      <li><a href=\\\"https://en.wikipedia.org/wiki/Software_prototyping\\\" target=\\\"_blank\\\">Software prototyping</a></li>\\n      <li><a href=\\\"https://en.wikipedia.org/wiki/Website_wireframe\\\" target=\\\"_blank\\\">Website wireframe</a></li>\\n      <li><a href=\\\"https://en.wikipedia.org/wiki/User_story\\\" target=\\\"_blank\\\">User story</a></li>\\n      <li><a href=\\\"https://angularplayground.it/\\\" target=\\\"_blank\\\">Angular Playground</a>: An open-source tool for building Angular components, directives and pipes in isolation</li>\\n      <li><a href=\\\"https://angular.io/start\\\" target=\\\"_blank\\\">Getting Started with Angular: Your First App</a></li>\\n    </ul>\\n</div>\"","export default \"<h2>Reusable Components</h2>\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\" class=\\\"ui info message\\\">\\n  <h5>User Story</h5>\\n  <p>As a <b>programer</b><br />\\n    I want to <b>have the details view seperated from the list</b>, <br />\\n    to <b> make it reusable</b>.</p>\\n</div>\\n<div *ngIf=\\\"praxis\\\">\\n  <h4>Generate Details Component</h4>\\n  <p>The lecture details should be reusable, that's why they will have an extra component from now on. Just cut out the\\n    HTML code about the details from <b>timetable.component.html</b>. It is the whole ui form. Generate the component\\n    and paste it in <b>lecture-details.component.html</b>.</p>\\n<pre class=\\\"command-line language-bash\\\"><code>ng g component lecture-details</code></pre>\\n  <p>If we want to use the details component not only for a selected item but also for every lecture item, we need to\\n    change <code>selectedLecture</code> to <code\\n     >lecture</code> again.</p>\\n\\n  <p>The lecture property in <b>lecture-details.component.ts</b> must be an input property which is commented on by\\n    the\\n    <code>@Input()</code>-decorator, as it binds the external <code\\n     >LectureItemComponent</code> to it.</p>\\n      <p>Insert this right above the empty constructor:</p>\\n\\n    <pre class=\\\"language-ts\\\"><code>@Input() lecture: Lecture;</code></pre>\\n\\n  <p>This results in making these imports:</p>\\n    <pre class=\\\"language-ts\\\"><code>import &#123; Component, OnInit, Input &#125; from \\\"@angular/core\\\";\\nimport &#123; Lecture &#125; from \\\"../shared/lecture\\\";</code></pre>\\n\\n  <p>And put this in the <b>timetable.component.hmtl</b>:</p>\\n\\n  <pre class=\\\"language-html\\\"><code>&lt;app-lecture-details [lecture]=\\\"selectedLecture\\\"&gt;&lt;&#47;app-lecture-details&gt;</code></pre>\\n</div>\\n\\n<div *ngIf=\\\"theorySmall\\\" style=\\\"margin-top: 20px;\\\" class=\\\"ui message\\\">\\n  <p>If you have components that have a main and a detail view, you should seperate them for better maintenance. In this\\n    expamle with the list of lectures, the component receives a lecture object through its lecture property and\\n    indicates it. Now every time the user selects a lecture from the list, it will be displayed in the details\\n    component.</p>\\n  <p>With the selector <code>app-lecture-details</code>\\n    the component can be displayed.</p>\\n  <p><code>[lecture]=\\\"selectedLecture\\\"</code> creates a\\n    one-way-binding from the <code\\n     >selectedLecture</code> property\\n    of the <code>TimetableComponent</code> to the <code\\n     >lecture</code> property of the target element,\\n    which is\\n    assigned to the <code>lecture</code> property of the\\n    <code>LectureDetailsComponent</code>.</p>\\n  <p>If the user clicks on an item of that list, the <code\\n     >selectedLecture</code> changes. This updates the\\n    <code>lecture</code>\\n    because of the property-binding and the <code\\n     >LectureDetailsComponent</code> displayes the chosen object.</p>\\n  <p>In this section we only made \\\"inside changes\\\". That means that you can't see any difference in the user interface.\\n    We\\n    seperated the list and the details-view. Now a development of both components is possible, without any need to\\n    change the other one. The details-component is now reusable.</p>\\n</div>\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\">\\n  <h4>Visualization of the Construction:</h4>\\n  <p><img class=\\\"ui image large centered\\\" src=\\\"assets/img/App-Building-6.png\\\"></p>\\n  <div class=\\\"ui success message\\\">\\n    <h4>Summary</h4>\\n    <ul>\\n      <li>You generated a reusable, seperate component for the details-view.</li>\\n      <li>You used the <code>@Input</code>-decorator to make the property available for\\n        the property binding.</li>\\n      <li>You made the property binding for the selected lecture.</li>\\n    </ul>\\n  </div>\\n  <iframe style=\\\"margin-top:20px; margin-bottom:20px; width:100%; height: 500px\\\"\\n    src=\\\"https://stackblitz.com/edit/wheretogo-step-4?embed=1&file=src/app/lecture-details/lecture-details.component.html&hideNavigation=1\\\"></iframe>\\n\\n  <div class=\\\"ui center aligned segment\\\" style=\\\"width: 50%; margin: 0 auto\\\">\\n    <h4>Your Progress:</h4>\\n    <mat-progress-bar style=\\\"margin-bottom:20px;\\\" mode=\\\"determinate\\\" value=\\\"40\\\"></mat-progress-bar>\\n  </div>\\n\\n</div>\"","export default \"<h2>Routing</h2>\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\" class=\\\"ui info message\\\">\\n  <h5>User Story</h5>\\n  <p>As a <b>user</b><br />\\n    I want to <b>navigate through the views</b>, <br />\\n    to <b> have the start page and the timetable accessable via navigation bar and the details via click on a lecture in the timetable</b>.</p>\\n</div>\\n<div *ngIf=\\\"theoryLarge\\\" style=\\\"margin-bottom: 20px;\\\" class=\\\"ui message\\\">\\n  <h4>What is Routing?</h4>\\n  <p>Angular provides something called <code>Router</code> for the navigation from one\\n    view to another. The\\n    <code>Router</code> is loading different parts of the application. All views are\\n    available for the user via URLs.\\n    We will use clickable links for the navigation. These could be navigation items or list items. Angular is for\\n    developing Single-Page-Applications. That means that the application is just one single HTML page and the content is\\n    loaded asynchronously. The loading is usually no \\\"hard\\\" reloading. Things like linking the components or going forward\\n    and backwards are challenging now, but HTML5 History API brings the technical basic for this. It's possible to\\n    change the browser history via JavaScript without reloading the web page. It looks like a normal web page but it's\\n    a single page. The <code>Router</code> interacts with this HTML5 History API and\\n    uses URLs to identify the\\n    individual states. You will need three steps to get there:<br />\\n  </p>\\n  <ul>\\n    <li>Assign an URL to a component.</li>\\n    <li>Import the Routing-Module into the application.</li>\\n    <li>Set where the components should be loaded into the template.</li>\\n  </ul>\\n</div>\\n\\n<h4>Routing Module</h4>\\n<div *ngIf=\\\"praxis\\\">\\n  <p>If we don't want to arrange the components one below the other, we need a navigation logic to route between\\n    components. If you answered the question about routing during the creation of the project with (Y),\\n    you will already have the file <b>app-routing.module.ts</b> in your project folder. If not, generate it now:</p>\\n  <pre class=\\\"language-bash command-line\\\"><code\\n     >ng generate module app-routing --flat --module=app</code></pre>\\n</div>\\n\\n<div *ngIf=\\\"theorySmall\\\" style=\\\"margin-top: 20px;\\\" class=\\\"ui message\\\">\\n  <p>Routes tell the router which view to display when the user clicks on a link or inserts an URL in the address bar of\\n    the browser.\\n    A typical Angular route has two properties:\\n  </p>\\n  <ul>\\n    <li><code>path</code>: a string, that matches with the URL in the address bar of the\\n      browser</li>\\n    <li><code>component</code>: the component that the router should create when\\n      navigating to this route</li>\\n  </ul>\\n</div>\\n\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\">\\n  <p>First we want to have a default route. When the browser is reloading, this route is displayed by default. So we\\n    are going to type this into the <b>app-routing.module.ts</b> into <code\\n     >const routes: Routes = []</code>:</p>\\n    <pre class=\\\"language-ts\\\"><code>&#123; path: \\\"\\\", redirectTo: \\\"/where-to-go\\\", pathMatch: \\\"full\\\" &#125;,</code></pre>\\n\\n  <p>Also insert the other needed routes at the same location:</p>\\n\\n  <pre class=\\\"language-ts\\\"><code>&#123; path: \\\"timetable\\\", component: TimetableComponent &#125;,\\n&#123; path: \\\"where-to-go\\\", component: WhereToGoComponent &#125;</code></pre>\\n\\n  <p>For that, we need to import <code>TimetableComponent</code> and <code\\n     >WhereToGoComponent</code> now.</p>\\n\\n    <pre class=\\\"language-ts\\\"><code>import &#123; TimetableComponent &#125; from \\\"./timetable/timetable.component\\\";\\nimport &#123; WhereToGoComponent &#125; from \\\"./where-to-go/where-to-go.component\\\";</code></pre>\\n</div>\\n\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\">\\n  <h4>Create a Navigation</h4>\\n  <p>Next we can delete the <code>&lt;app-where-to-go&gt;</code> and <code\\n     >&lt;app-timetable&gt;</code> from the\\n    <b>app.component.html</b>\\n    and just leave the title and the <code>&lt;router-outlet&gt;</code>. These\\n    components will only be parts of the route\\n    now.</p>\\n  <p>The <code>&lt;router-outlet&gt;</code> indicates that the routed views are\\n    displayed here.</p>\\n  <p>Now we want to create the navigation. Right now we have the start page ('where-to-go') and the timetable. We tell\\n    the router with the <code>routerLink</code> which component to show and with the\\n    directive\\n    <code>routerLinkActive</code>\\n    the active item in the navigation will be highlighted. Our code in the <b>app.component.html</b> should look like\\n    this:</p>\\n\\n    <pre class=\\\"language-html\\\"><code>&lt;div style=\\\"text-align:center\\\"&gt;\\n  &lt;h1 class=\\\"ui header\\\" style=\\\"margin: 30px\\\"&gt;\\n    Welcome to <span>{{</span> title <span>}}</span>!&lt;&#47;h1&gt;\\n  &lt;div class=\\\"ui two item menu\\\"&gt;\\n    &lt;a class=\\\"item\\\" routerLink=\\\"&#47;where-to-go\\\" routerLinkActive=\\\"active\\\"&gt;\\n      Home&lt;&#47;a&gt;\\n    &lt;a class=\\\"item\\\" routerLink=\\\"&#47;timetable\\\" routerLinkActive=\\\"active\\\"&gt;\\n      Timetable&lt;&#47;a&gt;\\n  &lt;&#47;div&gt;\\n  &lt;router-outlet&gt;&lt;&#47;router-outlet&gt;\\n&lt;&#47;div&gt;</code></pre>\\n</div>\\n\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\">\\n  <h4>Visualization of the Construction:</h4>\\n  <p><img class=\\\"ui image large centered\\\" src=\\\"assets/img/App-Building-7.png\\\"></p>\\n</div>\\n<h4>Details in own View</h4>\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\">\\n\\n  <p>The lecture details should be in an own view now, not beneath the timetable. Delete\\n    <code\\n     >&lt;app-lecture-details [lecture]=\\\"selectedLecture\\\"&gt;&lt;/app-lecture-details&gt;</code>\\n    from the <b>timetable.component.html</b>. We need an own route for them in the <b>app-routing.module.ts</b>:</p>\\n\\n    <pre class=\\\"language-ts\\\"><code>&#123; path: \\\"lecture-details/:id\\\", component: LectureDetailsComponent &#125;</code></pre>\\n\\n  <p>For that, we need to import <code>LectureDetailsComponent</code> now.</p>\\n\\n  <pre class=\\\"language-ts\\\"><code>import &#123; LectureDetailsComponent &#125; from \\\"./lecture-details/lecture-details.component\\\";</code></pre>\\n\\n  <p>And in the <b>timetable.component.html</b> where we iterate with a for-loop through the lectures we insert the\\n    routerlink for the lecture details with the id of the clicked one:</p>\\n\\n    <pre class=\\\"language-html\\\"><code>&lt;a class=\\\"app-lecture-item item\\\" [lecture]=\\\"l\\\" routerLink=\\\"/lecture-details/<span>{{</span>l.id<span>}}</span> style=\\\"margin: 10px; padding: 10px\\\"&gt;&lt;&#47;a&gt;</code></pre>\\n\\n  <p>When you click on the first lecture you will see this in the address bar of your browser:\\n    <img style=\\\"margin-bottom:15px;\\\" class=\\\"ui centered medium image\\\" src=\\\"assets/img/Browser-Navigates-To-Id.png\\\">\\n    But you won't see the details view. First we need to change some things. Delete <code\\n     >selectedLecture</code> and\\n    the <code>onSelect()</code> method from the <b>timetable.component.ts</b>. Because\\n    of the routing you won't need\\n    it anymore.\\n  </p>\\n</div>\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\">\\n  <p>Before that, the parent <code>LectureItemComponent</code> property (<code\\n     >lecture</code>) sets the\\n    <code>LectureDetailsComponent</code>\\n    property (<code>lecture</code>), and the <code\\n     >LectureDetailsComponent</code> component displays the lecture. Now\\n    the router creates the <code>LectureDetailsComponent</code> as a response to an URL\\n    like /lecture-detail/1.</p>\\n</div>\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\">\\n  <p>In <b>lecture-details.component.ts</b> we need to import the following and insert it as parameters in the\\n    constructor:</p>\\n\\n    <pre class=\\\"language-ts\\\"><code>import &#123; ActivatedRoute &#125; from \\\"@angular/router\\\";\\nimport &#123; LectureService &#125; from \\\"../shared/lecture.service\\\";\\nimport &#123; Location &#125; from \\\"@angular/common\\\";</code></pre>\\n\\n<pre class=\\\"language-ts\\\"><code>constructor(\\n  private route: ActivatedRoute,\\n  private lectureService: LectureService,\\n  private location: Location\\n) &#123; \\n&#125;</code></pre>\\n\\n</div>\\n<div *ngIf=\\\"theorySmall\\\" style=\\\"margin-top: 20px;\\\" class=\\\"ui message\\\">\\n  <p>You will need the following things to pick a lecture by its id.</p>\\n  <p>The <code>ActivatedRoute</code> contains information about the route to this\\n    instance of the\\n    <code>LectureDetailsComponent</code>.\\n    This component is interested in the route's bag of parameters extracted from the URL. The\\n    <code>LectureService</code>\\n    gets the lecture data from the server and here it's used to display the lecture view. The <code\\n     >Location</code> is\\n    an Angular service to interact with the browser. We are going to use this for a function to go back to the last\\n    location.</p>\\n</div>\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\">\\n  <p>In the <b>lecture-details.component.ts</b> we want to have a method that gets us one lecture by its ID and since\\n    we use a service class we need to define the method in <b>lecture.service.ts</b>:</p>\\n\\n    <pre class=\\\"language-ts\\\"><code>getLecture(id: number): Observable&lt;Lecture&gt; &#123;\\n    return of(LECTURES.find(lecture => lecture.id === id));\\n&#125;</code></pre>\\n\\n  <p>Now we can use it in <b>lecture-details.component.ts</b> like this:</p>\\n\\n  <pre class =\\\"language-ts\\\"><code>getLecture(): void &#123;\\n    const id = +this.route.snapshot.paramMap.get(\\\"id\\\");\\n    this.lectureService.getLecture(id)\\n    .subscribe(lecture => this.lecture = lecture);\\n&#125;</code></pre>\\n\\n</div>\\n<div *ngIf=\\\"theorySmall\\\" style=\\\"margin-top: 20px;\\\" class=\\\"ui message\\\">\\n  <p><code>route.snapshot</code> is a static image of the route information, taken shortly\\n    after the component was created.\\n    <code>paramMap</code> is a dictionary of route parameter values extracted from the\\n    URL. The <code>id</code> key\\n    returns the id of the lecture to fetch. As route parameters are strings the + JavaScript-operator converts them to\\n    a number, because the lecture id is one.</p>\\n</div>\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\">\\n  <p>In the next step we just need to add<code> void </code>as return parameter of the\\n    lifecycle-hook\\n    <code>ngOnInit()</code>\\n    in <b>lecture-details.component.ts</b> and call the <code>getLecture()</code>\\n    method:</p>\\n    \\n    <pre class=\\\"language-ts\\\"><code>ngOnInit(): void &#123;\\nthis.getLecture();\\n&#125;</code></pre>\\n\\n  <h4>Go Back Button</h4>\\n  <p>As already planned, in addition to the navigation we want to have a button that brings us back to the component we\\n    visited before. That's what we needed the <code>location</code> for. Add to\\n    <b>lecture-details.component.ts</b>:</p>\\n\\n    <pre class=\\\"language-ts\\\"><code>goBack(): void &#123;\\n    this.location.back();\\n&#125;</code></pre>\\n\\n  <p>Last step is to add a button for this and bind it to the method in <b>lecture-details.component.html</b>.</p>\\n\\n  <pre class=\\\"language-html\\\"><code>&lt;button class=\\\"ui button\\\" (click)=\\\"goBack()\\\"&gt;Go Back&lt;&#47;button&gt;</code></pre>\\n</div>\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\">\\n  <h4>Visualization of the Construction:</h4>\\n  <p><img class=\\\"ui image big centered\\\" src=\\\"assets/img/App-Building-8.png\\\"></p>\\n  <div class=\\\"ui success message\\\">\\n    <h4>Summary</h4>\\n    <ul>\\n      <li>You learned about routing.</li>\\n      <li>You added the Angular router to make a proper navigation.</li>\\n      <li>You added a navigation to the <code >AppComponent</code>.</li>\\n      <li>You defined paths, a default path and paths including parameters like the lecture id.</li>\\n      <li>The details component got its own view.</li>\\n      <li>You added there a go back function and button to go back to the last location in the browser history.</li>\\n    </ul>\\n  </div>\\n  <iframe style=\\\"margin-top:20px; margin-bottom:20px; width:100%; height: 500px\\\"\\n    src=\\\"https://stackblitz.com/edit/wheretogo-step-6?embed=1&file=src/app/lecture-details/lecture-details.component.ts&hideNavigation=1\\\"></iframe>\\n\\n<h3 id=\\\"toc_further_references\\\">Further references</h3>\\n<div class=\\\"ui warning message\\\">\\n    <p>Official documentation:</p>\\n    <ul>\\n    <li>Angular: <a href=\\\"https://angular.io/guide/router\\\" target=\\\"_blank\\\">Routing & navigation</a></li>\\n    </ul>\\n</div>\\n\\n    <div class=\\\"ui center aligned segment\\\" style=\\\"width: 50%; margin: 0 auto\\\">\\n      <h4>Your Progress:</h4>\\n      <mat-progress-bar style=\\\"margin-bottom:20px;\\\" mode=\\\"determinate\\\" value=\\\"65\\\"></mat-progress-bar>\\n    </div>\\n</div>\"","export default \"<h2>Services</h2>\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\" class=\\\"ui info message\\\">\\n  <h5>User Story</h5>\\n  <p>As a <b>programer</b><br />\\n    I want to <b>use a service</b>, <br />\\n    to <b> not manage my data in the components anymore</b>.</p>\\n</div>\\n<div *ngIf=\\\"theoryLarge\\\" style=\\\"margin-bottom: 20px;\\\" class=\\\"ui message\\\">\\n  <h4>What is a Service?</h4>\\n  <p>Every good application should have its logic in a service not in the components. A service is one of the main\\n    concepts of Angular. If you are already experienced with object-orientated programing languages, you may know the\\n    MVC model. The service is like the controller. A service is a function or class that provides the functionality for\\n    other functions or classes. It has two main tasks:</p>\\n  <ul>\\n    <li>Encapsulation of the application logic</li>\\n    <li>Save the data, that is needed by one or more components of the application</li>\\n  </ul>\\n  <p>The concept \\\"Inversion of Control (IoC)\\\" and the pattern \\\"Dependency Injection\\\" can help us. If you want to use a\\n    class at any point in the application, you could initialise the class at this point. But this solution is confusing\\n    and has high maintenance. For example if you change just little things in the constructor of the class, you might\\n    have to make changes everywhere in your code. This can be avoided by giving the responsibility of generating\\n    dependencies to a higher authority. You are not allowed to use the keyword <code\\n     >new</code> to create a dependency.\\n    You will get the dependencies from a higher authority instead. The responsibility of generating an object is\\n    reversed. IoC can be realised with different patterns, Angular uses dependency injection.\\n  </p>\\n  <p>Angular uses constructor injection: <br />\\n    <code>constructor(myDependency: MyDependencyType) &#123; &#125;</code> <br />\\n    To use a service like this we need to give it the decorator <code\\n     >@Injectable()</code>. Another possibility is to\\n    register the service in the <code>providers</code> array of the <code\\n     >AppModule</code>, but here we will use the\\n    other way.\\n  </p>\\n</div>\\n<h4>Generate a Service</h4>\\n<div *ngIf=\\\"theorySmall\\\" style=\\\"margin-bottom: 20px;\\\" class=\\\"ui message\\\">\\n\\n  <p>At the moment all the data is saved in the components. That is not the way it should be. The job of a component is\\n    to present data, however the direct data access is the job of a service.</p>\\n  <p>In the next step we want to create a <code>LectureService</code> that all other\\n    classes in the application can\\n    use to get\\n    the data of the lectures. We use Angular's dependency injection to inject the service into the\\n    <code>LectureItemComponent</code>.\\n  </p>\\n</div>\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\">\\n  <pre class=\\\"language-bash command-line\\\"><code>ng g service shared/lecture</code></pre>\\n</div>\\n<div *ngIf=\\\"theorySmall\\\" style=\\\"margin-top: 20px;\\\" class=\\\"ui message\\\">\\n  <p>The service class uses the <code>@Injectable()</code>-decorator and therefore\\n    imports <code>Injectable</code>. This\\n    service class now provides an injectable service. The decorator accepts a metadata object for the service.</p>\\n  <p>If you use a service for accessing the data, from now on you can change your implementation without touching the\\n    components.</p>\\n</div>\\n\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\">\\n  <p>We are going to need this function in the class <b>LectureService</b> in <b>lecture.service.ts</b> to get the lecture data. For now we'll still use\\n    the\\n    mock-data.</p>\\n\\n    <pre class=\\\"language-ts\\\"><code>getLectures(): Lecture[] &#123;\\n  return LECTURES;\\n&#125;</code></pre>\\n\\n  <p>Your Visual Studio Code or you should import <code>Lecture</code> and <code\\n     >LECTURES</code> now.</p>\\n\\n     <pre class=\\\"language-ts\\\"><code>import &#123; Lecture &#125; from \\\"../shared/lecture\\\";\\nimport &#123; LECTURES &#125; from \\\"../shared/mock-lectures\\\";</code></pre>\\n\\n</div>\\n<h4>Inject the Service</h4>\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\">\\n  <p>We are going to add a parameter of type <code>LectureService</code> to the\\n    constructor of the\\n    <b>timetable.component.ts</b>:</p>\\n\\n    <pre class=\\\"language-ts\\\"><code>constructor(private lectureService: LectureService) &#123; &#125;</code></pre>\\n</div>\\n<div *ngIf=\\\"theorySmall\\\" style=\\\"margin-top: 20px;\\\" class=\\\"ui message\\\">\\n  <p>This added parameter <code>lectureService</code> also defines a property of the\\n    service class as well as it\\n    identifies it as an injection. With the dependency injection we set the parameter <code\\n     >lectureService</code> to the\\n    singleton instance of the <code>LectureService</code>. The singleton pattern is a\\n    software design pattern which\\n    ensures that exactly one object exists in a class.</p>\\n</div>\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\">\\n  <p>Now replace the <code>lecture</code> propterty in <b>timetable.component.ts</b> and\\n    import the\\n    <code>LectureService</code>\\n    if it wasn't imported automatically by adding the parameter in the constructor before.</p>\\n\\n    <pre class=\\\"language-ts\\\"><code>import &#123; LectureService &#125; from \\\"../shared/lecture.service\\\";\\nimport &#123; Lecture &#125; from \\\"../shared/lecture\\\";</code></pre>\\n\\n<pre class=\\\"language-ts\\\"><code>lectures: Lecture[];</code></pre>\\n\\n  <p>Next we are going to use the method of the service class to get the lectures into our <code\\n     >lecture</code> array.\\n  </p>\\n\\n  <pre class=\\\"language-ts\\\"><code>getLectures(): void &#123;\\n    this.lectures = this.lectureSerivce.getLectures();\\n&#125;</code></pre>\\n\\n  <p>In the lifecycle hook <code>ngOnInit()</code> the method is called and executed\\n    when loading the browser.</p>\\n\\n    <pre class=\\\"language-ts\\\"><code>ngOnInit() &#123;\\n    this.getLectures();\\n&#125;</code></pre>\\n\\n</div>\\n<h4>Observable Data</h4>\\n<div *ngIf=\\\"theorySmall\\\" style=\\\"margin-top: 20px;\\\" class=\\\"ui message\\\">\\n  <p>The service method <code>getLectures()</code> now has a synchronous signature which\\n    means that the service can\\n    fetch data synchronously. This is just working because we fetch mock-data right now. If we have a real app with\\n    real data this won't work at all. Fetching data from a remote server is an asynchronous operation. In the \\\"real\\\"\\n    world the service has to wait for the respond of the server and the method cannot return immediately.</p>\\n</div>\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\">\\n  <p><code>LectureService.getLectures()</code> needs to have an asynchronous signature,\\n    therefore we will return an\\n    <code>Observable</code>.\\n    We need to import in <b>lecture.service.ts</b>:</p>\\n\\n  <pre class=\\\"language-ts\\\"><code>import &#123; Observable, of &#125; from \\\"rxjs\\\";</code></pre>\\n\\n  <p>And replace the method with this code:</p>\\n\\n  <pre class=\\\"language-ts\\\"><code>getLectures(): Observable&lt;Lecture[]&gt; &#123;\\n  return of(LECTURES);\\n&#125;</code></pre>\\n\\n  <p>We also need to replace the method in <b>timetable.component.ts</b> now.</p>\\n\\n  <pre class=\\\"language-ts\\\"><code>getLectures(): void &#123;\\n  this.lectureService.getLectures()\\n  .subscribe(lectures => this.lectures = lectures);\\n&#125;</code></pre>\\n</div>\\n<div *ngIf=\\\"theorySmall\\\" style=\\\"margin-top: 20px;\\\" class=\\\"ui message\\\">\\n  <p><code>Observable.subscribe()</code> makes a huge\\n    difference. Before we had a synchronous assignment of the array\\n    of lectures to the <code>lectures</code> property\\n    and this assignment wanted back the data immediately. Now we wait\\n    for the <code>Observable</code> to return the array\\n    of lectures, even if this happens after only a view minutes. Then\\n    <code>subscribe()</code> passes the emitted array to\\n    the callback, which sets the component's lecture property.\\n    You will learn more about observable data in the chapter <a routerLink=\\\"/http\\\">HTTP</a>.\\n  </p>\\n</div>\\n<div *ngIf=\\\"praxis\\\" style=\\\"margin-top: 20px;\\\">\\n  <h4>Visualization of the Construction:</h4>\\n  (No changes here)\\n  <p><img class=\\\"ui image large centered\\\" src=\\\"assets/img/App-Building-6.png\\\"></p>\\n\\n  <div class=\\\"ui success message\\\">\\n    <h4>Summary</h4>\\n    <ul>\\n      <li>You learned about services.</li>\\n      <li>You generated a service and performed constructor injection.</li>\\n      <li>You made the signature of the methods asynchronous.</li>\\n    </ul>\\n  </div>\\n  <iframe style=\\\"margin-top:20px; margin-bottom:20px; width:100%; height: 500px\\\"\\n    src=\\\"https://stackblitz.com/edit/wheretogo-step-5?embed=1&file=src/app/timetable/timetable.component.ts&hideNavigation=1\\\"></iframe>\\n\\n<h3 id=\\\"toc_further_references\\\">Further references</h3>\\n<div class=\\\"ui warning message\\\">\\n    <p>Official documentation:</p>\\n    <ul>\\n    <li>Angular: <a href=\\\"https://angular.io/guide/architecture-services\\\" target=\\\"_blank\\\">Introduction to services and dependency injection</a></li>\\n    <li>Angular: <a href=\\\"https://angular.io/guide/observables\\\" target=\\\"_blank\\\">Observables</a></li>\\n    <li>Angular: <a href=\\\"https://angular.io/guide/observables-in-angular\\\" target=\\\"_blank\\\">Observables in Angular</a></li>\\n    </ul>\\n    <p>Advanced concepts:</p>\\n    <ul>\\n        <li>Wikipedia: <a href=\\\"https://en.wikipedia.org/wiki/Dependency_injection\\\" target=\\\"_blank\\\">Dependency injection</a></li>\\n        <li>Wikipedia: <a href=\\\"https://en.wikipedia.org/wiki/Reactive_programming\\\" target=\\\"_blank\\\">Reactive programming</a></li>\\n    </ul>\\n</div>\\n\\n  <div class=\\\"ui center aligned segment\\\" style=\\\"width: 50%; margin: 0 auto\\\">\\n    <h4>Your Progress:</h4>\\n    <mat-progress-bar style=\\\"margin-bottom:20px;\\\" mode=\\\"determinate\\\" value=\\\"50\\\"></mat-progress-bar>\\n  </div>\\n</div>\"","export default \"<h2 id=\\\"headline\\\">TypeScript Introduction:</h2>\\n<div class=\\\"ui compact menu\\\" id=\\\"header_content\\\">\\n        <div class=\\\"ui simple dropdown item\\\">\\n        Content\\n        <i class=\\\"dropdown icon\\\"></i>\\n        <div class=\\\"menu\\\">\\n          <div class=\\\"item\\\"><a href=\\\"#toc_general\\\">General usage</a></div>\\n          <div class=\\\"item\\\"><a href=\\\"#toc_basic_types\\\">Basic Types</a></div>\\n          <div class=\\\"item\\\"><a href=\\\"#toc_functions\\\">Functions</a></div>\\n          <div class=\\\"item\\\"><a href=\\\"#toc_classes\\\">Classes</a></div>\\n          <div class=\\\"item\\\"><a href=\\\"#toc_interfaces\\\">Interfaces</a></div>\\n          <div class=\\\"item\\\"><a href=\\\"#toc_decorators\\\">Decorators</a></div>\\n          <div class=\\\"item\\\"><a href=\\\"#toc_further_references\\\">Further references</a></div>\\n        </div>\\n        </div>\\n    </div>\\n    \\n<div class=\\\"language-typescript\\\" id=\\\"start_content\\\">\\n    <p><a href=\\\"https://www.typescriptlang.org/\\\" target=\\\"_blank\\\">TypeScript</a> is an open-source programming language developed by Microsoft. It is a syntactical superset of JavaScript and therefore only expands JavaScript, which means that every JavaScript program is also valid TypeScript and you can write as much JavaScript in your TypeScript document as you want.\\n    </p>\\n    <p>TypeScript is based on <a href=\\\"https://www.ecma-international.org/ecma-262/6.0/index.html\\\" target=\\\"_blank\\\">ECMAScript 6</a> proposals (partly taken over and standardized in JavaScript) and it comes with a much stronger type system, as you may know from programming languages like Java and C#.</p>\\n    <p>Bonus: TypeScript can be transpiled to pure JavaScript and thus enables its use in web frontend development.</p>\\n\\n    <h3 id=\\\"toc_general\\\">1. General usage</h3>\\n    <p>The Angular CLI already installs TypScript for you. Apart from that, normally you install TypeScript once again by using npm:</p>\\n    <pre class=\\\"command-line language-bash\\\" data-user=\\\"user\\\" data-host=\\\"localhost\\\"><code>npm install -g typescript</code></pre>\\n    <p>And check your installed version with:</p>\\n    <pre class=\\\"command-line language-bash\\\" data-user=\\\"user\\\" data-host=\\\"localhost\\\"><code>tsc -v</code></pre>\\n    <p>\\n    If you want to play around with TypeScript apart from Angular you simply write your TypeScript code into a <code class=\\\"language-bash\\\">.ts</code> file and then use the TypeScript compiler <code class=\\\"language-bash\\\">tsc</code> to transpile into pure JavaScript. With the <code class=\\\"language-bash\\\">--target</code> or <code class=\\\"language-bash\\\">-t</code>option to can choose your desired ECMA/JavaScript version.\\n    </p>\\n    <pre class=\\\"command-line language-bash\\\" data-user=\\\"user\\\" data-host=\\\"localhost\\\"><code>tsc &lt;your_ts_file&gt;.ts</code></pre>\\n    Now your ready to run your generated JavaScript file with Node.js:\\n    <pre class=\\\"command-line language-bash\\\" data-user=\\\"user\\\" data-host=\\\"localhost\\\"><code>node &lt;your_js_file&gt;.js</code></pre>\\n\\n    <h3 id=\\\"toc_basic_types\\\">2. Basic Types</h3>\\n    <p>When you declare and initialise a variable, it has always the same strucuture:</p>\\n    <pre><code>let name: type = value;</code></pre>\\n\\n    <h5>Number</h5>\\n    <p>As in JavaScript all numbers are floating point values:</p>\\n\\t<pre><code>let age: number = 5;\\nlet pi: number = 3.14;</code></pre>\\n\\n\\t<h5>String</h5>\\n\\t<pre><code>let firstname: string = \\\"Max\\\";\\nlet lastname: string = 'Mustermann';</code></pre>\\n\\n\\t<br/><p>With template strings expressions can be embedded directly into the string:</p>\\n\\t<pre><code>let output: string = `$&#123;firstname&#125; is $&#123;age&#125; years old.`;</code></pre>\\n\\n    <h5>Boolean</h5>\\n\\t<pre><code>let workingHard: boolean = true;</code></pre>\\n\\n    <h5>Array</h5>\\n\\t<pre><code>let fibonacci: Array&lt;number&gt; = [0, 1, 1, 2, 3, 5, 8, 13];\\nlet fibonacci2: number[] = [0, 1, 1, 2, 3, 5, 8, ,13];</code></pre>\\n\\n    <h5>Object</h5>\\n    Object represents the non-primitive type (anything apart from number, string, boolean, symbol, null or undefined).\\n\\n    <h5>Enum</h5>\\n    <p>An enum gives proper names to a set of numeric values. By default enums begin at 0 and and count on, but you can set values manually for each member.</p>\\n    <pre><code>enum Day &#123;Mon, Tue, Wed, Thu, Fri, Sat, Sun&#125;\\nlet d: Day = Day.Mon;</code></pre>\\n\\n    <h5>Any</h5>\\n    <p> You can always use the fallback value <code>any</code> if you don't know which data type you will get back.</p>\\n    <pre><code>let differentValueTypes: any[] = [5, &#123; firstname: \\\"Max Mustermann\\\" &#125;, function() &#123;\\n    console.warn(\\\"Nothing inside.\\\");\\n&#125;];</code></pre>\\n\\n    <h5>Tuple</h5>\\n    <p>You can express the example above also as a fixed-length array with known, but different, types:</p>\\n    <pre><code>let differentValueTypes: [number, object, object] = [5, &#123; firstname: \\\"Max Mustermann\\\" &#125;, function() &#123;\\n    console.warn(\\\"Nothing inside.\\\");\\n&#125;];</code></pre>\\n\\n    <h5>Union type</h5>\\n    <p>If a value can be one of several types you can use a vertical bar to separate each acceptable type:</p>\\n    <pre><code>let id: string | number;</code></pre>\\n\\n    <h3 id=\\\"toc_functions\\\">3. Functions</h3>\\n    Functions are a key part in each TypeScript application and work pretty much like in JavaScript except for the added types:\\n    <pre><code>//Named function\\nfunction print(message: string): void &#123;\\n    console.log(message);\\n&#125;\\n// Anonymous function\\nlet printFunc = function(message: string): void &#123; console.log(message); &#125;;</code></pre>\\n\\n    <h5>Optional, default and rest parameters</h5>\\n    <p>Furthermore parameters can be marked with <code>?</code> as optional, can have a default value if none is provided or may exist in a number that is not known beforehand:</p>\\n    <pre><code>function (firstName?: string, lastName = \\\"Not provided\\\", ...middleNames: string[]) &#123;\\n    return firstName + \\\" \\\" + middleNames.join(\\\" \\\") + lastName;\\n&#125;</code></pre>\\n\\n    <h5>Overload</h5>\\n    <p>JavaScript enables functions to return different typed values dependending on which and how many parameters were passed into it. To still allow type checking in TypeScript you can supply a list of multiple function types as overloads:</p>\\n    <pre><code>function saveFile(file: string): boolean;\\nfunction saveFile(file: File): void;\\nfunction saveFile(file): any &#123;\\n    // Check with which input we are working\\n    if (typeof file == \\\"string\\\") &#123;\\n        // Try to find file by its path or create new one\\n        // Write file to disk\\n        // Return if newly created or not\\n    &#125;\\n    if (typeof file == \\\"File\\\") &#123;\\n        // Write file to disk\\n    &#125;\\n&#125;</code></pre>\\n\\n    <h3 id=\\\"toc_classes\\\">4. Classes</h3>\\n    The general syntax looks and works familiar if you compare it to Java. A simple example class Animal with the properties <code>age</code>, <code>name</code> and <code>owner</code>, the method <code>changeOwner</code> and a <code>constructor</code> looks like this:\\n    <pre><code>class Animal &#123;\\n    name: string;\\n    age: number;\\n    owner: string;\\n\\n    constructor(name: string, age: number, owner: string) &#123;\\n        this.name = name;\\n        this.age = age;\\n        this.owner = owner;\\n    &#125;\\n\\n    changeOwner(newOwner: string) &#123;\\n        this.owner = newOwner;\\n    &#125;\\n&#125;\\n\\nlet myAnimal = new Animal(\\\"dog\\\", \\\"2\\\", \\\"max mustermann\\\");\\n</code></pre>\\n\\n    <p>Member properties of the class are accessed through prepending <code>this.</code>. An instance of the class is created through using <code>new</code>, which calls our previously defined constructor.</p>\\n\\n    <p>The use of <code>public</code> on constructor arguments is a shorthand to automatically creates these properties:</p>\\n\\n    <pre><code>class Animal &#123;\\n    constructor(public name: string, public age: number, public owner: string) &#123;\\n    &#125;\\n&#125;</code></pre>\\n\\n    <p>A notable difference to other programing languages: Only <strong>one</strong> constructor per class is possible!</p>\\n\\n    <h5>Inheritance</h5>\\n    <p>Also known from object-oriented programing, with the keyword  <code>extends</code> an existing class can be extended to create a new one:</p>\\n\\n    <pre><code>class Cat extends Animal &#123; \\n    constructor(name: string, age: number, owner: string) &#123;\\n        super(name, age, owner);\\n    &#125;\\n\\n    changeOwner(newOwner = \\\"I am my own king\\\") &#123;\\n        console.log(\\\"I will be always free.\\\");\\n        super.changeOwner(newOwner);\\n    &#125;\\n&#125;</code></pre>\\n\\n    <p>You can use the methods and constructors of the base class with  <code>super</code>. The methods can be overwritten. If a derived class (Cat) is instantiated, you automatically have the attributes and methods of the parent classes (Animal), too.</p>\\n\\n    <h5>Modifiers</h5>\\n    <p>Access to methods and properties can be controlled through the typical modifiers:</p>\\n    <ul>\\n        <li><code>public</code>: Default value; free access to the declared members throughout our program.</li>\\n        <li><code>private</code>: Declared members can only be accessed from within the class; no access from outside.</li>\\n        <li><code>protected</code>: Much like <code>private</code>, but members declared protected are also accessible within derived classes.</li>\\n    </ul>\\n\\n    <pre><code>class Animal &#123;\\n    public name: string;\\n    protected age: number;\\n    protected owner: string;\\n\\n    private changeOwner(newOwner = \\\"I am my own king\\\") &#123;\\n        console.log(\\\"I will be always free.\\\");\\n        super.changeOwner(newOwner);\\n    &#125;\\n&#125;</code></pre>\\n\\n    <h5>Accessors</h5>\\n    <p>To intercept the call to members of an object and control how members are accessed and modified, while retaining the ease of the <code>object.member</code> access, its possible to use <code>get</code> and <code>set</code>:</p>\\n\\n    <pre><code>class Person &#123;\\n    private _name: string;\\n    \\n    get name(): string &#123;\\n        return this._name.toLowerCase();\\n    &#125;\\n\\n    set name(newName: string): void &#123;\\n        if(newName) &#123;\\n            throw new Error(\\\"Name can not be empty or null!\\\");\\n        &#125;\\n        this._name = newName;\\n    &#125;\\n&#125;</code></pre>\\n\\n    <h5>Static properties</h5>\\n    <p>Apart from instance members of a class, its also possible to add <code>static</code> members, which are visibile on the class itself and not on a particular instance:</p>\\n\\n    <pre><code>class Animal &#123;\\n    static counter: number = 0;\\n\\n    constructor(name: string, age: number, owner: string) &#123;\\n        this.name = name;\\n        this.age = age;\\n        this.owner = owner;\\n\\n        Animal.counter++;\\n    &#125;\\n&#125;</code></pre>\\n\\n    <h5>Abstract classes</h5>\\n    <p>It's even possible to define base classes, which can not be instantiated directly, but do already contain some implementation logic. Instead only from these base classes derived classes, which have to implement all abstract methods, can be instantiated.</p>\\n\\n<pre><code>abstract class Animal &#123;\\n    abstract move(): void;\\n    print() : void &#123;\\n        console.log(\\\"Animal has number \\\" + Animal.counter);\\n    &#125;\\n&#125;</code></pre>\\n\\n    <div class=\\\"ui warning message\\\">\\n        Be aware that JavaScript uses the prototype-chain under the hood to build up the object-oriented class hierarchies. This approach works different then the object-oriented approach in, for instance, Java. The newly introduced <code>class</code> and other related keywords are only syntactic sugar above this concept.<br>\\n        A deeper understanding is not needed in our tutorial, but to thoroughly grasp JavaScript one should address this issue:\\n        <ul>\\n            <li><a href=\\\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes\\\" target=\\\"_blank\\\">MDN: Object prototypes</a></li>\\n            <li><a href=\\\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object-oriented_JS\\\" target=\\\"_blank\\\">MDN: Object-oriented JavaScript for beginners</a></li>\\n            <li><a href=\\\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics\\\" target=\\\"_blank\\\">MDN: JavaScript object basics</a></li>\\n            <li><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\\\" target=\\\"_blank\\\">MDN: Inheritance and the prototype chain</a></li>\\n        </ul>\\n    </div>\\n    <h3 id=\\\"toc_interfaces\\\">5. Interfaces</h3>\\n    <p>Type checking in TypeScript looks only at the <i>shape</i> the values have (cf. <a href=\\\"https://en.wikipedia.org/wiki/Duck_typing\\\" target=\\\"_blank\\\">duck typing</a>). Consequentially interfaces are naming these types and define a contract within your code which typed values must be at least included to fulfill this contract (additional properties are allowed).</p>\\n    <pre><code>function printID(identifiedObj: &#123;id: string&#125;) &#123;\\n    console.log(identifiedObj.id);\\n&#125;</code></pre>\\n    <p>Here the type checker tests for each object passed in as parameter if it has at least a property called <code>id</code> of type <code>string</code>.<br>\\n    We can now express this requirement as an interface, too:</p>\\n<pre><code>interface IdentifiedValue &#123;\\n    id: string;\\n&#125;\\n\\nfunction printID(identifiedObj: IdentifiedValue) &#123;\\n    console.log(identifiedObj.id);\\n&#125;</code></pre>\\n\\n    <h5>Optional and readonly properties</h5>\\n    <p>Optional properties have a  <code>?</code> behind their name, e.g. <code>owner?: string;</code>, and are not required.</p>\\n  \\n    <pre><code>interface Contact &#123;\\n    firstname: string;\\n    lastname: string;\\n    age?: number | string;\\n&#125;</code></pre>\\n\\n    <p>Furthermore properties can defined to be not modifiable after the object was created:</p>\\n    <pre><code>interface Contact &#123;\\n    readonly id: string;\\n    firstname: string;\\n    lastname: string;\\n&#125;</code></pre>\\n\\n    <h5>Indexable types</h5>\\n    <p>Interfaces can also be defined by an indexable key (cf. dictionary). For instance the interface determines the index signature to index through the object and the return type for all elements of the array.</p>\\n    \\n    <pre><code>interface StringArray &#123;\\n    [index: number]: string;\\n&#125;\\n\\nlet myStringArray: StringArray;\\nmyStringArray = [\\\"Max\\\", \\\"Manuela\\\"];\\n\\nlet myString: string = myStringArray[1];\\n</code></pre>\\n\\n    <h5>Function types</h5>\\n    <p>Interfaces are even capable to describe function signatures. Therefore we define the parameter list and the return type:</p>\\n\\n    <pre><code>interface EqualsFunc &#123;\\n(anObject: object, secondObject: object): boolean\\n&#125;</code></pre>\\n\\n    <h5>Class types</h5>\\n    <p>A common use case is to enforce a class to meet a defined set of named and typed values. The keyword to implement such an interface is <code>implements</code>.</p>\\n    <pre><code>\\ninterface File &#123; \\n    path: string;\\n&#125;\\n\\nclass BinaryFile implements File &#123;\\n    path: string;\\n    encoding: string;\\n&#125;</code></pre>\\n\\n    <h5>Extending Interfaces</h5>\\n    <p>Last but not least its possible for an interface to extend another interface with new properties and take over the existing members:</p>\\n    <pre><code>interface List &#123;\\n    next(): object;\\n&#125;\\n\\ninterface LinkedList extends List &#123;\\n    previous(): object;\\n&#125;</code></pre>\\n\\n    <h3 id=\\\"toc_decorators\\\">6. Decorators</h3>\\n\\n    <pre><code>@Component(&#123;\\n    // Configuration object\\n&#125;)\\nclass myComponent &#123; &#125;</code></pre>\\n\\n    <p>With decorators metadata and additional or modifying features can be annotated to classes and class members. Especially the Angular framework makes heavy use of this technique to mark classes as a components and modules and to configure them. Be aware that this feature is still experimental in TypeScript and may change in future releases.<br>\\n    Expressions are added with <code>@expression</code>, where <code>expression</code> is a function called at runtime with information about the decorated declaration.</p>\\n</div>\\n\\n<div class=\\\"ui message\\\" style=\\\"margin-top: 30px; margin-bottom: 30px;\\\">\\n    <p>Now that you know all these things, you are ready for a bigger project. Feel free to come back any time, if you\\n        want to look up something.</p>\\n</div>\\n\\n<h3 id=\\\"toc_further_references\\\">Further references</h3>\\n  <p class=\\\"ui info message\\\">To help you with all the keywords, concepts and syntax:<br>\\n    <a href=\\\"https://github.com/iLoveCodingOrg/javascript-cheatsheet/raw/master/js-cheatsheet.pdf\\\" download=\\\"js_cheat_sheet\\\" target=\\\"_blank\\\"><strong>JavaScript Cheat Sheet</strong></a>\\n  </p>\\n  <div class=\\\"ui warning message\\\">\\n    <p><strong>Official documentation:</strong></p>\\n    <ul>\\n        <li><a href=\\\"https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html\\\" target=\\\"_blank\\\">TypeScript in 5 minutes</a></li>\\n        <li><a href=\\\"https://www.typescriptlang.org/docs/handbook/basic-types.html\\\" target=\\\"_blank\\\">TypeScript: Basic Types</a></li>\\n        <li><a href=\\\"https://www.typescriptlang.org/docs/handbook/variable-declarations.html\\\" target=\\\"_blank\\\">TypeScript: Variable Declarations</a></li>\\n        <li><a href=\\\"https://www.typescriptlang.org/docs/handbook/interfaces.html\\\" target=\\\"_blank\\\">TypeScript: Interfaces</a></li>\\n        <li><a href=\\\"https://www.typescriptlang.org/docs/handbook/classes.html\\\" target=\\\"_blank\\\">TypeScript: Classes</a></li>\\n        <li><a href=\\\"https://www.typescriptlang.org/docs/handbook/functions.html\\\" target=\\\"_blank\\\">TypeScript: Functions</a></li>\\n        <li><a href=\\\"https://www.typescriptlang.org/docs/handbook/decorators.html\\\" target=\\\"_blank\\\">TypeScript: Decorators</a></li>\\n        <li><a href=\\\"https://www.typescriptlang.org/docs/handbook/declaration-files/do-s-and-don-ts.html\\\" target=\\\"_blank\\\">TypeScript: Do's and Don'ts</a></li>\\n    </ul>\\n    <p><strong>Advanced concepts:</strong></p>\\n    <ul>\\n        <li><a href=\\\"https://en.wikipedia.org/wiki/Source-to-source_compiler\\\" target=\\\"_blank\\\">Wikipedia: Transpiler</a></li>\\n        <li><a href=\\\"https://www.typescriptlang.org/docs/handbook/compiler-options.html\\\" target=\\\"_blank\\\">TypeScript: Compiler Options</a></li>\\n        <li><a href=\\\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\\\" target=\\\"_blank\\\">TypeScript: tsconfig.json</a></li>\\n        <li>To review your basics in JS: <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\\\" target=\\\"_blank\\\">MDN web docs &gt; JavaScript</a></li>\\n        <li>What is linting and why to use it?: <a href=\\\"https://en.wikipedia.org/wiki/Lint_(software)\\\" target=\\\"_blank\\\">Wikipedia &gt; lint (software)</a></li>\\n        <li><a href=\\\"https://eslint.org/\\\" target=\\\"_blank\\\">ESLint for JavaScript</a></li>\\n    </ul>\\n  </div>\"","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-about',\n  templateUrl: './about.component.html',\n  styles: []\n})\nexport class AboutComponent implements OnInit {\n\n  about:Boolean = false;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  aboutFunc(): Boolean{\n    this.about = true;\n    return this.about;\n  }\n\n  hideAbout(): Boolean{\n    this.about = false;\n    return this.about;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\nimport { EnvironmentComponent } from './environment/environment.component';\nimport { FirstAppComponent } from './first-app/first-app.component';\nimport { TypescriptComponent } from './typescript/typescript.component';\nimport { ProjectOverviewComponent } from './project-overview/project-overview.component';\nimport { ApplicationComponent } from './application/application.component';\nimport { ComponentsComponent } from './components/components.component';\nimport { ComponentsFormmodulesDirectivesComponent } from './components-formmodules-directives/components-formmodules-directives.component';\nimport { ReusableComponentsComponent } from './reusable-components/reusable-components.component';\nimport { ServicesComponent } from './services/services.component';\nimport { RoutingComponent } from './routing/routing.component';\nimport { HttpComponent } from './http/http.component';\nimport { FinishAppComponent } from './finish-app/finish-app.component';\nimport { AboutComponent } from './about/about.component';\n\nconst routes: Routes = [\n  { path: '', redirectTo: '/home', pathMatch: 'full' },\n  { path: 'home', component: HomeComponent },\n  { path: 'environment', component: EnvironmentComponent,runGuardsAndResolvers: 'always' },\n  { path: 'first-app', component: FirstAppComponent },\n  { path: 'typescript', component: TypescriptComponent },\n  { path: 'project-overview', component: ProjectOverviewComponent },\n  { path: 'application', component: ApplicationComponent},\n  { path: 'components', component: ComponentsComponent},\n  { path: 'components-formmodules-directives', component: ComponentsFormmodulesDirectivesComponent},\n  { path: 'reusable-components', component: ReusableComponentsComponent},\n  { path: 'services', component: ServicesComponent},\n  { path: 'routing', component: RoutingComponent},\n  { path: 'http', component: HttpComponent},\n  { path: 'finish-app', component: FinishAppComponent},\n  { path: 'about', component: AboutComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes,\n    {onSameUrlNavigation: \"reload\"}\n    )],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { Router } from '@angular/router';\n\nimport * as Prism from '../prism.js';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styles: []\n})\nexport class AppComponent implements OnInit {\n  title = 'Learn Angular!';\n  hideBackButton: Boolean = false;\n  hideNextButton: Boolean = false;\n\n  public routerLinks = [\"/home\", \"/environment\", \"/first-app\", \"/typescript\", \"/project-overview\",\n    \"/application\", \"/components\", \"/components-formmodules-directives\", \"/reusable-components\",\n    \"/services\", \"/routing\", \"/http\", \"/finish-app\"];\n\n  public routerLink: string;\n\n  constructor(private router: Router, public location: Location) { \n  }\n\n  ngOnInit() {\n    Prism.manual = true;\n  }\n\n  onActivate(){\n    window.scroll(0,0);\n  }\n\n  getHideNextButton(): Boolean {\n    this.routerLink = this.router.url;\n    if (this.routerLink === this.routerLinks[0] || this.routerLink === this.routerLinks[this.routerLinks.length - 1]) {\n      this.hideNextButton = true;\n    } else\n      this.hideNextButton = false;\n    return this.hideNextButton;\n  }\n\n  getHideBackButton(): Boolean {\n    this.routerLink = this.router.url;\n    if (this.routerLink === this.routerLinks[0]) {\n      this.hideBackButton = true;\n    } else\n      this.hideBackButton = false;\n    return this.hideBackButton;\n  }\n\n  getNext(): string {\n    this.routerLink = this.router.url;\n    let counter = -1;\n    for (let r of this.routerLinks) {\n      counter++;\n      if (this.routerLink === r) {\n        this.routerLink = this.routerLinks[counter + 1];\n        break;\n      }\n    }\n    return this.routerLink;\n  }\n  \n  getLast(): string {\n    this.routerLink = this.router.url;\n    let counter = -1;\n    for (let r of this.routerLinks) {\n      counter++;\n      if (this.routerLink === r) {\n        this.routerLink = this.routerLinks[counter - 1];\n        break;\n      }\n    }\n    return this.routerLink;\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './home/home.component';\nimport { EnvironmentComponent } from './environment/environment.component';\nimport { FirstAppComponent } from './first-app/first-app.component';\nimport { TypescriptComponent } from './typescript/typescript.component';\nimport { ProjectOverviewComponent } from './project-overview/project-overview.component';\nimport { ApplicationComponent } from './application/application.component';\nimport { ComponentsComponent } from './components/components.component';\nimport { ComponentsFormmodulesDirectivesComponent } from './components-formmodules-directives/components-formmodules-directives.component';\nimport { ReusableComponentsComponent } from './reusable-components/reusable-components.component';\nimport { ServicesComponent } from './services/services.component';\nimport { RoutingComponent } from './routing/routing.component';\nimport { FormsModule } from '@angular/forms';\nimport { HttpComponent } from './http/http.component';\nimport { FinishAppComponent } from './finish-app/finish-app.component';\n\nimport { APP_BASE_HREF, LocationStrategy, HashLocationStrategy } from '@angular/common';\n\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport { AboutComponent } from './about/about.component'; \n\nimport {NgbModule} from '@ng-bootstrap/ng-bootstrap';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomeComponent,\n    EnvironmentComponent,\n    FirstAppComponent,\n    TypescriptComponent,\n    ProjectOverviewComponent,\n    ApplicationComponent,\n    ComponentsComponent,\n    ComponentsFormmodulesDirectivesComponent,\n    ReusableComponentsComponent,\n    ServicesComponent,\n    RoutingComponent,\n    HttpComponent,\n    FinishAppComponent,\n    AboutComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    BrowserAnimationsModule,\n    MatProgressBarModule,\n    NgbModule\n  ],\n  providers: [\n    { provide: APP_BASE_HREF, useValue: '/' },\n    { provide: LocationStrategy, useClass: HashLocationStrategy }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit} from '@angular/core';\nimport { Modus } from '../shared/modus';\nimport { ModiService } from '../shared/modi.service';\n\nimport * as Prism from '../../prism.js';\n\n@Component({\n  selector: 'app-application',\n  templateUrl: './application.component.html',\n  styles: []\n})\nexport class ApplicationComponent implements OnInit {\n  public theorySmall: Boolean;\n  public theoryLarge: Boolean;\n  public praxis: Boolean;\n  public modus: Modus;\n\n  constructor(private service: ModiService) { }\n\n  ngOnInit() {\n    this.getModus();\n    this.theorySmall = this.modus.theorySmall;\n    this.theoryLarge = this.modus.theoryLarge;\n    this.praxis = this.modus.praxis;\n  }\n\n  ngAfterViewInit() {\n    Prism.highlightAll();\n  }\n\n  getModus(): void{\n    this.service.getModus()\n    .subscribe(modus => this.modus = modus);\n  }\n\n  copy(text: string): void {\n    navigator.clipboard.writeText(text);\n  }\n}","import { Component, OnInit } from '@angular/core';\nimport { Modus } from '../shared/modus';\nimport { ModiService } from '../shared/modi.service';\n\nimport * as Prism from '../../prism.js';\n\n@Component({\n  selector: 'app-components-formmodules-directives',\n  templateUrl: './components-formmodules-directives.component.html',\n  styles: []\n})\nexport class ComponentsFormmodulesDirectivesComponent implements OnInit {\n  public theorySmall: Boolean;\n  public theoryLarge: Boolean;\n  public praxis: Boolean;\n  public modus: Modus;\n\n  constructor(private service: ModiService) { \n  }\n\n  ngOnInit() {\n    this.getModus();\n    this.theorySmall = this.modus.theorySmall;\n    this.theoryLarge = this.modus.theoryLarge;\n    this.praxis = this.modus.praxis;\n  }\n\n  ngAfterViewInit() {\n    Prism.highlightAll();\n  }\n\n  getModus(): void{\n    this.service.getModus()\n    .subscribe(modus => this.modus = modus);\n    console.log(this.modus);\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ModiService } from '../shared/modi.service';\nimport { Modus } from '../shared/modus';\n\nimport * as Prism from '../../prism.js';\n\n@Component({\n  selector: 'app-components',\n  templateUrl: './components.component.html',\n  styles: []\n})\n\nexport class ComponentsComponent implements OnInit {\n  public theorySmall: Boolean;\n  public theoryLarge: Boolean;\n  public praxis: Boolean;\n  public modus: Modus;\n\n  public today: number = Date.now();\n\n  constructor(private service: ModiService) { }\n\n  ngOnInit() {\n    this.getModus();\n    this.theorySmall = this.modus.theorySmall;\n    this.theoryLarge = this.modus.theoryLarge;\n    this.praxis = this.modus.praxis;\n  }\n\n  ngAfterViewInit() {\n    Prism.highlightAll();\n  }\n\n  getModus(): void{\n    this.service.getModus()\n    .subscribe(modus => this.modus = modus);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Modus } from '../shared/modus';\nimport { ModiService } from '../shared/modi.service';\n\nimport * as Prism from '../../prism.js';\n\n@Component({\n  selector: 'app-environment',\n  templateUrl: './environment.component.html',\n  styles: []\n})\nexport class EnvironmentComponent implements OnInit {\n  public theorySmall: Boolean;\n  public theoryLarge: Boolean;\n  public praxis: Boolean;\n  public modus: Modus;\n\n  constructor(private service: ModiService) {\n  }\n\n  ngOnInit() {\n    this.getModus();\n    this.theorySmall = this.modus.theorySmall;\n    this.theoryLarge = this.modus.theoryLarge;\n    this.praxis = this.modus.praxis;\n  }\n\n  ngAfterViewInit() {\n    Prism.highlightAll();\n  }\n\n  getModus(): void{\n    this.service.getModus()\n    .subscribe(modus => this.modus = modus);\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Modus } from '../shared/modus';\nimport { ModiService } from '../shared/modi.service';\n\nimport * as Prism from '../../prism.js';\n\n@Component({\n  selector: 'app-finish-app',\n  templateUrl: './finish-app.component.html',\n  styles: []\n})\nexport class FinishAppComponent implements OnInit {\n  public theorySmall: Boolean;\n  public theoryLarge: Boolean;\n  public praxis: Boolean;\n  public modus: Modus;\n\n  constructor(private service: ModiService) { }\n\n  ngOnInit() {\n    this.getModus();\n    this.theorySmall = this.modus.theorySmall;\n    this.theoryLarge = this.modus.theoryLarge;\n    this.praxis = this.modus.praxis;\n  }\n\n  ngAfterViewInit() {\n    Prism.highlightAll();\n  }\n\n  getModus(): void{\n    this.service.getModus()\n    .subscribe(modus => this.modus = modus);\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Modus } from '../shared/modus';\nimport { ModiService } from '../shared/modi.service';\n\nimport * as Prism from '../../prism.js';\n\n@Component({\n  selector: 'app-first-app',\n  templateUrl: './first-app.component.html',\n  styles: []\n})\nexport class FirstAppComponent implements OnInit {\n  public theorySmall: Boolean;\n  public theoryLarge: Boolean;\n  public praxis: Boolean;\n  public modus: Modus;\n\n  constructor(private service: ModiService) { }\n\n  ngOnInit() {\n    this.getModus();\n    this.theorySmall = this.modus.theorySmall;\n    this.theoryLarge = this.modus.theoryLarge;\n    this.praxis = this.modus.praxis;\n  }\n\n  ngAfterViewInit() {\n    Prism.highlightAll();\n  }\n\n  getModus(): void{\n    this.service.getModus()\n    .subscribe(modus => this.modus = modus);\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ModiService } from '../shared/modi.service';\nimport { Modus } from '../shared/modus';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styles: []\n})\nexport class HomeComponent implements OnInit {  \n  \n  modus: Modus;\n  modi: Modus[];\n\n  constructor(private service: ModiService) { }\n\n  ngOnInit() {\n    this.getModi();\n  }\n\n  getModi(): void{\n    this.service.getModi()\n    .subscribe(modi => this.modi = modi);\n  }\n\n  theorist(): void {\n    this.service.setModus(this.modi[0])\n    .subscribe(modus => this.modus = modus);\n  }\n\n  practitioner(): void {\n    this.service.setModus(this.modi[1])\n    .subscribe(modus => this.modus = modus);\n  }\n\n  both(): void {\n    this.service.setModus(this.modi[2])\n    .subscribe(modus => this.modus = modus);\n  }\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { Modus } from '../shared/modus';\nimport { ModiService } from '../shared/modi.service';\n\nimport * as Prism from '../../prism.js';\n\n@Component({\n  selector: 'app-http',\n  templateUrl: './http.component.html',\n  styles: []\n})\nexport class HttpComponent implements OnInit {\n  public theorySmall: Boolean;\n  public theoryLarge: Boolean;\n  public praxis: Boolean;\n  public modus: Modus;\n\n  constructor(private service: ModiService) { }\n\n  ngOnInit() {\n    this.getModus();\n    this.theorySmall = this.modus.theorySmall;\n    this.theoryLarge = this.modus.theoryLarge;\n    this.praxis = this.modus.praxis;\n  }\n\n  ngAfterViewInit() {\n    Prism.highlightAll();\n  }\n\n  getModus(): void{\n    this.service.getModus()\n    .subscribe(modus => this.modus = modus);\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Modus } from '../shared/modus';\nimport { ModiService } from '../shared/modi.service';\n\n@Component({\n  selector: 'app-project-overview',\n  templateUrl: './project-overview.component.html',\n  styles: []\n})\nexport class ProjectOverviewComponent implements OnInit {\n  public theorySmall: Boolean;\n  public theoryLarge: Boolean;\n  public praxis: Boolean;\n  public modus: Modus;\n\n  constructor(private service: ModiService) { }\n\n  ngOnInit() {\n    this.getModus();\n    this.theorySmall = this.modus.theorySmall;\n    this.theoryLarge = this.modus.theoryLarge;\n    this.praxis = this.modus.praxis;\n  }\n\n  getModus(): void{\n    this.service.getModus()\n    .subscribe(modus => this.modus = modus);\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Modus } from '../shared/modus';\nimport { ModiService } from '../shared/modi.service';\n\nimport * as Prism from '../../prism.js';\n\n@Component({\n  selector: 'app-reusable-components',\n  templateUrl: './reusable-components.component.html',\n  styles: []\n})\nexport class ReusableComponentsComponent implements OnInit {\n  public theorySmall: Boolean;\n  public theoryLarge: Boolean;\n  public praxis: Boolean;\n  public modus: Modus;\n\n  constructor(private service: ModiService) { }\n\n  ngOnInit() {\n    this.getModus();\n    this.theorySmall = this.modus.theorySmall;\n    this.theoryLarge = this.modus.theoryLarge;\n    this.praxis = this.modus.praxis;\n  }\n\n  ngAfterViewInit() {\n    Prism.highlightAll();\n  }\n\n  getModus(): void{\n    this.service.getModus()\n    .subscribe(modus => this.modus = modus);\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Modus } from '../shared/modus';\nimport { ModiService } from '../shared/modi.service';\n\nimport * as Prism from '../../prism.js';\n\n@Component({\n  selector: 'app-routing',\n  templateUrl: './routing.component.html',\n  styles: []\n})\nexport class RoutingComponent implements OnInit {\n  public theorySmall: Boolean;\n  public theoryLarge: Boolean;\n  public praxis: Boolean;\n  public modus: Modus;\n\n  constructor(private service: ModiService) { }\n\n  ngOnInit() {\n    this.getModus();\n    this.theorySmall = this.modus.theorySmall;\n    this.theoryLarge = this.modus.theoryLarge;\n    this.praxis = this.modus.praxis;\n  }\n\n  ngAfterViewInit() {\n    Prism.highlightAll();\n  }\n\n  getModus(): void{\n    this.service.getModus()\n    .subscribe(modus => this.modus = modus);\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Modus } from '../shared/modus';\nimport { ModiService } from '../shared/modi.service';\n\nimport * as Prism from '../../prism.js';\n\n@Component({\n  selector: 'app-services',\n  templateUrl: './services.component.html',\n  styles: []\n})\nexport class ServicesComponent implements OnInit {\n  public theorySmall: Boolean;\n  public theoryLarge: Boolean;\n  public praxis: Boolean;\n  public modus: Modus;\n\n  constructor(private service: ModiService) { }\n\n  ngOnInit() {\n    this.getModus();\n    this.theorySmall = this.modus.theorySmall;\n    this.theoryLarge = this.modus.theoryLarge;\n    this.praxis = this.modus.praxis;\n  }\n\n  ngAfterViewInit() {\n    Prism.highlightAll();\n  }\n\n  getModus(): void{\n    this.service.getModus()\n    .subscribe(modus => this.modus = modus);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Modus } from \"./modus\";\nimport { MODI } from \"./modi\";\nimport { Observable, of } from 'rxjs'; \n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ModiService {\n  public currentModus: Modus = {name: \"default\", theorySmall: true, theoryLarge: true, praxis: true};\n\n  constructor() { }\n\n  getModi(): Observable<Modus[]> {\n    return of (MODI);\n  }\n\n  getModus(): Observable<Modus>{\n    return of (this.currentModus);\n  }\n\n  setModus(modus: Modus): Observable<Modus> {\n    this.currentModus = modus;\n    return of (this.currentModus);\n  }\n}\n","import { Modus } from \"./modus\";\n\nexport const MODI: Modus[] = [\n    {\n        name: 'theorist',\n        theorySmall: true,\n        theoryLarge: true,\n        praxis: false\n    },\n    {\n        name: 'practitioner',\n        theorySmall: false,\n        theoryLarge: false,\n        praxis: true\n    },\n    {\n        name: 'both',\n        theorySmall: true,\n        theoryLarge: true,\n        praxis: true\n    }\n]\n","import { Component, OnInit } from '@angular/core';\nimport { Modus } from '../shared/modus';\nimport { ModiService } from '../shared/modi.service';\n\nimport * as Prism from '../../prism.js';\n\n@Component({\n  selector: 'app-typescript',\n  templateUrl: './typescript.component.html',\n  styles: []\n})\nexport class TypescriptComponent implements OnInit {\n  public theorySmall: Boolean;\n  public theoryLarge: Boolean;\n  public praxis: Boolean;\n  public modus: Modus;\n\n  constructor(private service: ModiService) { }\n\n  ngOnInit() {\n    this.getModus();\n    this.theorySmall = this.modus.theorySmall;\n    this.theoryLarge = this.modus.theoryLarge;\n    this.praxis = this.modus.praxis;\n  }\n\n  ngAfterViewInit() {\n    Prism.highlightAll();\n  }\n\n  getModus(): void{\n    this.service.getModus()\n    .subscribe(modus => this.modus = modus);\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","/* PrismJS 1.17.1\nhttps://prismjs.com/download.html#themes=prism&languages=markup+css+clike+javascript+bash+diff+git+less+http+javadoclike+markdown+json+js-templates+typescript+jsdoc+scss+js-extras+jsx+sass&plugins=line-numbers+command-line */\nvar _self=\"undefined\"!=typeof window?window:\"undefined\"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?self:{},Prism=function(u){var c=/\\blang(?:uage)?-([\\w-]+)\\b/i,a=0;var _={manual:u.Prism&&u.Prism.manual,disableWorkerMessageHandler:u.Prism&&u.Prism.disableWorkerMessageHandler,util:{encode:function(e){return e instanceof L?new L(e.type,_.util.encode(e.content),e.alias):Array.isArray(e)?e.map(_.util.encode):e.replace(/&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/\\u00a0/g,\" \")},type:function(e){return Object.prototype.toString.call(e).slice(8,-1)},objId:function(e){return e.__id||Object.defineProperty(e,\"__id\",{value:++a}),e.__id},clone:function n(e,r){var t,a,i=_.util.type(e);switch(r=r||{},i){case\"Object\":if(a=_.util.objId(e),r[a])return r[a];for(var o in t={},r[a]=t,e)e.hasOwnProperty(o)&&(t[o]=n(e[o],r));return t;case\"Array\":return a=_.util.objId(e),r[a]?r[a]:(t=[],r[a]=t,e.forEach(function(e,a){t[a]=n(e,r)}),t);default:return e}}},languages:{extend:function(e,a){var n=_.util.clone(_.languages[e]);for(var r in a)n[r]=a[r];return n},insertBefore:function(n,e,a,r){var t=(r=r||_.languages)[n],i={};for(var o in t)if(t.hasOwnProperty(o)){if(o==e)for(var l in a)a.hasOwnProperty(l)&&(i[l]=a[l]);a.hasOwnProperty(o)||(i[o]=t[o])}var s=r[n];return r[n]=i,_.languages.DFS(_.languages,function(e,a){a===s&&e!=n&&(this[e]=i)}),i},DFS:function e(a,n,r,t){t=t||{};var i=_.util.objId;for(var o in a)if(a.hasOwnProperty(o)){n.call(a,o,a[o],r||o);var l=a[o],s=_.util.type(l);\"Object\"!==s||t[i(l)]?\"Array\"!==s||t[i(l)]||(t[i(l)]=!0,e(l,n,o,t)):(t[i(l)]=!0,e(l,n,null,t))}}},plugins:{},highlightAll:function(e,a){_.highlightAllUnder(document,e,a)},highlightAllUnder:function(e,a,n){var r={callback:n,selector:'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'};_.hooks.run(\"before-highlightall\",r);for(var t,i=e.querySelectorAll(r.selector),o=0;t=i[o++];)_.highlightElement(t,!0===a,r.callback)},highlightElement:function(e,a,n){var r=function(e){for(;e&&!c.test(e.className);)e=e.parentNode;return e?(e.className.match(c)||[,\"none\"])[1].toLowerCase():\"none\"}(e),t=_.languages[r];e.className=e.className.replace(c,\"\").replace(/\\s+/g,\" \")+\" language-\"+r;var i=e.parentNode;i&&\"pre\"===i.nodeName.toLowerCase()&&(i.className=i.className.replace(c,\"\").replace(/\\s+/g,\" \")+\" language-\"+r);var o={element:e,language:r,grammar:t,code:e.textContent};function l(e){o.highlightedCode=e,_.hooks.run(\"before-insert\",o),o.element.innerHTML=o.highlightedCode,_.hooks.run(\"after-highlight\",o),_.hooks.run(\"complete\",o),n&&n.call(o.element)}if(_.hooks.run(\"before-sanity-check\",o),!o.code)return _.hooks.run(\"complete\",o),void(n&&n.call(o.element));if(_.hooks.run(\"before-highlight\",o),o.grammar)if(a&&u.Worker){var s=new Worker(_.filename);s.onmessage=function(e){l(e.data)},s.postMessage(JSON.stringify({language:o.language,code:o.code,immediateClose:!0}))}else l(_.highlight(o.code,o.grammar,o.language));else l(_.util.encode(o.code))},highlight:function(e,a,n){var r={code:e,grammar:a,language:n};return _.hooks.run(\"before-tokenize\",r),r.tokens=_.tokenize(r.code,r.grammar),_.hooks.run(\"after-tokenize\",r),L.stringify(_.util.encode(r.tokens),r.language)},matchGrammar:function(e,a,n,r,t,i,o){for(var l in n)if(n.hasOwnProperty(l)&&n[l]){var s=n[l];s=Array.isArray(s)?s:[s];for(var u=0;u<s.length;++u){if(o&&o==l+\",\"+u)return;var c=s[u],g=c.inside,f=!!c.lookbehind,h=!!c.greedy,d=0,m=c.alias;if(h&&!c.pattern.global){var p=c.pattern.toString().match(/[imsuy]*$/)[0];c.pattern=RegExp(c.pattern.source,p+\"g\")}c=c.pattern||c;for(var y=r,v=t;y<a.length;v+=a[y].length,++y){var k=a[y];if(a.length>e.length)return;if(!(k instanceof L)){if(h&&y!=a.length-1){if(c.lastIndex=v,!(x=c.exec(e)))break;for(var b=x.index+(f&&x[1]?x[1].length:0),w=x.index+x[0].length,A=y,P=v,O=a.length;A<O&&(P<w||!a[A].type&&!a[A-1].greedy);++A)(P+=a[A].length)<=b&&(++y,v=P);if(a[y]instanceof L)continue;j=A-y,k=e.slice(v,P),x.index-=v}else{c.lastIndex=0;var x=c.exec(k),j=1}if(x){f&&(d=x[1]?x[1].length:0);w=(b=x.index+d)+(x=x[0].slice(d)).length;var N=k.slice(0,b),S=k.slice(w),C=[y,j];N&&(++y,v+=N.length,C.push(N));var E=new L(l,g?_.tokenize(x,g):x,m,x,h);if(C.push(E),S&&C.push(S),Array.prototype.splice.apply(a,C),1!=j&&_.matchGrammar(e,a,n,y,v,!0,l+\",\"+u),i)break}else if(i)break}}}}},tokenize:function(e,a){var n=[e],r=a.rest;if(r){for(var t in r)a[t]=r[t];delete a.rest}return _.matchGrammar(e,n,a,0,0,!1),n},hooks:{all:{},add:function(e,a){var n=_.hooks.all;n[e]=n[e]||[],n[e].push(a)},run:function(e,a){var n=_.hooks.all[e];if(n&&n.length)for(var r,t=0;r=n[t++];)r(a)}},Token:L};function L(e,a,n,r,t){this.type=e,this.content=a,this.alias=n,this.length=0|(r||\"\").length,this.greedy=!!t}if(u.Prism=_,L.stringify=function(e,a){if(\"string\"==typeof e)return e;if(Array.isArray(e))return e.map(function(e){return L.stringify(e,a)}).join(\"\");var n={type:e.type,content:L.stringify(e.content,a),tag:\"span\",classes:[\"token\",e.type],attributes:{},language:a};if(e.alias){var r=Array.isArray(e.alias)?e.alias:[e.alias];Array.prototype.push.apply(n.classes,r)}_.hooks.run(\"wrap\",n);var t=Object.keys(n.attributes).map(function(e){return e+'=\"'+(n.attributes[e]||\"\").replace(/\"/g,\"&quot;\")+'\"'}).join(\" \");return\"<\"+n.tag+' class=\"'+n.classes.join(\" \")+'\"'+(t?\" \"+t:\"\")+\">\"+n.content+\"</\"+n.tag+\">\"},!u.document)return u.addEventListener&&(_.disableWorkerMessageHandler||u.addEventListener(\"message\",function(e){var a=JSON.parse(e.data),n=a.language,r=a.code,t=a.immediateClose;u.postMessage(_.highlight(r,_.languages[n],n)),t&&u.close()},!1)),_;var e=document.currentScript||[].slice.call(document.getElementsByTagName(\"script\")).pop();if(e&&(_.filename=e.src,e.hasAttribute(\"data-manual\")&&(_.manual=!0)),!_.manual){function n(){_.manual||_.highlightAll()}\"loading\"!==document.readyState?window.requestAnimationFrame?window.requestAnimationFrame(n):window.setTimeout(n,16):document.addEventListener(\"DOMContentLoaded\",n)}return _}(_self);\"undefined\"!=typeof module&&module.exports&&(module.exports=Prism),\"undefined\"!=typeof global&&(global.Prism=Prism);\nPrism.languages.markup={comment:/<!--[\\s\\S]*?-->/,prolog:/<\\?[\\s\\S]+?\\?>/,doctype:/<!DOCTYPE[\\s\\S]+?>/i,cdata:/<!\\[CDATA\\[[\\s\\S]*?]]>/i,tag:{pattern:/<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/i,greedy:!0,inside:{tag:{pattern:/^<\\/?[^\\s>\\/]+/i,inside:{punctuation:/^<\\/?/,namespace:/^[^\\s>\\/:]+:/}},\"attr-value\":{pattern:/=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/i,inside:{punctuation:[/^=/,{pattern:/^(\\s*)[\"']|[\"']$/,lookbehind:!0}]}},punctuation:/\\/?>/,\"attr-name\":{pattern:/[^\\s>\\/]+/,inside:{namespace:/^[^\\s>\\/:]+:/}}}},entity:/&#?[\\da-z]{1,8};/i},Prism.languages.markup.tag.inside[\"attr-value\"].inside.entity=Prism.languages.markup.entity,Prism.hooks.add(\"wrap\",function(a){\"entity\"===a.type&&(a.attributes.title=a.content.replace(/&amp;/,\"&\"))}),Object.defineProperty(Prism.languages.markup.tag,\"addInlined\",{value:function(a,e){var s={};s[\"language-\"+e]={pattern:/(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,lookbehind:!0,inside:Prism.languages[e]},s.cdata=/^<!\\[CDATA\\[|\\]\\]>$/i;var n={\"included-cdata\":{pattern:/<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,inside:s}};n[\"language-\"+e]={pattern:/[\\s\\S]+/,inside:Prism.languages[e]};var i={};i[a]={pattern:RegExp(\"(<__[\\\\s\\\\S]*?>)(?:<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\\\\s*|[\\\\s\\\\S])*?(?=<\\\\/__>)\".replace(/__/g,a),\"i\"),lookbehind:!0,greedy:!0,inside:n},Prism.languages.insertBefore(\"markup\",\"cdata\",i)}}),Prism.languages.xml=Prism.languages.extend(\"markup\",{}),Prism.languages.html=Prism.languages.markup,Prism.languages.mathml=Prism.languages.markup,Prism.languages.svg=Prism.languages.markup;\n!function(s){var t=/(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;s.languages.css={comment:/\\/\\*[\\s\\S]*?\\*\\//,atrule:{pattern:/@[\\w-]+[\\s\\S]*?(?:;|(?=\\s*\\{))/,inside:{rule:/@[\\w-]+/}},url:{pattern:RegExp(\"url\\\\((?:\"+t.source+\"|[^\\n\\r()]*)\\\\)\",\"i\"),inside:{function:/^url/i,punctuation:/^\\(|\\)$/}},selector:RegExp(\"[^{}\\\\s](?:[^{};\\\"']|\"+t.source+\")*?(?=\\\\s*\\\\{)\"),string:{pattern:t,greedy:!0},property:/[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*(?=\\s*:)/i,important:/!important\\b/i,function:/[-a-z0-9]+(?=\\()/i,punctuation:/[(){};:,]/},s.languages.css.atrule.inside.rest=s.languages.css;var e=s.languages.markup;e&&(e.tag.addInlined(\"style\",\"css\"),s.languages.insertBefore(\"inside\",\"attr-value\",{\"style-attr\":{pattern:/\\s*style=(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/i,inside:{\"attr-name\":{pattern:/^\\s*style/i,inside:e.tag.inside},punctuation:/^\\s*=\\s*['\"]|['\"]\\s*$/,\"attr-value\":{pattern:/.+/i,inside:s.languages.css}},alias:\"language-css\"}},e.tag))}(Prism);\nPrism.languages.clike={comment:[{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,lookbehind:!0},{pattern:/(^|[^\\\\:])\\/\\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},\"class-name\":{pattern:/((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[\\w.\\\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\\\]/}},keyword:/\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,boolean:/\\b(?:true|false)\\b/,function:/\\w+(?=\\()/,number:/\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,operator:/--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,punctuation:/[{}[\\];(),.:]/};\nPrism.languages.javascript=Prism.languages.extend(\"clike\",{\"class-name\":[Prism.languages.clike[\"class-name\"],{pattern:/(^|[^$\\w\\xA0-\\uFFFF])[_$A-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\.(?:prototype|constructor))/,lookbehind:!0}],keyword:[{pattern:/((?:^|})\\s*)(?:catch|finally)\\b/,lookbehind:!0},{pattern:/(^|[^.])\\b(?:as|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,lookbehind:!0}],number:/\\b(?:(?:0[xX](?:[\\dA-Fa-f](?:_[\\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\\d(?:_\\d)?)+n|NaN|Infinity)\\b|(?:\\b(?:\\d(?:_\\d)?)+\\.?(?:\\d(?:_\\d)?)*|\\B\\.(?:\\d(?:_\\d)?)+)(?:[Ee][+-]?(?:\\d(?:_\\d)?)+)?/,function:/#?[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,operator:/-[-=]?|\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\|[|=]?|\\*\\*?=?|\\/=?|~|\\^=?|%=?|\\?|\\.{3}/}),Prism.languages.javascript[\"class-name\"][0].pattern=/(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/,Prism.languages.insertBefore(\"javascript\",\"keyword\",{regex:{pattern:/((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s])\\s*)\\/(\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyus]{0,6}(?=\\s*($|[\\r\\n,.;})\\]]))/,lookbehind:!0,greedy:!0},\"function-variable\":{pattern:/#?[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/,alias:\"function\"},parameter:[{pattern:/(function(?:\\s+[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)?\\s*\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\))/,lookbehind:!0,inside:Prism.languages.javascript},{pattern:/[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=>)/i,inside:Prism.languages.javascript},{pattern:/(\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*=>)/,lookbehind:!0,inside:Prism.languages.javascript},{pattern:/((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*\\s*)\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*\\{)/,lookbehind:!0,inside:Prism.languages.javascript}],constant:/\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/}),Prism.languages.insertBefore(\"javascript\",\"string\",{\"template-string\":{pattern:/`(?:\\\\[\\s\\S]|\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}|(?!\\${)[^\\\\`])*`/,greedy:!0,inside:{\"template-punctuation\":{pattern:/^`|`$/,alias:\"string\"},interpolation:{pattern:/((?:^|[^\\\\])(?:\\\\{2})*)\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}/,lookbehind:!0,inside:{\"interpolation-punctuation\":{pattern:/^\\${|}$/,alias:\"punctuation\"},rest:Prism.languages.javascript}},string:/[\\s\\S]+/}}}),Prism.languages.markup&&Prism.languages.markup.tag.addInlined(\"script\",\"javascript\"),Prism.languages.js=Prism.languages.javascript;\n!function(e){var t=\"\\\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\\\b\",n={environment:{pattern:RegExp(\"\\\\$\"+t),alias:\"constant\"},variable:[{pattern:/\\$?\\(\\([\\s\\S]+?\\)\\)/,greedy:!0,inside:{variable:[{pattern:/(^\\$\\(\\([\\s\\S]+)\\)\\)/,lookbehind:!0},/^\\$\\(\\(/],number:/\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,operator:/--?|-=|\\+\\+?|\\+=|!=?|~|\\*\\*?|\\*=|\\/=?|%=?|<<=?|>>=?|<=?|>=?|==?|&&?|&=|\\^=?|\\|\\|?|\\|=|\\?|:/,punctuation:/\\(\\(?|\\)\\)?|,|;/}},{pattern:/\\$\\((?:\\([^)]+\\)|[^()])+\\)|`[^`]+`/,greedy:!0,inside:{variable:/^\\$\\(|^`|\\)$|`$/}},{pattern:/\\$\\{[^}]+\\}/,greedy:!0,inside:{operator:/:[-=?+]?|[!\\/]|##?|%%?|\\^\\^?|,,?/,punctuation:/[\\[\\]]/,environment:{pattern:RegExp(\"(\\\\{)\"+t),lookbehind:!0,alias:\"constant\"}}},/\\$(?:\\w+|[#?*!@$])/],entity:/\\\\(?:[abceEfnrtv\\\\\"]|O?[0-7]{1,3}|x[0-9a-fA-F]{1,2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})/};e.languages.bash={shebang:{pattern:/^#!\\s*\\/.*/,alias:\"important\"},comment:{pattern:/(^|[^\"{\\\\$])#.*/,lookbehind:!0},\"function-name\":[{pattern:/(\\bfunction\\s+)\\w+(?=(?:\\s*\\(?:\\s*\\))?\\s*\\{)/,lookbehind:!0,alias:\"function\"},{pattern:/\\b\\w+(?=\\s*\\(\\s*\\)\\s*\\{)/,alias:\"function\"}],\"for-or-select\":{pattern:/(\\b(?:for|select)\\s+)\\w+(?=\\s+in\\s)/,alias:\"variable\",lookbehind:!0},\"assign-left\":{pattern:/(^|[\\s;|&]|[<>]\\()\\w+(?=\\+?=)/,inside:{environment:{pattern:RegExp(\"(^|[\\\\s;|&]|[<>]\\\\()\"+t),lookbehind:!0,alias:\"constant\"}},alias:\"variable\",lookbehind:!0},string:[{pattern:/((?:^|[^<])<<-?\\s*)(\\w+?)\\s*(?:\\r?\\n|\\r)(?:[\\s\\S])*?(?:\\r?\\n|\\r)\\2/,lookbehind:!0,greedy:!0,inside:n},{pattern:/((?:^|[^<])<<-?\\s*)([\"'])(\\w+)\\2\\s*(?:\\r?\\n|\\r)(?:[\\s\\S])*?(?:\\r?\\n|\\r)\\3/,lookbehind:!0,greedy:!0},{pattern:/([\"'])(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|`[^`]+`|(?!\\1)[^\\\\])*\\1/,greedy:!0,inside:n}],environment:{pattern:RegExp(\"\\\\$?\"+t),alias:\"constant\"},variable:n.variable,function:{pattern:/(^|[\\s;|&]|[<>]\\()(?:add|apropos|apt|aptitude|apt-cache|apt-get|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\\s;|&])/,lookbehind:!0},keyword:{pattern:/(^|[\\s;|&]|[<>]\\()(?:if|then|else|elif|fi|for|while|in|case|esac|function|select|do|done|until)(?=$|[)\\s;|&])/,lookbehind:!0},builtin:{pattern:/(^|[\\s;|&]|[<>]\\()(?:\\.|:|break|cd|continue|eval|exec|exit|export|getopts|hash|pwd|readonly|return|shift|test|times|trap|umask|unset|alias|bind|builtin|caller|command|declare|echo|enable|help|let|local|logout|mapfile|printf|read|readarray|source|type|typeset|ulimit|unalias|set|shopt)(?=$|[)\\s;|&])/,lookbehind:!0,alias:\"class-name\"},boolean:{pattern:/(^|[\\s;|&]|[<>]\\()(?:true|false)(?=$|[)\\s;|&])/,lookbehind:!0},\"file-descriptor\":{pattern:/\\B&\\d\\b/,alias:\"important\"},operator:{pattern:/\\d?<>|>\\||\\+=|==?|!=?|=~|<<[<-]?|[&\\d]?>>|\\d?[<>]&?|&[>&]?|\\|[&|]?|<=?|>=?/,inside:{\"file-descriptor\":{pattern:/^\\d/,alias:\"important\"}}},punctuation:/\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];\\\\]/,number:{pattern:/(^|\\s)(?:[1-9]\\d*|0)(?:[.,]\\d+)?\\b/,lookbehind:!0}};for(var a=[\"comment\",\"function-name\",\"for-or-select\",\"assign-left\",\"string\",\"environment\",\"function\",\"keyword\",\"builtin\",\"boolean\",\"file-descriptor\",\"operator\",\"punctuation\",\"number\"],r=n.variable[1].inside,s=0;s<a.length;s++)r[a[s]]=e.languages.bash[a[s]];e.languages.shell=e.languages.bash}(Prism);\n!function(d){d.languages.diff={coord:[/^(?:\\*{3}|-{3}|\\+{3}).*$/m,/^@@.*@@$/m,/^\\d+.*$/m]};var r={\"deleted-sign\":\"-\",\"deleted-arrow\":\"<\",\"inserted-sign\":\"+\",\"inserted-arrow\":\">\",unchanged:\" \",diff:\"!\"};Object.keys(r).forEach(function(e){var n=r[e],a=[];/^\\w+$/.test(e)||a.push(/\\w+/.exec(e)[0]),\"diff\"===e&&a.push(\"bold\"),d.languages.diff[e]={pattern:RegExp(\"^(?:[\"+n+\"].*(?:\\r\\n?|\\n|(?![\\\\s\\\\S])))+\",\"m\"),alias:a}}),Object.defineProperty(d.languages.diff,\"PREFIXES\",{value:r})}(Prism);\nPrism.languages.git={comment:/^#.*/m,deleted:/^[-–].*/m,inserted:/^\\+.*/m,string:/(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/m,command:{pattern:/^.*\\$ git .*$/m,inside:{parameter:/\\s--?\\w+/m}},coord:/^@@.*@@$/m,commit_sha1:/^commit \\w{40}$/m};\nPrism.languages.less=Prism.languages.extend(\"css\",{comment:[/\\/\\*[\\s\\S]*?\\*\\//,{pattern:/(^|[^\\\\])\\/\\/.*/,lookbehind:!0}],atrule:{pattern:/@[\\w-]+?(?:\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};])*?(?=\\s*\\{)/,inside:{punctuation:/[:()]/}},selector:{pattern:/(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};@])*?(?=\\s*\\{)/,inside:{variable:/@+[\\w-]+/}},property:/(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/i,operator:/[+\\-*\\/]/}),Prism.languages.insertBefore(\"less\",\"property\",{variable:[{pattern:/@[\\w-]+\\s*:/,inside:{punctuation:/:/}},/@@?[\\w-]+/],\"mixin-usage\":{pattern:/([{;]\\s*)[.#](?!\\d)[\\w-]+.*?(?=[(;])/,lookbehind:!0,alias:\"function\"}});\n!function(t){t.languages.http={\"request-line\":{pattern:/^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\s(?:https?:\\/\\/|\\/)\\S+\\sHTTP\\/[0-9.]+/m,inside:{property:/^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\b/,\"attr-name\":/:\\w+/}},\"response-status\":{pattern:/^HTTP\\/1.[01] \\d+.*/m,inside:{property:{pattern:/(^HTTP\\/1.[01] )\\d+.*/i,lookbehind:!0}}},\"header-name\":{pattern:/^[\\w-]+:(?=.)/m,alias:\"keyword\"}};var a,e,n,i=t.languages,s={\"application/javascript\":i.javascript,\"application/json\":i.json||i.javascript,\"application/xml\":i.xml,\"text/xml\":i.xml,\"text/html\":i.html,\"text/css\":i.css},p={\"application/json\":!0,\"application/xml\":!0};for(var r in s)if(s[r]){a=a||{};var T=p[r]?(void 0,n=(e=r).replace(/^[a-z]+\\//,\"\"),\"(?:\"+e+\"|\\\\w+/(?:[\\\\w.-]+\\\\+)+\"+n+\"(?![+\\\\w.-]))\"):r;a[r]={pattern:RegExp(\"(content-type:\\\\s*\"+T+\"[\\\\s\\\\S]*?)(?:\\\\r?\\\\n|\\\\r){2}[\\\\s\\\\S]*\",\"i\"),lookbehind:!0,inside:{rest:s[r]}}}a&&t.languages.insertBefore(\"http\",\"header-name\",a)}(Prism);\n!function(p){var a=p.languages.javadoclike={parameter:{pattern:/(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:param|arg|arguments)\\s+)\\w+/m,lookbehind:!0},keyword:{pattern:/(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,lookbehind:!0},punctuation:/[{}]/};Object.defineProperty(a,\"addSupport\",{value:function(a,e){\"string\"==typeof a&&(a=[a]),a.forEach(function(a){!function(a,e){var n=\"doc-comment\",t=p.languages[a];if(t){var r=t[n];if(!r){var i={\"doc-comment\":{pattern:/(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,alias:\"comment\"}};r=(t=p.languages.insertBefore(a,\"comment\",i))[n]}if(r instanceof RegExp&&(r=t[n]={pattern:r}),Array.isArray(r))for(var o=0,s=r.length;o<s;o++)r[o]instanceof RegExp&&(r[o]={pattern:r[o]}),e(r[o]);else e(r)}}(a,function(a){a.inside||(a.inside={}),a.inside.rest=e})})}}),a.addSupport([\"java\",\"javascript\",\"php\"],a)}(Prism);\n!function(d){function n(n,e){return n=n.replace(/<inner>/g,\"(?:\\\\\\\\.|[^\\\\\\\\\\\\n\\r]|(?:\\r?\\n|\\r)(?!\\r?\\n|\\r))\"),e&&(n=n+\"|\"+n.replace(/_/g,\"\\\\*\")),RegExp(\"((?:^|[^\\\\\\\\])(?:\\\\\\\\{2})*)(?:\"+n+\")\")}var e=\"(?:\\\\\\\\.|``.+?``|`[^`\\r\\\\n]+`|[^\\\\\\\\|\\r\\\\n`])+\",t=\"\\\\|?__(?:\\\\|__)+\\\\|?(?:(?:\\r?\\n|\\r)|$)\".replace(/__/g,e),a=\"\\\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\\\|?(?:\\r?\\n|\\r)\";d.languages.markdown=d.languages.extend(\"markup\",{}),d.languages.insertBefore(\"markdown\",\"prolog\",{blockquote:{pattern:/^>(?:[\\t ]*>)*/m,alias:\"punctuation\"},table:{pattern:RegExp(\"^\"+t+a+\"(?:\"+t+\")*\",\"m\"),inside:{\"table-data-rows\":{pattern:RegExp(\"^(\"+t+a+\")(?:\"+t+\")*$\"),lookbehind:!0,inside:{\"table-data\":{pattern:RegExp(e),inside:d.languages.markdown},punctuation:/\\|/}},\"table-line\":{pattern:RegExp(\"^(\"+t+\")\"+a+\"$\"),lookbehind:!0,inside:{punctuation:/\\||:?-{3,}:?/}},\"table-header-row\":{pattern:RegExp(\"^\"+t+\"$\"),inside:{\"table-header\":{pattern:RegExp(e),alias:\"important\",inside:d.languages.markdown},punctuation:/\\|/}}}},code:[{pattern:/(^[ \\t]*(?:\\r?\\n|\\r))(?: {4}|\\t).+(?:(?:\\r?\\n|\\r)(?: {4}|\\t).+)*/m,lookbehind:!0,alias:\"keyword\"},{pattern:/``.+?``|`[^`\\r\\n]+`/,alias:\"keyword\"},{pattern:/^```[\\s\\S]*?^```$/m,greedy:!0,inside:{\"code-block\":{pattern:/^(```.*(?:\\r?\\n|\\r))[\\s\\S]+?(?=(?:\\r?\\n|\\r)^```$)/m,lookbehind:!0},\"code-language\":{pattern:/^(```).+/,lookbehind:!0},punctuation:/```/}}],title:[{pattern:/\\S.*(?:\\r?\\n|\\r)(?:==+|--+)(?=[ \\t]*$)/m,alias:\"important\",inside:{punctuation:/==+$|--+$/}},{pattern:/(^\\s*)#+.+/m,lookbehind:!0,alias:\"important\",inside:{punctuation:/^#+|#+$/}}],hr:{pattern:/(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,lookbehind:!0,alias:\"punctuation\"},list:{pattern:/(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,lookbehind:!0,alias:\"punctuation\"},\"url-reference\":{pattern:/!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,inside:{variable:{pattern:/^(!?\\[)[^\\]]+/,lookbehind:!0},string:/(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,punctuation:/^[\\[\\]!:]|[<>]/},alias:\"url\"},bold:{pattern:n(\"__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\",!0),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^..)[\\s\\S]+(?=..$)/,lookbehind:!0,inside:{}},punctuation:/\\*\\*|__/}},italic:{pattern:n(\"_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\",!0),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^.)[\\s\\S]+(?=.$)/,lookbehind:!0,inside:{}},punctuation:/[*_]/}},strike:{pattern:n(\"(~~?)(?:(?!~)<inner>)+?\\\\2\",!1),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^~~?)[\\s\\S]+(?=\\1$)/,lookbehind:!0,inside:{}},punctuation:/~~?/}},url:{pattern:n('!?\\\\[(?:(?!\\\\])<inner>)+\\\\](?:\\\\([^\\\\s)]+(?:[\\t ]+\"(?:\\\\\\\\.|[^\"\\\\\\\\])*\")?\\\\)| ?\\\\[(?:(?!\\\\])<inner>)+\\\\])',!1),lookbehind:!0,greedy:!0,inside:{variable:{pattern:/(\\[)[^\\]]+(?=\\]$)/,lookbehind:!0},content:{pattern:/(^!?\\[)[^\\]]+(?=\\])/,lookbehind:!0,inside:{}},string:{pattern:/\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/}}}}),[\"url\",\"bold\",\"italic\",\"strike\"].forEach(function(e){[\"url\",\"bold\",\"italic\",\"strike\"].forEach(function(n){e!==n&&(d.languages.markdown[e].inside.content.inside[n]=d.languages.markdown[n])})}),d.hooks.add(\"after-tokenize\",function(n){\"markdown\"!==n.language&&\"md\"!==n.language||!function n(e){if(e&&\"string\"!=typeof e)for(var t=0,a=e.length;t<a;t++){var i=e[t];if(\"code\"===i.type){var r=i.content[1],o=i.content[3];if(r&&o&&\"code-language\"===r.type&&\"code-block\"===o.type&&\"string\"==typeof r.content){var l=\"language-\"+r.content.trim().split(/\\s+/)[0].toLowerCase();o.alias?\"string\"==typeof o.alias?o.alias=[o.alias,l]:o.alias.push(l):o.alias=[l]}}else n(i.content)}}(n.tokens)}),d.hooks.add(\"wrap\",function(n){if(\"code-block\"===n.type){for(var e=\"\",t=0,a=n.classes.length;t<a;t++){var i=n.classes[t],r=/language-(.+)/.exec(i);if(r){e=r[1];break}}var o=d.languages[e];if(o){var l=n.content.replace(/&lt;/g,\"<\").replace(/&amp;/g,\"&\");n.content=d.highlight(l,o,e)}else if(e&&\"none\"!==e&&d.plugins.autoloader){var s=\"md-\"+(new Date).valueOf()+\"-\"+Math.floor(1e16*Math.random());n.attributes.id=s,d.plugins.autoloader.loadLanguages(e,function(){var n=document.getElementById(s);n&&(n.innerHTML=d.highlight(n.textContent,d.languages[e],e))})}}}),d.languages.md=d.languages.markdown}(Prism);\nPrism.languages.json={property:{pattern:/\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,greedy:!0},string:{pattern:/\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,greedy:!0},comment:/\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,number:/-?\\d+\\.?\\d*(e[+-]?\\d+)?/i,punctuation:/[{}[\\],]/,operator:/:/,boolean:/\\b(?:true|false)\\b/,null:{pattern:/\\bnull\\b/,alias:\"keyword\"}};\n!function(u){var e=u.languages.javascript[\"template-string\"],n=e.pattern.source,a=e.inside.interpolation,i=a.inside[\"interpolation-punctuation\"],r=a.pattern.source;function t(e,t){if(u.languages[e])return{pattern:RegExp(\"((?:\"+t+\")\\\\s*)\"+n),lookbehind:!0,greedy:!0,inside:{\"template-punctuation\":{pattern:/^`|`$/,alias:\"string\"},\"embedded-code\":{pattern:/[\\s\\S]+/,alias:e}}}}function o(e,t,n){var r={code:e,grammar:t,language:n};return u.hooks.run(\"before-tokenize\",r),r.tokens=u.tokenize(r.code,r.grammar),u.hooks.run(\"after-tokenize\",r),r.tokens}function d(e){var t={};t[\"interpolation-punctuation\"]=i;var n=u.tokenize(e,t);if(3===n.length){var r=[1,1];r.push.apply(r,o(n[1],u.languages.javascript,\"javascript\")),n.splice.apply(n,r)}return new u.Token(\"interpolation\",n,a.alias,e)}function c(a,e,i){var t=u.tokenize(a,{interpolation:{pattern:RegExp(r),lookbehind:!0}}),f=0,y={},n=o(t.map(function(e){if(\"string\"==typeof e)return e;for(var t,n=e.content;-1!==a.indexOf((r=f++,t=\"___\"+i.toUpperCase()+\"_\"+r+\"___\")););return y[t]=n,t;var r}).join(\"\"),e,i),v=Object.keys(y);return f=0,function e(t){for(var n=0;n<t.length;n++){if(f>=v.length)return;var r=t[n];if(\"string\"==typeof r||\"string\"==typeof r.content){var a=v[f],i=\"string\"==typeof r?r:r.content,o=i.indexOf(a);if(-1!==o){++f;var s=i.substring(0,o),p=d(y[a]),l=i.substring(o+a.length),g=[];if(s&&g.push(s),g.push(p),l){var u=[l];e(u),g.push.apply(g,u)}\"string\"==typeof r?(t.splice.apply(t,[n,1].concat(g)),n+=g.length-1):r.content=g}}else{var c=r.content;Array.isArray(c)?e(c):e([c])}}}(n),new u.Token(i,n,\"language-\"+i,a)}u.languages.javascript[\"template-string\"]=[t(\"css\",\"\\\\b(?:styled(?:\\\\([^)]*\\\\))?(?:\\\\s*\\\\.\\\\s*\\\\w+(?:\\\\([^)]*\\\\))*)*|css(?:\\\\s*\\\\.\\\\s*(?:global|resolve))?|createGlobalStyle|keyframes)\"),t(\"html\",\"\\\\bhtml|\\\\.\\\\s*(?:inner|outer)HTML\\\\s*\\\\+?=\"),t(\"svg\",\"\\\\bsvg\"),t(\"markdown\",\"\\\\b(?:md|markdown)\"),t(\"graphql\",\"\\\\b(?:gql|graphql(?:\\\\s*\\\\.\\\\s*experimental)?)\"),e].filter(Boolean);var s={javascript:!0,js:!0,typescript:!0,ts:!0,jsx:!0,tsx:!0};function f(e){return\"string\"==typeof e?e:Array.isArray(e)?e.map(f).join(\"\"):f(e.content)}u.hooks.add(\"after-tokenize\",function(e){e.language in s&&!function e(t){for(var n=0,r=t.length;n<r;n++){var a=t[n];if(\"string\"!=typeof a){var i=a.content;if(Array.isArray(i))if(\"template-string\"===a.type){var o=i[1];if(3===i.length&&\"string\"!=typeof o&&\"embedded-code\"===o.type){var s=f(o),p=o.alias,l=Array.isArray(p)?p[0]:p,g=u.languages[l];if(!g)continue;i[1]=c(s,g,l)}}else e(i);else\"string\"!=typeof i&&e([i])}}}(e.tokens)})}(Prism);\nPrism.languages.typescript=Prism.languages.extend(\"javascript\",{keyword:/\\b(?:abstract|as|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|var|void|while|with|yield)\\b/,builtin:/\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/}),Prism.languages.ts=Prism.languages.typescript;\n!function(a){var e=a.languages.javascript,n=\"{(?:[^{}]|{(?:[^{}]|{[^{}]*})*})+}\",s=\"(@(?:param|arg|argument|property)\\\\s+(?:\"+n+\"\\\\s+)?)\";a.languages.jsdoc=a.languages.extend(\"javadoclike\",{parameter:{pattern:RegExp(s+\"[$\\\\w\\\\xA0-\\\\uFFFF.]+(?=\\\\s|$)\"),lookbehind:!0,inside:{punctuation:/\\./}}}),a.languages.insertBefore(\"jsdoc\",\"keyword\",{\"optional-parameter\":{pattern:RegExp(s+\"\\\\[[$\\\\w\\\\xA0-\\\\uFFFF.]+(?:=[^[\\\\]]+)?\\\\](?=\\\\s|$)\"),lookbehind:!0,inside:{parameter:{pattern:/(^\\[)[$\\w\\xA0-\\uFFFF\\.]+/,lookbehind:!0,inside:{punctuation:/\\./}},code:{pattern:/(=)[\\s\\S]*(?=\\]$)/,lookbehind:!0,inside:e,alias:\"language-javascript\"},punctuation:/[=[\\]]/}},\"class-name\":[{pattern:RegExp(\"(@[a-z]+\\\\s+)\"+n),lookbehind:!0,inside:{punctuation:/[.,:?=<>|{}()[\\]]/}},{pattern:/(@(?:augments|extends|class|interface|memberof!?|this)\\s+)[A-Z]\\w*(?:\\.[A-Z]\\w*)*/,lookbehind:!0,inside:{punctuation:/\\./}}],example:{pattern:/(@example\\s+)[^@]+?(?=\\s*(?:\\*\\s*)?(?:@\\w|\\*\\/))/,lookbehind:!0,inside:{code:{pattern:/^(\\s*(?:\\*\\s*)?).+$/m,lookbehind:!0,inside:e,alias:\"language-javascript\"}}}}),a.languages.javadoclike.addSupport(\"javascript\",a.languages.jsdoc)}(Prism);\nPrism.languages.scss=Prism.languages.extend(\"css\",{comment:{pattern:/(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,lookbehind:!0},atrule:{pattern:/@[\\w-]+(?:\\([^()]+\\)|[^(])*?(?=\\s+[{;])/,inside:{rule:/@[\\w-]+/}},url:/(?:[-a-z]+-)?url(?=\\()/i,selector:{pattern:/(?=\\S)[^@;{}()]?(?:[^@;{}()]|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}]+[:{][^}]+))/m,inside:{parent:{pattern:/&/,alias:\"important\"},placeholder:/%[-\\w]+/,variable:/\\$[-\\w]+|#\\{\\$[-\\w]+\\}/}},property:{pattern:/(?:[\\w-]|\\$[-\\w]+|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,inside:{variable:/\\$[-\\w]+|#\\{\\$[-\\w]+\\}/}}}),Prism.languages.insertBefore(\"scss\",\"atrule\",{keyword:[/@(?:if|else(?: if)?|for|each|while|import|extend|debug|warn|mixin|include|function|return|content)/i,{pattern:/( +)(?:from|through)(?= )/,lookbehind:!0}]}),Prism.languages.insertBefore(\"scss\",\"important\",{variable:/\\$[-\\w]+|#\\{\\$[-\\w]+\\}/}),Prism.languages.insertBefore(\"scss\",\"function\",{placeholder:{pattern:/%[-\\w]+/,alias:\"selector\"},statement:{pattern:/\\B!(?:default|optional)\\b/i,alias:\"keyword\"},boolean:/\\b(?:true|false)\\b/,null:{pattern:/\\bnull\\b/,alias:\"keyword\"},operator:{pattern:/(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|or|not)(?=\\s)/,lookbehind:!0}}),Prism.languages.scss.atrule.inside.rest=Prism.languages.scss;\n!function(a){a.languages.insertBefore(\"javascript\",\"function-variable\",{\"method-variable\":{pattern:RegExp(\"(\\\\.\\\\s*)\"+a.languages.javascript[\"function-variable\"].pattern.source),lookbehind:!0,alias:[\"function-variable\",\"method\",\"function\",\"property-access\"]}}),a.languages.insertBefore(\"javascript\",\"function\",{method:{pattern:RegExp(\"(\\\\.\\\\s*)\"+a.languages.javascript.function.source),lookbehind:!0,alias:[\"function\",\"property-access\"]}}),a.languages.insertBefore(\"javascript\",\"constant\",{\"known-class-name\":[{pattern:/\\b(?:(?:(?:Uint|Int)(?:8|16|32)|Uint8Clamped|Float(?:32|64))?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|(?:Weak)?(?:Set|Map)|WebAssembly)\\b/,alias:\"class-name\"},{pattern:/\\b(?:[A-Z]\\w*)Error\\b/,alias:\"class-name\"}]}),a.languages.javascript.keyword.unshift({pattern:/\\b(?:as|default|export|from|import)\\b/,alias:\"module\"},{pattern:/\\bnull\\b/,alias:[\"null\",\"nil\"]},{pattern:/\\bundefined\\b/,alias:\"nil\"}),a.languages.insertBefore(\"javascript\",\"operator\",{spread:{pattern:/\\.{3}/,alias:\"operator\"},arrow:{pattern:/=>/,alias:\"operator\"}}),a.languages.insertBefore(\"javascript\",\"punctuation\",{\"property-access\":{pattern:/(\\.\\s*)#?[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*/,lookbehind:!0},\"maybe-class-name\":{pattern:/(^|[^$\\w\\xA0-\\uFFFF])[A-Z][$\\w\\xA0-\\uFFFF]+/,lookbehind:!0},dom:{pattern:/\\b(?:document|location|navigator|performance|(?:local|session)Storage|window)\\b/,alias:\"variable\"},console:{pattern:/\\bconsole(?=\\s*\\.)/,alias:\"class-name\"}});for(var e=[\"function\",\"function-variable\",\"method\",\"method-variable\",\"property-access\"],t=0;t<e.length;t++){var n=e[t],r=a.languages.javascript[n];\"RegExp\"===a.util.type(r)&&(r=a.languages.javascript[n]={pattern:r});var s=r.inside||{};(r.inside=s)[\"maybe-class-name\"]=/^[A-Z][\\s\\S]*/}}(Prism);\n!function(i){var t=i.util.clone(i.languages.javascript);i.languages.jsx=i.languages.extend(\"markup\",t),i.languages.jsx.tag.pattern=/<\\/?(?:[\\w.:-]+\\s*(?:\\s+(?:[\\w.:-]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s{'\">=]+|\\{(?:\\{(?:\\{[^}]*\\}|[^{}])*\\}|[^{}])+\\}))?|\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}))*\\s*\\/?)?>/i,i.languages.jsx.tag.inside.tag.pattern=/^<\\/?[^\\s>\\/]*/i,i.languages.jsx.tag.inside[\"attr-value\"].pattern=/=(?!\\{)(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">]+)/i,i.languages.jsx.tag.inside.tag.inside[\"class-name\"]=/^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/,i.languages.insertBefore(\"inside\",\"attr-name\",{spread:{pattern:/\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}/,inside:{punctuation:/\\.{3}|[{}.]/,\"attr-value\":/\\w+/}}},i.languages.jsx.tag),i.languages.insertBefore(\"inside\",\"attr-value\",{script:{pattern:/=(\\{(?:\\{(?:\\{[^}]*\\}|[^}])*\\}|[^}])+\\})/i,inside:{\"script-punctuation\":{pattern:/^=(?={)/,alias:\"punctuation\"},rest:i.languages.jsx},alias:\"language-javascript\"}},i.languages.jsx.tag);var o=function(t){return t?\"string\"==typeof t?t:\"string\"==typeof t.content?t.content:t.content.map(o).join(\"\"):\"\"},p=function(t){for(var n=[],e=0;e<t.length;e++){var a=t[e],s=!1;if(\"string\"!=typeof a&&(\"tag\"===a.type&&a.content[0]&&\"tag\"===a.content[0].type?\"</\"===a.content[0].content[0].content?0<n.length&&n[n.length-1].tagName===o(a.content[0].content[1])&&n.pop():\"/>\"===a.content[a.content.length-1].content||n.push({tagName:o(a.content[0].content[1]),openedBraces:0}):0<n.length&&\"punctuation\"===a.type&&\"{\"===a.content?n[n.length-1].openedBraces++:0<n.length&&0<n[n.length-1].openedBraces&&\"punctuation\"===a.type&&\"}\"===a.content?n[n.length-1].openedBraces--:s=!0),(s||\"string\"==typeof a)&&0<n.length&&0===n[n.length-1].openedBraces){var g=o(a);e<t.length-1&&(\"string\"==typeof t[e+1]||\"plain-text\"===t[e+1].type)&&(g+=o(t[e+1]),t.splice(e+1,1)),0<e&&(\"string\"==typeof t[e-1]||\"plain-text\"===t[e-1].type)&&(g=o(t[e-1])+g,t.splice(e-1,1),e--),t[e]=new i.Token(\"plain-text\",g,null,g)}a.content&&\"string\"!=typeof a.content&&p(a.content)}};i.hooks.add(\"after-tokenize\",function(t){\"jsx\"!==t.language&&\"tsx\"!==t.language||p(t.tokens)})}(Prism);\n!function(e){e.languages.sass=e.languages.extend(\"css\",{comment:{pattern:/^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t]+.+)*/m,lookbehind:!0}}),e.languages.insertBefore(\"sass\",\"atrule\",{\"atrule-line\":{pattern:/^(?:[ \\t]*)[@+=].+/m,inside:{atrule:/(?:@[\\w-]+|[+=])/m}}}),delete e.languages.sass.atrule;var t=/\\$[-\\w]+|#\\{\\$[-\\w]+\\}/,a=[/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/,{pattern:/(\\s+)-(?=\\s)/,lookbehind:!0}];e.languages.insertBefore(\"sass\",\"property\",{\"variable-line\":{pattern:/^[ \\t]*\\$.+/m,inside:{punctuation:/:/,variable:t,operator:a}},\"property-line\":{pattern:/^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s]+.*)/m,inside:{property:[/[^:\\s]+(?=\\s*:)/,{pattern:/(:)[^:\\s]+/,lookbehind:!0}],punctuation:/:/,variable:t,operator:a,important:e.languages.sass.important}}}),delete e.languages.sass.property,delete e.languages.sass.important,e.languages.insertBefore(\"sass\",\"punctuation\",{selector:{pattern:/([ \\t]*)\\S(?:,?[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,?[^,\\r\\n]+)*)*/,lookbehind:!0}})}(Prism);\n!function(){if(\"undefined\"!=typeof self&&self.Prism&&self.document){var l=\"line-numbers\",c=/\\n(?!$)/g,m=function(e){var t=a(e)[\"white-space\"];if(\"pre-wrap\"===t||\"pre-line\"===t){var n=e.querySelector(\"code\"),r=e.querySelector(\".line-numbers-rows\"),s=e.querySelector(\".line-numbers-sizer\"),i=n.textContent.split(c);s||((s=document.createElement(\"span\")).className=\"line-numbers-sizer\",n.appendChild(s)),s.style.display=\"block\",i.forEach(function(e,t){s.textContent=e||\"\\n\";var n=s.getBoundingClientRect().height;r.children[t].style.height=n+\"px\"}),s.textContent=\"\",s.style.display=\"none\"}},a=function(e){return e?window.getComputedStyle?getComputedStyle(e):e.currentStyle||null:null};window.addEventListener(\"resize\",function(){Array.prototype.forEach.call(document.querySelectorAll(\"pre.\"+l),m)}),Prism.hooks.add(\"complete\",function(e){if(e.code){var t=e.element,n=t.parentNode;if(n&&/pre/i.test(n.nodeName)&&!t.querySelector(\".line-numbers-rows\")){for(var r=!1,s=/(?:^|\\s)line-numbers(?:\\s|$)/,i=t;i;i=i.parentNode)if(s.test(i.className)){r=!0;break}if(r){t.className=t.className.replace(s,\" \"),s.test(n.className)||(n.className+=\" line-numbers\");var l,a=e.code.match(c),o=a?a.length+1:1,u=new Array(o+1).join(\"<span></span>\");(l=document.createElement(\"span\")).setAttribute(\"aria-hidden\",\"true\"),l.className=\"line-numbers-rows\",l.innerHTML=u,n.hasAttribute(\"data-start\")&&(n.style.counterReset=\"linenumber \"+(parseInt(n.getAttribute(\"data-start\"),10)-1)),e.element.appendChild(l),m(n),Prism.hooks.run(\"line-numbers\",e)}}}}),Prism.hooks.add(\"line-numbers\",function(e){e.plugins=e.plugins||{},e.plugins.lineNumbers=!0}),Prism.plugins.lineNumbers={getLine:function(e,t){if(\"PRE\"===e.tagName&&e.classList.contains(l)){var n=e.querySelector(\".line-numbers-rows\"),r=parseInt(e.getAttribute(\"data-start\"),10)||1,s=r+(n.children.length-1);t<r&&(t=r),s<t&&(t=s);var i=t-r;return n.children[i]}}}}}();\n!function(){if(\"undefined\"!=typeof self&&self.Prism&&self.document){var u=/(?:^|\\s)command-line(?:\\s|$)/;Prism.hooks.add(\"before-highlight\",function(e){var t=e.vars=e.vars||{},a=t[\"command-line\"]=t[\"command-line\"]||{};if(!a.complete&&e.code){var n=e.element.parentNode;if(n&&/pre/i.test(n.nodeName)&&(u.test(n.className)||u.test(e.element.className)))if(e.element.querySelector(\".command-line-prompt\"))a.complete=!0;else{var r=e.code.split(\"\\n\");a.numberOfLines=r.length;var s=a.outputLines=[],o=n.getAttribute(\"data-output\"),i=n.getAttribute(\"data-filter-output\");if(o||\"\"===o){o=o.split(\",\");for(var l=0;l<o.length;l++){var m=o[l].split(\"-\"),p=parseInt(m[0],10),d=2===m.length?parseInt(m[1],10):p;if(!isNaN(p)&&!isNaN(d)){p<1&&(p=1),d>r.length&&(d=r.length),d--;for(var c=--p;c<=d;c++)s[c]=r[c],r[c]=\"\"}}}else if(i)for(l=0;l<r.length;l++)0===r[l].indexOf(i)&&(s[l]=r[l].slice(i.length),r[l]=\"\");e.code=r.join(\"\\n\")}else a.complete=!0}else a.complete=!0}),Prism.hooks.add(\"before-insert\",function(e){var t=e.vars=e.vars||{},a=t[\"command-line\"]=t[\"command-line\"]||{};if(!a.complete){for(var n=e.highlightedCode.split(\"\\n\"),r=0,s=(a.outputLines||[]).length;r<s;r++)a.outputLines.hasOwnProperty(r)&&(n[r]=a.outputLines[r]);e.highlightedCode=n.join(\"\\n\")}}),Prism.hooks.add(\"complete\",function(e){var t=e.vars=e.vars||{},a=t[\"command-line\"]=t[\"command-line\"]||{};if(!a.complete){var n=e.element.parentNode;u.test(e.element.className)&&(e.element.className=e.element.className.replace(u,\" \")),u.test(n.className)||(n.className+=\" command-line\");var r=function(e,t){return(n.getAttribute(e)||t).replace(/\"/g,\"&quot\")},s=new Array((a.numberOfLines||0)+1),o=r(\"data-prompt\",\"\");if(\"\"!==o)s=s.join('<span data-prompt=\"'+o+'\"></span>');else{var i=r(\"data-user\",\"user\"),l=r(\"data-host\",\"localhost\");s=s.join('<span data-user=\"'+i+'\" data-host=\"'+l+'\"></span>')}var m=document.createElement(\"span\");m.className=\"command-line-prompt\",m.innerHTML=s;for(var p=0,d=(a.outputLines||[]).length;p<d;p++)if(a.outputLines.hasOwnProperty(p)){var c=m.children[p];c.removeAttribute(\"data-user\"),c.removeAttribute(\"data-host\"),c.removeAttribute(\"data-prompt\")}e.element.insertBefore(m,e.element.firstChild),a.complete=!0}})}}();\n"],"sourceRoot":"webpack:///"}